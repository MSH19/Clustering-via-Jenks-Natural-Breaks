
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00000000 <_vector_table>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
   0:	80 0b 00 20 e1 1b 00 00 21 48 00 00 b5 1b 00 00     ... ....!H......
  10:	b5 1b 00 00 b5 1b 00 00 b5 1b 00 00 00 00 00 00     ................
	...
  2c:	bd 18 00 00 b5 1b 00 00 00 00 00 00 69 18 00 00     ............i...
  3c:	b5 1b 00 00                                         ....

00000040 <_irq_vector_table>:
  40:	6d 19 00 00 6d 19 00 00 6d 19 00 00 6d 19 00 00     m...m...m...m...
  50:	6d 19 00 00 6d 19 00 00 6d 19 00 00 6d 19 00 00     m...m...m...m...
  60:	6d 19 00 00 6d 19 00 00 6d 19 00 00 6d 19 00 00     m...m...m...m...
  70:	6d 19 00 00 6d 19 00 00 6d 19 00 00 6d 19 00 00     m...m...m...m...
  80:	6d 19 00 00 6d 19 00 00 6d 19 00 00 6d 19 00 00     m...m...m...m...
  90:	6d 19 00 00 6d 19 00 00 6d 19 00 00 6d 19 00 00     m...m...m...m...
  a0:	6d 19 00 00 6d 19 00 00 6d 19 00 00 6d 19 00 00     m...m...m...m...
  b0:	6d 19 00 00 6d 19 00 00 6d 19 00 00 6d 19 00 00     m...m...m...m...
  c0:	6d 19 00 00 6d 19 00 00 6d 19 00 00 6d 19 00 00     m...m...m...m...
  d0:	6d 19 00 00 6d 19 00 00 6d 19 00 00                 m...m...m...

Disassembly of section text:

000000dc <__aeabi_frsub>:
      dc:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
      e0:	e002      	b.n	e8 <__addsf3>
      e2:	bf00      	nop

000000e4 <__aeabi_fsub>:
      e4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

000000e8 <__addsf3>:
      e8:	0042      	lsls	r2, r0, #1
      ea:	bf1f      	itttt	ne
      ec:	ea5f 0341 	movsne.w	r3, r1, lsl #1
      f0:	ea92 0f03 	teqne	r2, r3
      f4:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
      f8:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
      fc:	d06a      	beq.n	1d4 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x67>
      fe:	ea4f 6212 	mov.w	r2, r2, lsr #24
     102:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
     106:	bfc1      	itttt	gt
     108:	18d2      	addgt	r2, r2, r3
     10a:	4041      	eorgt	r1, r0
     10c:	4048      	eorgt	r0, r1
     10e:	4041      	eorgt	r1, r0
     110:	bfb8      	it	lt
     112:	425b      	neglt	r3, r3
     114:	2b19      	cmp	r3, #25
     116:	bf88      	it	hi
     118:	4770      	bxhi	lr
     11a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
     11e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
     122:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
     126:	bf18      	it	ne
     128:	4240      	negne	r0, r0
     12a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
     12e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
     132:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
     136:	bf18      	it	ne
     138:	4249      	negne	r1, r1
     13a:	ea92 0f03 	teq	r2, r3
     13e:	d03f      	beq.n	1c0 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x53>
     140:	f1a2 0201 	sub.w	r2, r2, #1
     144:	fa41 fc03 	asr.w	ip, r1, r3
     148:	eb10 000c 	adds.w	r0, r0, ip
     14c:	f1c3 0320 	rsb	r3, r3, #32
     150:	fa01 f103 	lsl.w	r1, r1, r3
     154:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
     158:	d502      	bpl.n	160 <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x16>
     15a:	4249      	negs	r1, r1
     15c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
     160:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
     164:	d313      	bcc.n	18e <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x21>
     166:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
     16a:	d306      	bcc.n	17a <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0xd>
     16c:	0840      	lsrs	r0, r0, #1
     16e:	ea4f 0131 	mov.w	r1, r1, rrx
     172:	f102 0201 	add.w	r2, r2, #1
     176:	2afe      	cmp	r2, #254	; 0xfe
     178:	d251      	bcs.n	21e <CONFIG_FLASH_SIZE+0x1e>
     17a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
     17e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
     182:	bf08      	it	eq
     184:	f020 0001 	biceq.w	r0, r0, #1
     188:	ea40 0003 	orr.w	r0, r0, r3
     18c:	4770      	bx	lr
     18e:	0049      	lsls	r1, r1, #1
     190:	eb40 0000 	adc.w	r0, r0, r0
     194:	3a01      	subs	r2, #1
     196:	bf28      	it	cs
     198:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
     19c:	d2ed      	bcs.n	17a <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0xd>
     19e:	fab0 fc80 	clz	ip, r0
     1a2:	f1ac 0c08 	sub.w	ip, ip, #8
     1a6:	ebb2 020c 	subs.w	r2, r2, ip
     1aa:	fa00 f00c 	lsl.w	r0, r0, ip
     1ae:	bfaa      	itet	ge
     1b0:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
     1b4:	4252      	neglt	r2, r2
     1b6:	4318      	orrge	r0, r3
     1b8:	bfbc      	itt	lt
     1ba:	40d0      	lsrlt	r0, r2
     1bc:	4318      	orrlt	r0, r3
     1be:	4770      	bx	lr
     1c0:	f092 0f00 	teq	r2, #0
     1c4:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
     1c8:	bf06      	itte	eq
     1ca:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
     1ce:	3201      	addeq	r2, #1
     1d0:	3b01      	subne	r3, #1
     1d2:	e7b5      	b.n	140 <CONFIG_IDLE_STACK_SIZE>
     1d4:	ea4f 0341 	mov.w	r3, r1, lsl #1
     1d8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
     1dc:	bf18      	it	ne
     1de:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
     1e2:	d021      	beq.n	228 <CONFIG_FLASH_SIZE+0x28>
     1e4:	ea92 0f03 	teq	r2, r3
     1e8:	d004      	beq.n	1f4 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x87>
     1ea:	f092 0f00 	teq	r2, #0
     1ee:	bf08      	it	eq
     1f0:	4608      	moveq	r0, r1
     1f2:	4770      	bx	lr
     1f4:	ea90 0f01 	teq	r0, r1
     1f8:	bf1c      	itt	ne
     1fa:	2000      	movne	r0, #0
     1fc:	4770      	bxne	lr
     1fe:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
     202:	d104      	bne.n	20e <CONFIG_FLASH_SIZE+0xe>
     204:	0040      	lsls	r0, r0, #1
     206:	bf28      	it	cs
     208:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
     20c:	4770      	bx	lr
     20e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
     212:	bf3c      	itt	cc
     214:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
     218:	4770      	bxcc	lr
     21a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
     21e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
     222:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
     226:	4770      	bx	lr
     228:	ea7f 6222 	mvns.w	r2, r2, asr #24
     22c:	bf16      	itet	ne
     22e:	4608      	movne	r0, r1
     230:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
     234:	4601      	movne	r1, r0
     236:	0242      	lsls	r2, r0, #9
     238:	bf06      	itte	eq
     23a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
     23e:	ea90 0f01 	teqeq	r0, r1
     242:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
     246:	4770      	bx	lr

00000248 <__aeabi_ui2f>:
     248:	f04f 0300 	mov.w	r3, #0
     24c:	e004      	b.n	258 <__aeabi_i2f+0x8>
     24e:	bf00      	nop

00000250 <__aeabi_i2f>:
     250:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
     254:	bf48      	it	mi
     256:	4240      	negmi	r0, r0
     258:	ea5f 0c00 	movs.w	ip, r0
     25c:	bf08      	it	eq
     25e:	4770      	bxeq	lr
     260:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
     264:	4601      	mov	r1, r0
     266:	f04f 0000 	mov.w	r0, #0
     26a:	e01c      	b.n	2a6 <__aeabi_l2f+0x2a>

0000026c <__aeabi_ul2f>:
     26c:	ea50 0201 	orrs.w	r2, r0, r1
     270:	bf08      	it	eq
     272:	4770      	bxeq	lr
     274:	f04f 0300 	mov.w	r3, #0
     278:	e00a      	b.n	290 <__aeabi_l2f+0x14>
     27a:	bf00      	nop

0000027c <__aeabi_l2f>:
     27c:	ea50 0201 	orrs.w	r2, r0, r1
     280:	bf08      	it	eq
     282:	4770      	bxeq	lr
     284:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
     288:	d502      	bpl.n	290 <__aeabi_l2f+0x14>
     28a:	4240      	negs	r0, r0
     28c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     290:	ea5f 0c01 	movs.w	ip, r1
     294:	bf02      	ittt	eq
     296:	4684      	moveq	ip, r0
     298:	4601      	moveq	r1, r0
     29a:	2000      	moveq	r0, #0
     29c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
     2a0:	bf08      	it	eq
     2a2:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
     2a6:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
     2aa:	fabc f28c 	clz	r2, ip
     2ae:	3a08      	subs	r2, #8
     2b0:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
     2b4:	db10      	blt.n	2d8 <__aeabi_l2f+0x5c>
     2b6:	fa01 fc02 	lsl.w	ip, r1, r2
     2ba:	4463      	add	r3, ip
     2bc:	fa00 fc02 	lsl.w	ip, r0, r2
     2c0:	f1c2 0220 	rsb	r2, r2, #32
     2c4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
     2c8:	fa20 f202 	lsr.w	r2, r0, r2
     2cc:	eb43 0002 	adc.w	r0, r3, r2
     2d0:	bf08      	it	eq
     2d2:	f020 0001 	biceq.w	r0, r0, #1
     2d6:	4770      	bx	lr
     2d8:	f102 0220 	add.w	r2, r2, #32
     2dc:	fa01 fc02 	lsl.w	ip, r1, r2
     2e0:	f1c2 0220 	rsb	r2, r2, #32
     2e4:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
     2e8:	fa21 f202 	lsr.w	r2, r1, r2
     2ec:	eb43 0002 	adc.w	r0, r3, r2
     2f0:	bf08      	it	eq
     2f2:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
     2f6:	4770      	bx	lr

000002f8 <__aeabi_fmul>:
     2f8:	f04f 0cff 	mov.w	ip, #255	; 0xff
     2fc:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
     300:	bf1e      	ittt	ne
     302:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
     306:	ea92 0f0c 	teqne	r2, ip
     30a:	ea93 0f0c 	teqne	r3, ip
     30e:	d06f      	beq.n	3f0 <__aeabi_fmul+0xf8>
     310:	441a      	add	r2, r3
     312:	ea80 0c01 	eor.w	ip, r0, r1
     316:	0240      	lsls	r0, r0, #9
     318:	bf18      	it	ne
     31a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
     31e:	d01e      	beq.n	35e <__aeabi_fmul+0x66>
     320:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
     324:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
     328:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
     32c:	fba0 3101 	umull	r3, r1, r0, r1
     330:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
     334:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
     338:	bf3e      	ittt	cc
     33a:	0049      	lslcc	r1, r1, #1
     33c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
     340:	005b      	lslcc	r3, r3, #1
     342:	ea40 0001 	orr.w	r0, r0, r1
     346:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
     34a:	2afd      	cmp	r2, #253	; 0xfd
     34c:	d81d      	bhi.n	38a <__aeabi_fmul+0x92>
     34e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
     352:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
     356:	bf08      	it	eq
     358:	f020 0001 	biceq.w	r0, r0, #1
     35c:	4770      	bx	lr
     35e:	f090 0f00 	teq	r0, #0
     362:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
     366:	bf08      	it	eq
     368:	0249      	lsleq	r1, r1, #9
     36a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
     36e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
     372:	3a7f      	subs	r2, #127	; 0x7f
     374:	bfc2      	ittt	gt
     376:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
     37a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
     37e:	4770      	bxgt	lr
     380:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
     384:	f04f 0300 	mov.w	r3, #0
     388:	3a01      	subs	r2, #1
     38a:	dc5d      	bgt.n	448 <CONFIG_MAIN_STACK_SIZE+0x48>
     38c:	f112 0f19 	cmn.w	r2, #25
     390:	bfdc      	itt	le
     392:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
     396:	4770      	bxle	lr
     398:	f1c2 0200 	rsb	r2, r2, #0
     39c:	0041      	lsls	r1, r0, #1
     39e:	fa21 f102 	lsr.w	r1, r1, r2
     3a2:	f1c2 0220 	rsb	r2, r2, #32
     3a6:	fa00 fc02 	lsl.w	ip, r0, r2
     3aa:	ea5f 0031 	movs.w	r0, r1, rrx
     3ae:	f140 0000 	adc.w	r0, r0, #0
     3b2:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
     3b6:	bf08      	it	eq
     3b8:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
     3bc:	4770      	bx	lr
     3be:	f092 0f00 	teq	r2, #0
     3c2:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
     3c6:	bf02      	ittt	eq
     3c8:	0040      	lsleq	r0, r0, #1
     3ca:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
     3ce:	3a01      	subeq	r2, #1
     3d0:	d0f9      	beq.n	3c6 <__aeabi_fmul+0xce>
     3d2:	ea40 000c 	orr.w	r0, r0, ip
     3d6:	f093 0f00 	teq	r3, #0
     3da:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
     3de:	bf02      	ittt	eq
     3e0:	0049      	lsleq	r1, r1, #1
     3e2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
     3e6:	3b01      	subeq	r3, #1
     3e8:	d0f9      	beq.n	3de <__aeabi_fmul+0xe6>
     3ea:	ea41 010c 	orr.w	r1, r1, ip
     3ee:	e78f      	b.n	310 <__aeabi_fmul+0x18>
     3f0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
     3f4:	ea92 0f0c 	teq	r2, ip
     3f8:	bf18      	it	ne
     3fa:	ea93 0f0c 	teqne	r3, ip
     3fe:	d00a      	beq.n	416 <CONFIG_MAIN_STACK_SIZE+0x16>
     400:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
     404:	bf18      	it	ne
     406:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
     40a:	d1d8      	bne.n	3be <__aeabi_fmul+0xc6>
     40c:	ea80 0001 	eor.w	r0, r0, r1
     410:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
     414:	4770      	bx	lr
     416:	f090 0f00 	teq	r0, #0
     41a:	bf17      	itett	ne
     41c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
     420:	4608      	moveq	r0, r1
     422:	f091 0f00 	teqne	r1, #0
     426:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
     42a:	d014      	beq.n	456 <CONFIG_MAIN_STACK_SIZE+0x56>
     42c:	ea92 0f0c 	teq	r2, ip
     430:	d101      	bne.n	436 <CONFIG_MAIN_STACK_SIZE+0x36>
     432:	0242      	lsls	r2, r0, #9
     434:	d10f      	bne.n	456 <CONFIG_MAIN_STACK_SIZE+0x56>
     436:	ea93 0f0c 	teq	r3, ip
     43a:	d103      	bne.n	444 <CONFIG_MAIN_STACK_SIZE+0x44>
     43c:	024b      	lsls	r3, r1, #9
     43e:	bf18      	it	ne
     440:	4608      	movne	r0, r1
     442:	d108      	bne.n	456 <CONFIG_MAIN_STACK_SIZE+0x56>
     444:	ea80 0001 	eor.w	r0, r0, r1
     448:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
     44c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
     450:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
     454:	4770      	bx	lr
     456:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
     45a:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
     45e:	4770      	bx	lr

00000460 <__aeabi_fdiv>:
     460:	f04f 0cff 	mov.w	ip, #255	; 0xff
     464:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
     468:	bf1e      	ittt	ne
     46a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
     46e:	ea92 0f0c 	teqne	r2, ip
     472:	ea93 0f0c 	teqne	r3, ip
     476:	d069      	beq.n	54c <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x64>
     478:	eba2 0203 	sub.w	r2, r2, r3
     47c:	ea80 0c01 	eor.w	ip, r0, r1
     480:	0249      	lsls	r1, r1, #9
     482:	ea4f 2040 	mov.w	r0, r0, lsl #9
     486:	d037      	beq.n	4f8 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x10>
     488:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
     48c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
     490:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
     494:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
     498:	428b      	cmp	r3, r1
     49a:	bf38      	it	cc
     49c:	005b      	lslcc	r3, r3, #1
     49e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
     4a2:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
     4a6:	428b      	cmp	r3, r1
     4a8:	bf24      	itt	cs
     4aa:	1a5b      	subcs	r3, r3, r1
     4ac:	ea40 000c 	orrcs.w	r0, r0, ip
     4b0:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
     4b4:	bf24      	itt	cs
     4b6:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
     4ba:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
     4be:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
     4c2:	bf24      	itt	cs
     4c4:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
     4c8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
     4cc:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
     4d0:	bf24      	itt	cs
     4d2:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
     4d6:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
     4da:	011b      	lsls	r3, r3, #4
     4dc:	bf18      	it	ne
     4de:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
     4e2:	d1e0      	bne.n	4a6 <__aeabi_fdiv+0x46>
     4e4:	2afd      	cmp	r2, #253	; 0xfd
     4e6:	f63f af50 	bhi.w	38a <__aeabi_fmul+0x92>
     4ea:	428b      	cmp	r3, r1
     4ec:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
     4f0:	bf08      	it	eq
     4f2:	f020 0001 	biceq.w	r0, r0, #1
     4f6:	4770      	bx	lr
     4f8:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
     4fc:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
     500:	327f      	adds	r2, #127	; 0x7f
     502:	bfc2      	ittt	gt
     504:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
     508:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
     50c:	4770      	bxgt	lr
     50e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
     512:	f04f 0300 	mov.w	r3, #0
     516:	3a01      	subs	r2, #1
     518:	e737      	b.n	38a <__aeabi_fmul+0x92>
     51a:	f092 0f00 	teq	r2, #0
     51e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
     522:	bf02      	ittt	eq
     524:	0040      	lsleq	r0, r0, #1
     526:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
     52a:	3a01      	subeq	r2, #1
     52c:	d0f9      	beq.n	522 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x3a>
     52e:	ea40 000c 	orr.w	r0, r0, ip
     532:	f093 0f00 	teq	r3, #0
     536:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
     53a:	bf02      	ittt	eq
     53c:	0049      	lsleq	r1, r1, #1
     53e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
     542:	3b01      	subeq	r3, #1
     544:	d0f9      	beq.n	53a <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x52>
     546:	ea41 010c 	orr.w	r1, r1, ip
     54a:	e795      	b.n	478 <__aeabi_fdiv+0x18>
     54c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
     550:	ea92 0f0c 	teq	r2, ip
     554:	d108      	bne.n	568 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x80>
     556:	0242      	lsls	r2, r0, #9
     558:	f47f af7d 	bne.w	456 <CONFIG_MAIN_STACK_SIZE+0x56>
     55c:	ea93 0f0c 	teq	r3, ip
     560:	f47f af70 	bne.w	444 <CONFIG_MAIN_STACK_SIZE+0x44>
     564:	4608      	mov	r0, r1
     566:	e776      	b.n	456 <CONFIG_MAIN_STACK_SIZE+0x56>
     568:	ea93 0f0c 	teq	r3, ip
     56c:	d104      	bne.n	578 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x90>
     56e:	024b      	lsls	r3, r1, #9
     570:	f43f af4c 	beq.w	40c <CONFIG_MAIN_STACK_SIZE+0xc>
     574:	4608      	mov	r0, r1
     576:	e76e      	b.n	456 <CONFIG_MAIN_STACK_SIZE+0x56>
     578:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
     57c:	bf18      	it	ne
     57e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
     582:	d1ca      	bne.n	51a <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x32>
     584:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
     588:	f47f af5c 	bne.w	444 <CONFIG_MAIN_STACK_SIZE+0x44>
     58c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
     590:	f47f af3c 	bne.w	40c <CONFIG_MAIN_STACK_SIZE+0xc>
     594:	e75f      	b.n	456 <CONFIG_MAIN_STACK_SIZE+0x56>
     596:	bf00      	nop

00000598 <__gesf2>:
     598:	f04f 3cff 	mov.w	ip, #4294967295
     59c:	e006      	b.n	5ac <__cmpsf2+0x4>
     59e:	bf00      	nop

000005a0 <__lesf2>:
     5a0:	f04f 0c01 	mov.w	ip, #1
     5a4:	e002      	b.n	5ac <__cmpsf2+0x4>
     5a6:	bf00      	nop

000005a8 <__cmpsf2>:
     5a8:	f04f 0c01 	mov.w	ip, #1
     5ac:	f84d cd04 	str.w	ip, [sp, #-4]!
     5b0:	ea4f 0240 	mov.w	r2, r0, lsl #1
     5b4:	ea4f 0341 	mov.w	r3, r1, lsl #1
     5b8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
     5bc:	bf18      	it	ne
     5be:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
     5c2:	d011      	beq.n	5e8 <__cmpsf2+0x40>
     5c4:	b001      	add	sp, #4
     5c6:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
     5ca:	bf18      	it	ne
     5cc:	ea90 0f01 	teqne	r0, r1
     5d0:	bf58      	it	pl
     5d2:	ebb2 0003 	subspl.w	r0, r2, r3
     5d6:	bf88      	it	hi
     5d8:	17c8      	asrhi	r0, r1, #31
     5da:	bf38      	it	cc
     5dc:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
     5e0:	bf18      	it	ne
     5e2:	f040 0001 	orrne.w	r0, r0, #1
     5e6:	4770      	bx	lr
     5e8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
     5ec:	d102      	bne.n	5f4 <__cmpsf2+0x4c>
     5ee:	ea5f 2c40 	movs.w	ip, r0, lsl #9
     5f2:	d105      	bne.n	600 <__cmpsf2+0x58>
     5f4:	ea7f 6c23 	mvns.w	ip, r3, asr #24
     5f8:	d1e4      	bne.n	5c4 <__cmpsf2+0x1c>
     5fa:	ea5f 2c41 	movs.w	ip, r1, lsl #9
     5fe:	d0e1      	beq.n	5c4 <__cmpsf2+0x1c>
     600:	f85d 0b04 	ldr.w	r0, [sp], #4
     604:	4770      	bx	lr
     606:	bf00      	nop

00000608 <__aeabi_cfrcmple>:
     608:	4684      	mov	ip, r0
     60a:	4608      	mov	r0, r1
     60c:	4661      	mov	r1, ip
     60e:	e7ff      	b.n	610 <__aeabi_cfcmpeq>

00000610 <__aeabi_cfcmpeq>:
     610:	b50f      	push	{r0, r1, r2, r3, lr}
     612:	f7ff ffc9 	bl	5a8 <__cmpsf2>
     616:	2800      	cmp	r0, #0
     618:	bf48      	it	mi
     61a:	f110 0f00 	cmnmi.w	r0, #0
     61e:	bd0f      	pop	{r0, r1, r2, r3, pc}

00000620 <__aeabi_fcmpeq>:
     620:	f84d ed08 	str.w	lr, [sp, #-8]!
     624:	f7ff fff4 	bl	610 <__aeabi_cfcmpeq>
     628:	bf0c      	ite	eq
     62a:	2001      	moveq	r0, #1
     62c:	2000      	movne	r0, #0
     62e:	f85d fb08 	ldr.w	pc, [sp], #8
     632:	bf00      	nop

00000634 <__aeabi_fcmplt>:
     634:	f84d ed08 	str.w	lr, [sp, #-8]!
     638:	f7ff ffea 	bl	610 <__aeabi_cfcmpeq>
     63c:	bf34      	ite	cc
     63e:	2001      	movcc	r0, #1
     640:	2000      	movcs	r0, #0
     642:	f85d fb08 	ldr.w	pc, [sp], #8
     646:	bf00      	nop

00000648 <__aeabi_fcmple>:
     648:	f84d ed08 	str.w	lr, [sp, #-8]!
     64c:	f7ff ffe0 	bl	610 <__aeabi_cfcmpeq>
     650:	bf94      	ite	ls
     652:	2001      	movls	r0, #1
     654:	2000      	movhi	r0, #0
     656:	f85d fb08 	ldr.w	pc, [sp], #8
     65a:	bf00      	nop

0000065c <__aeabi_fcmpge>:
     65c:	f84d ed08 	str.w	lr, [sp, #-8]!
     660:	f7ff ffd2 	bl	608 <__aeabi_cfrcmple>
     664:	bf94      	ite	ls
     666:	2001      	movls	r0, #1
     668:	2000      	movhi	r0, #0
     66a:	f85d fb08 	ldr.w	pc, [sp], #8
     66e:	bf00      	nop

00000670 <__aeabi_fcmpgt>:
     670:	f84d ed08 	str.w	lr, [sp, #-8]!
     674:	f7ff ffc8 	bl	608 <__aeabi_cfrcmple>
     678:	bf34      	ite	cc
     67a:	2001      	movcc	r0, #1
     67c:	2000      	movcs	r0, #0
     67e:	f85d fb08 	ldr.w	pc, [sp], #8
     682:	bf00      	nop

00000684 <__aeabi_f2iz>:
     684:	ea4f 0240 	mov.w	r2, r0, lsl #1
     688:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
     68c:	d30f      	bcc.n	6ae <__aeabi_f2iz+0x2a>
     68e:	f04f 039e 	mov.w	r3, #158	; 0x9e
     692:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
     696:	d90d      	bls.n	6b4 <__aeabi_f2iz+0x30>
     698:	ea4f 2300 	mov.w	r3, r0, lsl #8
     69c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
     6a0:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
     6a4:	fa23 f002 	lsr.w	r0, r3, r2
     6a8:	bf18      	it	ne
     6aa:	4240      	negne	r0, r0
     6ac:	4770      	bx	lr
     6ae:	f04f 0000 	mov.w	r0, #0
     6b2:	4770      	bx	lr
     6b4:	f112 0f61 	cmn.w	r2, #97	; 0x61
     6b8:	d101      	bne.n	6be <__aeabi_f2iz+0x3a>
     6ba:	0242      	lsls	r2, r0, #9
     6bc:	d105      	bne.n	6ca <__aeabi_f2iz+0x46>
     6be:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
     6c2:	bf08      	it	eq
     6c4:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
     6c8:	4770      	bx	lr
     6ca:	f04f 0000 	mov.w	r0, #0
     6ce:	4770      	bx	lr

000006d0 <__aeabi_uldivmod>:
     6d0:	b953      	cbnz	r3, 6e8 <__aeabi_uldivmod+0x18>
     6d2:	b94a      	cbnz	r2, 6e8 <__aeabi_uldivmod+0x18>
     6d4:	2900      	cmp	r1, #0
     6d6:	bf08      	it	eq
     6d8:	2800      	cmpeq	r0, #0
     6da:	bf1c      	itt	ne
     6dc:	f04f 31ff 	movne.w	r1, #4294967295
     6e0:	f04f 30ff 	movne.w	r0, #4294967295
     6e4:	f000 b80c 	b.w	700 <__aeabi_idiv0>
     6e8:	f1ad 0c08 	sub.w	ip, sp, #8
     6ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     6f0:	f000 f808 	bl	704 <__udivmoddi4>
     6f4:	f8dd e004 	ldr.w	lr, [sp, #4]
     6f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     6fc:	b004      	add	sp, #16
     6fe:	4770      	bx	lr

00000700 <__aeabi_idiv0>:
     700:	4770      	bx	lr
     702:	bf00      	nop

00000704 <__udivmoddi4>:
     704:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     708:	4607      	mov	r7, r0
     70a:	468c      	mov	ip, r1
     70c:	4608      	mov	r0, r1
     70e:	9e09      	ldr	r6, [sp, #36]	; 0x24
     710:	4615      	mov	r5, r2
     712:	463c      	mov	r4, r7
     714:	4619      	mov	r1, r3
     716:	2b00      	cmp	r3, #0
     718:	f040 80c6 	bne.w	8a8 <CONFIG_ISR_STACK_SIZE+0xa8>
     71c:	4282      	cmp	r2, r0
     71e:	fab2 f782 	clz	r7, r2
     722:	d946      	bls.n	7b2 <__udivmoddi4+0xae>
     724:	b14f      	cbz	r7, 73a <__udivmoddi4+0x36>
     726:	f1c7 0e20 	rsb	lr, r7, #32
     72a:	fa24 fe0e 	lsr.w	lr, r4, lr
     72e:	fa00 f307 	lsl.w	r3, r0, r7
     732:	40bd      	lsls	r5, r7
     734:	ea4e 0c03 	orr.w	ip, lr, r3
     738:	40bc      	lsls	r4, r7
     73a:	ea4f 4815 	mov.w	r8, r5, lsr #16
     73e:	fa1f fe85 	uxth.w	lr, r5
     742:	fbbc f9f8 	udiv	r9, ip, r8
     746:	0c22      	lsrs	r2, r4, #16
     748:	fb08 c319 	mls	r3, r8, r9, ip
     74c:	fb09 fa0e 	mul.w	sl, r9, lr
     750:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
     754:	459a      	cmp	sl, r3
     756:	d928      	bls.n	7aa <__udivmoddi4+0xa6>
     758:	18eb      	adds	r3, r5, r3
     75a:	f109 30ff 	add.w	r0, r9, #4294967295
     75e:	d204      	bcs.n	76a <__udivmoddi4+0x66>
     760:	459a      	cmp	sl, r3
     762:	d902      	bls.n	76a <__udivmoddi4+0x66>
     764:	f1a9 0002 	sub.w	r0, r9, #2
     768:	442b      	add	r3, r5
     76a:	eba3 030a 	sub.w	r3, r3, sl
     76e:	b2a4      	uxth	r4, r4
     770:	fbb3 f2f8 	udiv	r2, r3, r8
     774:	fb08 3312 	mls	r3, r8, r2, r3
     778:	fb02 fe0e 	mul.w	lr, r2, lr
     77c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     780:	45a6      	cmp	lr, r4
     782:	d914      	bls.n	7ae <__udivmoddi4+0xaa>
     784:	192c      	adds	r4, r5, r4
     786:	f102 33ff 	add.w	r3, r2, #4294967295
     78a:	d203      	bcs.n	794 <__udivmoddi4+0x90>
     78c:	45a6      	cmp	lr, r4
     78e:	d901      	bls.n	794 <__udivmoddi4+0x90>
     790:	1e93      	subs	r3, r2, #2
     792:	442c      	add	r4, r5
     794:	eba4 040e 	sub.w	r4, r4, lr
     798:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
     79c:	b11e      	cbz	r6, 7a6 <__udivmoddi4+0xa2>
     79e:	40fc      	lsrs	r4, r7
     7a0:	2300      	movs	r3, #0
     7a2:	6034      	str	r4, [r6, #0]
     7a4:	6073      	str	r3, [r6, #4]
     7a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     7aa:	4648      	mov	r0, r9
     7ac:	e7dd      	b.n	76a <__udivmoddi4+0x66>
     7ae:	4613      	mov	r3, r2
     7b0:	e7f0      	b.n	794 <__udivmoddi4+0x90>
     7b2:	b902      	cbnz	r2, 7b6 <__udivmoddi4+0xb2>
     7b4:	deff      	udf	#255	; 0xff
     7b6:	bb87      	cbnz	r7, 81a <CONFIG_ISR_STACK_SIZE+0x1a>
     7b8:	1a83      	subs	r3, r0, r2
     7ba:	2101      	movs	r1, #1
     7bc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     7c0:	b2aa      	uxth	r2, r5
     7c2:	fbb3 fcfe 	udiv	ip, r3, lr
     7c6:	0c20      	lsrs	r0, r4, #16
     7c8:	fb0e 331c 	mls	r3, lr, ip, r3
     7cc:	fb0c f802 	mul.w	r8, ip, r2
     7d0:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
     7d4:	4598      	cmp	r8, r3
     7d6:	d963      	bls.n	8a0 <CONFIG_ISR_STACK_SIZE+0xa0>
     7d8:	18eb      	adds	r3, r5, r3
     7da:	f10c 30ff 	add.w	r0, ip, #4294967295
     7de:	d204      	bcs.n	7ea <__udivmoddi4+0xe6>
     7e0:	4598      	cmp	r8, r3
     7e2:	d902      	bls.n	7ea <__udivmoddi4+0xe6>
     7e4:	f1ac 0002 	sub.w	r0, ip, #2
     7e8:	442b      	add	r3, r5
     7ea:	eba3 0308 	sub.w	r3, r3, r8
     7ee:	b2a4      	uxth	r4, r4
     7f0:	fbb3 fcfe 	udiv	ip, r3, lr
     7f4:	fb0e 331c 	mls	r3, lr, ip, r3
     7f8:	fb0c f202 	mul.w	r2, ip, r2
     7fc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     800:	42a2      	cmp	r2, r4
     802:	d94f      	bls.n	8a4 <CONFIG_ISR_STACK_SIZE+0xa4>
     804:	192c      	adds	r4, r5, r4
     806:	f10c 33ff 	add.w	r3, ip, #4294967295
     80a:	d204      	bcs.n	816 <CONFIG_ISR_STACK_SIZE+0x16>
     80c:	42a2      	cmp	r2, r4
     80e:	d902      	bls.n	816 <CONFIG_ISR_STACK_SIZE+0x16>
     810:	f1ac 0302 	sub.w	r3, ip, #2
     814:	442c      	add	r4, r5
     816:	1aa4      	subs	r4, r4, r2
     818:	e7be      	b.n	798 <__udivmoddi4+0x94>
     81a:	f1c7 0c20 	rsb	ip, r7, #32
     81e:	fa20 f80c 	lsr.w	r8, r0, ip
     822:	fa00 f307 	lsl.w	r3, r0, r7
     826:	fa24 fc0c 	lsr.w	ip, r4, ip
     82a:	40bd      	lsls	r5, r7
     82c:	ea4c 0203 	orr.w	r2, ip, r3
     830:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     834:	b2ab      	uxth	r3, r5
     836:	fbb8 fcfe 	udiv	ip, r8, lr
     83a:	0c11      	lsrs	r1, r2, #16
     83c:	fb0e 801c 	mls	r0, lr, ip, r8
     840:	fb0c f903 	mul.w	r9, ip, r3
     844:	ea41 4000 	orr.w	r0, r1, r0, lsl #16
     848:	4581      	cmp	r9, r0
     84a:	fa04 f407 	lsl.w	r4, r4, r7
     84e:	d923      	bls.n	898 <CONFIG_ISR_STACK_SIZE+0x98>
     850:	1828      	adds	r0, r5, r0
     852:	f10c 31ff 	add.w	r1, ip, #4294967295
     856:	d204      	bcs.n	862 <CONFIG_ISR_STACK_SIZE+0x62>
     858:	4581      	cmp	r9, r0
     85a:	d902      	bls.n	862 <CONFIG_ISR_STACK_SIZE+0x62>
     85c:	f1ac 0102 	sub.w	r1, ip, #2
     860:	4428      	add	r0, r5
     862:	eba0 0009 	sub.w	r0, r0, r9
     866:	b292      	uxth	r2, r2
     868:	fbb0 fcfe 	udiv	ip, r0, lr
     86c:	fb0e 001c 	mls	r0, lr, ip, r0
     870:	fb0c f803 	mul.w	r8, ip, r3
     874:	ea42 4300 	orr.w	r3, r2, r0, lsl #16
     878:	4598      	cmp	r8, r3
     87a:	d90f      	bls.n	89c <CONFIG_ISR_STACK_SIZE+0x9c>
     87c:	18eb      	adds	r3, r5, r3
     87e:	f10c 32ff 	add.w	r2, ip, #4294967295
     882:	d204      	bcs.n	88e <CONFIG_ISR_STACK_SIZE+0x8e>
     884:	4598      	cmp	r8, r3
     886:	d902      	bls.n	88e <CONFIG_ISR_STACK_SIZE+0x8e>
     888:	f1ac 0202 	sub.w	r2, ip, #2
     88c:	442b      	add	r3, r5
     88e:	eba3 0308 	sub.w	r3, r3, r8
     892:	ea42 4101 	orr.w	r1, r2, r1, lsl #16
     896:	e791      	b.n	7bc <__udivmoddi4+0xb8>
     898:	4661      	mov	r1, ip
     89a:	e7e2      	b.n	862 <CONFIG_ISR_STACK_SIZE+0x62>
     89c:	4662      	mov	r2, ip
     89e:	e7f6      	b.n	88e <CONFIG_ISR_STACK_SIZE+0x8e>
     8a0:	4660      	mov	r0, ip
     8a2:	e7a2      	b.n	7ea <__udivmoddi4+0xe6>
     8a4:	4663      	mov	r3, ip
     8a6:	e7b6      	b.n	816 <CONFIG_ISR_STACK_SIZE+0x16>
     8a8:	4283      	cmp	r3, r0
     8aa:	d905      	bls.n	8b8 <CONFIG_ISR_STACK_SIZE+0xb8>
     8ac:	b10e      	cbz	r6, 8b2 <CONFIG_ISR_STACK_SIZE+0xb2>
     8ae:	e9c6 7000 	strd	r7, r0, [r6]
     8b2:	2100      	movs	r1, #0
     8b4:	4608      	mov	r0, r1
     8b6:	e776      	b.n	7a6 <__udivmoddi4+0xa2>
     8b8:	fab3 f183 	clz	r1, r3
     8bc:	b981      	cbnz	r1, 8e0 <CONFIG_ISR_STACK_SIZE+0xe0>
     8be:	4283      	cmp	r3, r0
     8c0:	d301      	bcc.n	8c6 <CONFIG_ISR_STACK_SIZE+0xc6>
     8c2:	42ba      	cmp	r2, r7
     8c4:	d80a      	bhi.n	8dc <CONFIG_ISR_STACK_SIZE+0xdc>
     8c6:	1abc      	subs	r4, r7, r2
     8c8:	eb60 0303 	sbc.w	r3, r0, r3
     8cc:	2001      	movs	r0, #1
     8ce:	469c      	mov	ip, r3
     8d0:	2e00      	cmp	r6, #0
     8d2:	d068      	beq.n	9a6 <CONFIG_ISR_STACK_SIZE+0x1a6>
     8d4:	e9c6 4c00 	strd	r4, ip, [r6]
     8d8:	2100      	movs	r1, #0
     8da:	e764      	b.n	7a6 <__udivmoddi4+0xa2>
     8dc:	4608      	mov	r0, r1
     8de:	e7f7      	b.n	8d0 <CONFIG_ISR_STACK_SIZE+0xd0>
     8e0:	f1c1 0c20 	rsb	ip, r1, #32
     8e4:	408b      	lsls	r3, r1
     8e6:	fa22 f40c 	lsr.w	r4, r2, ip
     8ea:	431c      	orrs	r4, r3
     8ec:	fa02 f501 	lsl.w	r5, r2, r1
     8f0:	fa00 f301 	lsl.w	r3, r0, r1
     8f4:	fa27 f20c 	lsr.w	r2, r7, ip
     8f8:	fa20 fb0c 	lsr.w	fp, r0, ip
     8fc:	ea4f 4914 	mov.w	r9, r4, lsr #16
     900:	4313      	orrs	r3, r2
     902:	fbbb f8f9 	udiv	r8, fp, r9
     906:	fa1f fe84 	uxth.w	lr, r4
     90a:	fb09 bb18 	mls	fp, r9, r8, fp
     90e:	0c1a      	lsrs	r2, r3, #16
     910:	fb08 fa0e 	mul.w	sl, r8, lr
     914:	ea42 420b 	orr.w	r2, r2, fp, lsl #16
     918:	4592      	cmp	sl, r2
     91a:	fa07 f701 	lsl.w	r7, r7, r1
     91e:	d93e      	bls.n	99e <CONFIG_ISR_STACK_SIZE+0x19e>
     920:	18a2      	adds	r2, r4, r2
     922:	f108 30ff 	add.w	r0, r8, #4294967295
     926:	d204      	bcs.n	932 <CONFIG_ISR_STACK_SIZE+0x132>
     928:	4592      	cmp	sl, r2
     92a:	d902      	bls.n	932 <CONFIG_ISR_STACK_SIZE+0x132>
     92c:	f1a8 0002 	sub.w	r0, r8, #2
     930:	4422      	add	r2, r4
     932:	eba2 020a 	sub.w	r2, r2, sl
     936:	b29b      	uxth	r3, r3
     938:	fbb2 f8f9 	udiv	r8, r2, r9
     93c:	fb09 2218 	mls	r2, r9, r8, r2
     940:	fb08 fe0e 	mul.w	lr, r8, lr
     944:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
     948:	4596      	cmp	lr, r2
     94a:	d92a      	bls.n	9a2 <CONFIG_ISR_STACK_SIZE+0x1a2>
     94c:	18a2      	adds	r2, r4, r2
     94e:	f108 33ff 	add.w	r3, r8, #4294967295
     952:	d204      	bcs.n	95e <CONFIG_ISR_STACK_SIZE+0x15e>
     954:	4596      	cmp	lr, r2
     956:	d902      	bls.n	95e <CONFIG_ISR_STACK_SIZE+0x15e>
     958:	f1a8 0302 	sub.w	r3, r8, #2
     95c:	4422      	add	r2, r4
     95e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
     962:	fba0 9305 	umull	r9, r3, r0, r5
     966:	eba2 020e 	sub.w	r2, r2, lr
     96a:	429a      	cmp	r2, r3
     96c:	46ce      	mov	lr, r9
     96e:	4698      	mov	r8, r3
     970:	d302      	bcc.n	978 <CONFIG_ISR_STACK_SIZE+0x178>
     972:	d106      	bne.n	982 <CONFIG_ISR_STACK_SIZE+0x182>
     974:	454f      	cmp	r7, r9
     976:	d204      	bcs.n	982 <CONFIG_ISR_STACK_SIZE+0x182>
     978:	ebb9 0e05 	subs.w	lr, r9, r5
     97c:	eb63 0804 	sbc.w	r8, r3, r4
     980:	3801      	subs	r0, #1
     982:	b186      	cbz	r6, 9a6 <CONFIG_ISR_STACK_SIZE+0x1a6>
     984:	ebb7 030e 	subs.w	r3, r7, lr
     988:	eb62 0708 	sbc.w	r7, r2, r8
     98c:	fa07 fc0c 	lsl.w	ip, r7, ip
     990:	40cb      	lsrs	r3, r1
     992:	ea4c 0303 	orr.w	r3, ip, r3
     996:	40cf      	lsrs	r7, r1
     998:	e9c6 3700 	strd	r3, r7, [r6]
     99c:	e79c      	b.n	8d8 <CONFIG_ISR_STACK_SIZE+0xd8>
     99e:	4640      	mov	r0, r8
     9a0:	e7c7      	b.n	932 <CONFIG_ISR_STACK_SIZE+0x132>
     9a2:	4643      	mov	r3, r8
     9a4:	e7db      	b.n	95e <CONFIG_ISR_STACK_SIZE+0x15e>
     9a6:	4631      	mov	r1, r6
     9a8:	e6fd      	b.n	7a6 <__udivmoddi4+0xa2>
	...

000009ac <main>:
}// end function


////////////////////////////////////////////////////// main 
void main(void)
{
     9ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     9b0:	b093      	sub	sp, #76	; 0x4c
     9b2:	af00      	add	r7, sp, #0
 */
__syscall bool device_is_ready(const struct device *dev);

static inline bool z_impl_device_is_ready(const struct device *dev)
{
	return z_device_is_ready(dev);
     9b4:	4d61      	ldr	r5, [pc, #388]	; (b3c <main+0x190>)
     9b6:	4628      	mov	r0, r5
     9b8:	f004 f9db 	bl	4d72 <z_device_is_ready>
	
	int ret;

	if (!device_is_ready(led.port)) { return; }
     9bc:	2800      	cmp	r0, #0
     9be:	f000 80b8 	beq.w	b32 <main+0x186>
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->api;
	__unused const struct gpio_driver_config *const cfg =
		(const struct gpio_driver_config *)port->config;
	struct gpio_driver_data *data =
     9c2:	692a      	ldr	r2, [r5, #16]
	const struct gpio_driver_api *api =
     9c4:	68a9      	ldr	r1, [r5, #8]

	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
		 "Unsupported pin");

	if ((flags & GPIO_ACTIVE_LOW) != 0) {
		data->invert |= (gpio_port_pins_t)BIT(pin);
     9c6:	6813      	ldr	r3, [r2, #0]
     9c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
     9cc:	6013      	str	r3, [r2, #0]
	} else {
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
	}

	return api->pin_configure(port, pin, flags);
     9ce:	4628      	mov	r0, r5
     9d0:	680b      	ldr	r3, [r1, #0]
     9d2:	4a5b      	ldr	r2, [pc, #364]	; (b40 <main+0x194>)
     9d4:	2111      	movs	r1, #17
     9d6:	4798      	blx	r3

	ret = gpio_pin_configure_dt(&led, GPIO_OUTPUT_ACTIVE); if (ret < 0)  { return; }
     9d8:	2800      	cmp	r0, #0
     9da:	f2c0 80aa 	blt.w	b32 <main+0x186>

	// define one-dimensional array of samples (could be constructed from sensor measurements)
	// 12-value signal 
	float samples_vec[] = {657,638,637,665,632,637,615,609,603,600,596,611};
     9de:	4e59      	ldr	r6, [pc, #356]	; (b44 <main+0x198>)
     9e0:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
     9e2:	f107 0418 	add.w	r4, r7, #24
     9e6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
     9e8:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
     9ea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
     9ec:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
     9f0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	// float samples_vec[] = {721,674,632,640,603,607,855,768,728,787,723,671,757,706,637,665,632,637,615,609,639,600,596,611,542,554,565,506,489,73,17,14,14,20,18,24};
	// 48-value signal 
	// float samples_vec[] = {900,750,702,744,710,676,721,674,632,640,603,607,855,768,728,787,723,671,757,706,637,665,632,637,615,609,639,600,596,611,542,554,565,506,489,73,17,14,14,20,18,24,11,10,16,14,16,18};

	while (1) 
	{
     9f4:	f8c7 d00c 	str.w	sp, [r7, #12]
					       gpio_port_pins_t pins)
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->api;

	return api->port_toggle_bits(port, pins);
     9f8:	68ab      	ldr	r3, [r5, #8]
     9fa:	f44f 3100 	mov.w	r1, #131072	; 0x20000
     9fe:	695b      	ldr	r3, [r3, #20]
     a00:	4628      	mov	r0, r5
     a02:	4798      	blx	r3
		ret = gpio_pin_toggle_dt(&led);
		if (ret < 0) { return; }
     a04:	2800      	cmp	r0, #0
     a06:	f2c0 8094 	blt.w	b32 <main+0x186>
#ifndef _ASMLANGUAGE
extern uint32_t sys_clock_cycle_get_32(void);

static inline uint32_t arch_k_cycle_get_32(void)
{
	return sys_clock_cycle_get_32();
     a0a:	f004 f8a5 	bl	4b58 <sys_clock_cycle_get_32>
    	// uint32_t start_time = k_uptime_get();
		// start cycle count
    	uint32_t start_cycles = k_cycle_get_32();
		
		// step 1: calculate the sum of the Squared Deviations from the Array Mean (SDAM)
		float SDAM = get_sum_deviations(samples_vec, elementsCount);
     a0e:	f107 0818 	add.w	r8, r7, #24
     a12:	6078      	str	r0, [r7, #4]
     a14:	210c      	movs	r1, #12
     a16:	4640      	mov	r0, r8
     a18:	f003 fd9c 	bl	4554 <get_sum_deviations>

  		// step 2: for every possible combination, get the SDCM
  		float SDCM_all[score_len];
     a1c:	b08c      	sub	sp, #48	; 0x30
     a1e:	f8c7 d008 	str.w	sp, [r7, #8]
  		float GVF_all[score_len];    
     a22:	f04f 0a00 	mov.w	sl, #0
     a26:	b08c      	sub	sp, #48	; 0x30
		float SDAM = get_sum_deviations(samples_vec, elementsCount);
     a28:	4606      	mov	r6, r0
  		float GVF_all[score_len];    
     a2a:	46e9      	mov	r9, sp
  
  		for (int i=0; i<score_len; i++)
     a2c:	4654      	mov	r4, sl
  		{
    		// get sum of deviations for first possible array
    		int len1 = i+1;
     a2e:	3401      	adds	r4, #1
    		float array_1 [len1];
     a30:	00a2      	lsls	r2, r4, #2
     a32:	3207      	adds	r2, #7
     a34:	f022 0207 	bic.w	r2, r2, #7
  		{
     a38:	46eb      	mov	fp, sp
    		float array_1 [len1];
     a3a:	ebad 0d02 	sub.w	sp, sp, r2
     a3e:	4668      	mov	r0, sp
    
			for (int k=0; k<=i; k++)
     a40:	f107 0118 	add.w	r1, r7, #24
     a44:	1f02      	subs	r2, r0, #4
     a46:	eb00 0c0a 	add.w	ip, r0, sl
    		{
      			array_1[k] = samples_vec[k];
     a4a:	f851 eb04 	ldr.w	lr, [r1], #4
     a4e:	f842 ef04 	str.w	lr, [r2, #4]!
			for (int k=0; k<=i; k++)
     a52:	4594      	cmp	ip, r2
     a54:	d1f9      	bne.n	a4a <main+0x9e>
    		}// end for 
    
			float s1 = get_sum_deviations(array_1,len1);
     a56:	4621      	mov	r1, r4
     a58:	f003 fd7c 	bl	4554 <get_sum_deviations>
     a5c:	4602      	mov	r2, r0

    		// get sum of deviations for second possible array
    		int len2 = elementsCount - len1;
    		float array_2 [len2];
     a5e:	f1ca 0033 	rsb	r0, sl, #51	; 0x33
     a62:	f020 0007 	bic.w	r0, r0, #7
     a66:	ebad 0d00 	sub.w	sp, sp, r0
     a6a:	4668      	mov	r0, sp
     a6c:	f1c4 010c 	rsb	r1, r4, #12
    		int c = 0;
    
			for (int j=i+1; j<=score_len; j++)
     a70:	f1a0 0e04 	sub.w	lr, r0, #4
    		int len1 = i+1;
     a74:	46a4      	mov	ip, r4
    		{
      			array_2[c] = samples_vec[j];
     a76:	f858 302c 	ldr.w	r3, [r8, ip, lsl #2]
     a7a:	f84e 3f04 	str.w	r3, [lr, #4]!
			for (int j=i+1; j<=score_len; j++)
     a7e:	f10c 0c01 	add.w	ip, ip, #1
     a82:	f1bc 0f0c 	cmp.w	ip, #12
     a86:	d1f6      	bne.n	a76 <main+0xca>
     a88:	603a      	str	r2, [r7, #0]
      			c = c + 1;
    		}//end for 
    	
			float s2 = get_sum_deviations(array_2,len2);
     a8a:	f003 fd63 	bl	4554 <get_sum_deviations>
    		SDCM_all[i] = s1 + s2;
     a8e:	683a      	ldr	r2, [r7, #0]
			float s2 = get_sum_deviations(array_2,len2);
     a90:	4601      	mov	r1, r0
    		SDCM_all[i] = s1 + s2;
     a92:	4610      	mov	r0, r2
     a94:	f7ff fb28 	bl	e8 <__addsf3>
     a98:	68bb      	ldr	r3, [r7, #8]
     a9a:	4601      	mov	r1, r0
     a9c:	f843 000a 	str.w	r0, [r3, sl]
    		GVF_all[i] = ((SDAM - SDCM_all[i]) / SDAM);
     aa0:	4630      	mov	r0, r6
     aa2:	f7ff fb1f 	bl	e4 <__aeabi_fsub>
     aa6:	4631      	mov	r1, r6
     aa8:	f7ff fcda 	bl	460 <__aeabi_fdiv>
  		for (int i=0; i<score_len; i++)
     aac:	2c0b      	cmp	r4, #11
    		GVF_all[i] = ((SDAM - SDCM_all[i]) / SDAM);
     aae:	f849 000a 	str.w	r0, [r9, sl]
  		for (int i=0; i<score_len; i++)
     ab2:	f10a 0a04 	add.w	sl, sl, #4
     ab6:	46dd      	mov	sp, fp
     ab8:	d1b9      	bne.n	a2e <main+0x82>
  		}// end for 

  		// get the interface separating the two classes
  		float max_GF_value = 0;
     aba:	2300      	movs	r3, #0
     abc:	613b      	str	r3, [r7, #16]
  		int max_GF_index = 0; 
     abe:	2300      	movs	r3, #0
  		get_max(GVF_all, score_len, &max_GF_value, &max_GF_index);
     ac0:	f107 0210 	add.w	r2, r7, #16
     ac4:	4621      	mov	r1, r4
  		int max_GF_index = 0; 
     ac6:	617b      	str	r3, [r7, #20]
  		get_max(GVF_all, score_len, &max_GF_value, &max_GF_index);
     ac8:	4648      	mov	r0, r9
     aca:	f107 0314 	add.w	r3, r7, #20
     ace:	f003 fd0f 	bl	44f0 <get_max>
     ad2:	f004 f841 	bl	4b58 <sys_clock_cycle_get_32>
    	uint32_t cycles_per_sec = sys_clock_hw_cycles_per_sec();
    	uint32_t elapsed_time_us = (elapsed_cycles * 1000000) / cycles_per_sec;

		// print selected changepoint and its GVF value 
		// enable to print the overall results
		printk("Segmentation index: %d\n", max_GF_index);
     ad6:	6979      	ldr	r1, [r7, #20]
     ad8:	4604      	mov	r4, r0
     ada:	481b      	ldr	r0, [pc, #108]	; (b48 <main+0x19c>)
     adc:	f003 fd77 	bl	45ce <printk>
		int integer_part = (int)max_GF_value;
     ae0:	f8d7 8010 	ldr.w	r8, [r7, #16]
     ae4:	4640      	mov	r0, r8
     ae6:	f7ff fdcd 	bl	684 <__aeabi_f2iz>
     aea:	4606      	mov	r6, r0
    	int fractional_part = (int)((max_GF_value - integer_part) * 10000);
     aec:	f7ff fbb0 	bl	250 <__aeabi_i2f>
     af0:	4601      	mov	r1, r0
     af2:	4640      	mov	r0, r8
     af4:	f7ff faf6 	bl	e4 <__aeabi_fsub>
     af8:	4914      	ldr	r1, [pc, #80]	; (b4c <main+0x1a0>)
     afa:	f7ff fbfd 	bl	2f8 <__aeabi_fmul>
     afe:	f7ff fdc1 	bl	684 <__aeabi_f2iz>
		printk("Segmentation index GVF: %d.%04d\n", integer_part, fractional_part);
     b02:	4631      	mov	r1, r6
    	int fractional_part = (int)((max_GF_value - integer_part) * 10000);
     b04:	4602      	mov	r2, r0
		printk("Segmentation index GVF: %d.%04d\n", integer_part, fractional_part);
     b06:	4812      	ldr	r0, [pc, #72]	; (b50 <main+0x1a4>)
     b08:	f003 fd61 	bl	45ce <printk>
    	uint32_t elapsed_cycles = end_cycles - start_cycles;
     b0c:	687b      	ldr	r3, [r7, #4]
    	uint32_t elapsed_time_us = (elapsed_cycles * 1000000) / cycles_per_sec;
     b0e:	4911      	ldr	r1, [pc, #68]	; (b54 <main+0x1a8>)
		// print the algotiyhm time in milliseconds
    	printk("Selection algorithm time: %u us\n", elapsed_time_us);
     b10:	4811      	ldr	r0, [pc, #68]	; (b58 <main+0x1ac>)
    	uint32_t elapsed_cycles = end_cycles - start_cycles;
     b12:	1ae4      	subs	r4, r4, r3
    	uint32_t elapsed_time_us = (elapsed_cycles * 1000000) / cycles_per_sec;
     b14:	4361      	muls	r1, r4
    	printk("Selection algorithm time: %u us\n", elapsed_time_us);
     b16:	0bc9      	lsrs	r1, r1, #15
     b18:	f003 fd59 	bl	45ce <printk>
		printk("End \n\r");
     b1c:	480f      	ldr	r0, [pc, #60]	; (b5c <main+0x1b0>)
     b1e:	f003 fd56 	bl	45ce <printk>
		union { struct { uintptr_t lo, hi; } split; k_timeout_t val; } parm0 = { .val = timeout };
		return (int32_t) arch_syscall_invoke2(parm0.split.lo, parm0.split.hi, K_SYSCALL_K_SLEEP);
	}
#endif
	compiler_barrier();
	return z_impl_k_sleep(timeout);
     b22:	f44f 4000 	mov.w	r0, #32768	; 0x8000
     b26:	2100      	movs	r1, #0
     b28:	f003 fb02 	bl	4130 <z_impl_k_sleep>
     b2c:	f8d7 d00c 	ldr.w	sp, [r7, #12]
	{
     b30:	e760      	b.n	9f4 <main+0x48>
		// delay 1 second 
		k_msleep(SLEEP_TIME_MS);

	}//end while
  
}//end main 
     b32:	374c      	adds	r7, #76	; 0x4c
     b34:	46bd      	mov	sp, r7
     b36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     b3a:	bf00      	nop
     b3c:	0000500c 	.word	0x0000500c
     b40:	00060001 	.word	0x00060001
     b44:	00005190 	.word	0x00005190
     b48:	000052c0 	.word	0x000052c0
     b4c:	461c4000 	.word	0x461c4000
     b50:	000052d8 	.word	0x000052d8
     b54:	000f4240 	.word	0x000f4240
     b58:	000052f9 	.word	0x000052f9
     b5c:	0000531a 	.word	0x0000531a

00000b60 <char_out>:
}

static int char_out(int c, void *ctx_p)
{
	(void) ctx_p;
	return _char_out(c);
     b60:	4b01      	ldr	r3, [pc, #4]	; (b68 <char_out+0x8>)
     b62:	681b      	ldr	r3, [r3, #0]
     b64:	4718      	bx	r3
     b66:	bf00      	nop
     b68:	20000000 	.word	0x20000000

00000b6c <__printk_hook_install>:
	_char_out = fn;
     b6c:	4b01      	ldr	r3, [pc, #4]	; (b74 <__printk_hook_install+0x8>)
     b6e:	6018      	str	r0, [r3, #0]
}
     b70:	4770      	bx	lr
     b72:	bf00      	nop
     b74:	20000000 	.word	0x20000000

00000b78 <vprintk>:
}

void vprintk(const char *fmt, va_list ap)
{
     b78:	b507      	push	{r0, r1, r2, lr}
     b7a:	460b      	mov	r3, r1
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap);
#else
static inline
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap)
{
	return z_cbvprintf_impl(out, ctx, format, ap, 0);
     b7c:	2100      	movs	r1, #0
     b7e:	4602      	mov	r2, r0
     b80:	9100      	str	r1, [sp, #0]
     b82:	4803      	ldr	r0, [pc, #12]	; (b90 <vprintk+0x18>)
     b84:	f000 f8e6 	bl	d54 <z_cbvprintf_impl>

#ifdef CONFIG_PRINTK_SYNC
		k_spin_unlock(&lock, key);
#endif
	}
}
     b88:	b003      	add	sp, #12
     b8a:	f85d fb04 	ldr.w	pc, [sp], #4
     b8e:	bf00      	nop
     b90:	00000b61 	.word	0x00000b61

00000b94 <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
     b94:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
     b98:	f8b0 9018 	ldrh.w	r9, [r0, #24]
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
     b9c:	f019 0808 	ands.w	r8, r9, #8
{
     ba0:	4604      	mov	r4, r0
     ba2:	4693      	mov	fp, r2
	if (processing) {
     ba4:	d00d      	beq.n	bc2 <process_event+0x2e>
		if (evt == EVT_COMPLETE) {
     ba6:	2901      	cmp	r1, #1
			mgr->flags |= ONOFF_FLAG_COMPLETE;
     ba8:	bf0c      	ite	eq
     baa:	f049 0910 	orreq.w	r9, r9, #16
		} else {
			__ASSERT_NO_MSG(evt == EVT_RECHECK);

			mgr->flags |= ONOFF_FLAG_RECHECK;
     bae:	f049 0920 	orrne.w	r9, r9, #32
     bb2:	f8a0 9018 	strh.w	r9, [r0, #24]
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
     bb6:	f38b 8811 	msr	BASEPRI, fp
     bba:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
     bbe:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
     bc2:	f009 0907 	and.w	r9, r9, #7
		if (evt == EVT_RECHECK) {
     bc6:	2902      	cmp	r1, #2
     bc8:	d107      	bne.n	bda <process_event+0x46>
			evt = process_recheck(mgr);
     bca:	4620      	mov	r0, r4
     bcc:	f003 fd0c 	bl	45e8 <process_recheck>
		if (evt == EVT_NOP) {
     bd0:	2800      	cmp	r0, #0
     bd2:	d0f0      	beq.n	bb6 <process_event+0x22>
		if (evt == EVT_COMPLETE) {
     bd4:	2801      	cmp	r0, #1
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     bd6:	8b23      	ldrh	r3, [r4, #24]
		if (evt == EVT_COMPLETE) {
     bd8:	d14e      	bne.n	c78 <process_event+0xe4>
			res = mgr->last_res;
     bda:	6967      	ldr	r7, [r4, #20]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
     bdc:	8b21      	ldrh	r1, [r4, #24]
	if (res < 0) {
     bde:	2f00      	cmp	r7, #0
     be0:	da15      	bge.n	c0e <process_event+0x7a>
		*clients = mgr->clients;
     be2:	6825      	ldr	r5, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     be4:	f021 0107 	bic.w	r1, r1, #7
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
	list->tail = NULL;
     be8:	e9c4 8800 	strd	r8, r8, [r4]
     bec:	f041 0101 	orr.w	r1, r1, #1
	mgr->flags = (state & ONOFF_STATE_MASK)
     bf0:	8321      	strh	r1, [r4, #24]
		onoff_transition_fn transit = NULL;
     bf2:	2600      	movs	r6, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
     bf4:	8b21      	ldrh	r1, [r4, #24]
     bf6:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
     bfa:	45ca      	cmp	sl, r9
     bfc:	d002      	beq.n	c04 <process_event+0x70>
		if (do_monitors
     bfe:	68a3      	ldr	r3, [r4, #8]
     c00:	2b00      	cmp	r3, #0
     c02:	d15a      	bne.n	cba <process_event+0x126>
		    || !sys_slist_is_empty(&clients)
     c04:	b90d      	cbnz	r5, c0a <process_event+0x76>
		    || (transit != NULL)) {
     c06:	2e00      	cmp	r6, #0
     c08:	d071      	beq.n	cee <process_event+0x15a>
     c0a:	2300      	movs	r3, #0
     c0c:	e056      	b.n	cbc <process_event+0x128>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
     c0e:	f001 0307 	and.w	r3, r1, #7
		   || (state == ONOFF_STATE_RESETTING)) {
     c12:	1f5a      	subs	r2, r3, #5
	} else if ((state == ONOFF_STATE_TO_ON)
     c14:	2a01      	cmp	r2, #1
     c16:	d81e      	bhi.n	c56 <process_event+0xc2>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     c18:	f021 0107 	bic.w	r1, r1, #7
		if (state == ONOFF_STATE_TO_ON) {
     c1c:	2b06      	cmp	r3, #6
		*clients = mgr->clients;
     c1e:	6825      	ldr	r5, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     c20:	b289      	uxth	r1, r1
     c22:	e9c4 8800 	strd	r8, r8, [r4]
		if (state == ONOFF_STATE_TO_ON) {
     c26:	d10a      	bne.n	c3e <process_event+0xaa>
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
     c28:	b13d      	cbz	r5, c3a <process_event+0xa6>
     c2a:	8b63      	ldrh	r3, [r4, #26]
     c2c:	462a      	mov	r2, r5

#define SYS_SLIST_STATIC_INIT(ptr_to_list) {NULL, NULL}

static inline sys_snode_t *z_snode_next_peek(sys_snode_t *node)
{
	return node->next;
     c2e:	6812      	ldr	r2, [r2, #0]
				mgr->refs += 1U;
     c30:	3301      	adds	r3, #1
     c32:	b29b      	uxth	r3, r3
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
     c34:	2a00      	cmp	r2, #0
     c36:	d1fa      	bne.n	c2e <process_event+0x9a>
     c38:	8363      	strh	r3, [r4, #26]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     c3a:	f041 0102 	orr.w	r1, r1, #2
	mgr->flags = (state & ONOFF_STATE_MASK)
     c3e:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
     c40:	4620      	mov	r0, r4
     c42:	f003 fcd1 	bl	45e8 <process_recheck>
     c46:	4606      	mov	r6, r0
     c48:	2800      	cmp	r0, #0
     c4a:	d0d3      	beq.n	bf4 <process_event+0x60>
			mgr->flags |= ONOFF_FLAG_RECHECK;
     c4c:	8b23      	ldrh	r3, [r4, #24]
     c4e:	f043 0320 	orr.w	r3, r3, #32
     c52:	8323      	strh	r3, [r4, #24]
     c54:	e7cd      	b.n	bf2 <process_event+0x5e>
	} else if (state == ONOFF_STATE_TO_OFF) {
     c56:	2b04      	cmp	r3, #4
     c58:	d10c      	bne.n	c74 <process_event+0xe0>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     c5a:	f021 0107 	bic.w	r1, r1, #7
     c5e:	b289      	uxth	r1, r1
	mgr->flags = (state & ONOFF_STATE_MASK)
     c60:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
     c62:	4620      	mov	r0, r4
     c64:	f003 fcc0 	bl	45e8 <process_recheck>
     c68:	4605      	mov	r5, r0
     c6a:	2800      	cmp	r0, #0
     c6c:	d0c1      	beq.n	bf2 <process_event+0x5e>
			mgr->flags |= ONOFF_FLAG_RECHECK;
     c6e:	f041 0120 	orr.w	r1, r1, #32
     c72:	8321      	strh	r1, [r4, #24]
     c74:	2500      	movs	r5, #0
     c76:	e7bc      	b.n	bf2 <process_event+0x5e>
		} else if (evt == EVT_START) {
     c78:	2803      	cmp	r0, #3
     c7a:	d109      	bne.n	c90 <process_event+0xfc>
			transit = mgr->transitions->start;
     c7c:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     c7e:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->start;
     c82:	6816      	ldr	r6, [r2, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     c84:	f043 0306 	orr.w	r3, r3, #6
	mgr->flags = (state & ONOFF_STATE_MASK)
     c88:	8323      	strh	r3, [r4, #24]
}
     c8a:	2500      	movs	r5, #0
		res = 0;
     c8c:	462f      	mov	r7, r5
     c8e:	e7b1      	b.n	bf4 <process_event+0x60>
		} else if (evt == EVT_STOP) {
     c90:	2804      	cmp	r0, #4
     c92:	d106      	bne.n	ca2 <process_event+0x10e>
			transit = mgr->transitions->stop;
     c94:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     c96:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->stop;
     c9a:	6856      	ldr	r6, [r2, #4]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     c9c:	f043 0304 	orr.w	r3, r3, #4
     ca0:	e7f2      	b.n	c88 <process_event+0xf4>
		} else if (evt == EVT_RESET) {
     ca2:	2805      	cmp	r0, #5
     ca4:	d106      	bne.n	cb4 <process_event+0x120>
			transit = mgr->transitions->reset;
     ca6:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     ca8:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->reset;
     cac:	6896      	ldr	r6, [r2, #8]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     cae:	f043 0305 	orr.w	r3, r3, #5
     cb2:	e7e9      	b.n	c88 <process_event+0xf4>
     cb4:	2500      	movs	r5, #0
		onoff_transition_fn transit = NULL;
     cb6:	462e      	mov	r6, r5
     cb8:	e7e8      	b.n	c8c <process_event+0xf8>
				   && !sys_slist_is_empty(&mgr->monitors);
     cba:	2301      	movs	r3, #1
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
     cbc:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
     cc0:	8321      	strh	r1, [r4, #24]
     cc2:	f38b 8811 	msr	BASEPRI, fp
     cc6:	f3bf 8f6f 	isb	sy
			if (do_monitors) {
     cca:	b9fb      	cbnz	r3, d0c <process_event+0x178>
	while (!sys_slist_is_empty(list)) {
     ccc:	bb85      	cbnz	r5, d30 <process_event+0x19c>
			if (transit != NULL) {
     cce:	b116      	cbz	r6, cd6 <process_event+0x142>
				transit(mgr, transition_complete);
     cd0:	491f      	ldr	r1, [pc, #124]	; (d50 <process_event+0x1bc>)
     cd2:	4620      	mov	r0, r4
     cd4:	47b0      	blx	r6
	__asm__ volatile(
     cd6:	f04f 0320 	mov.w	r3, #32
     cda:	f3ef 8b11 	mrs	fp, BASEPRI
     cde:	f383 8812 	msr	BASEPRI_MAX, r3
     ce2:	f3bf 8f6f 	isb	sy
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
     ce6:	8b23      	ldrh	r3, [r4, #24]
     ce8:	f023 0308 	bic.w	r3, r3, #8
     cec:	8323      	strh	r3, [r4, #24]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
     cee:	8b23      	ldrh	r3, [r4, #24]
     cf0:	06da      	lsls	r2, r3, #27
     cf2:	d525      	bpl.n	d40 <process_event+0x1ac>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
     cf4:	f023 0310 	bic.w	r3, r3, #16
     cf8:	8323      	strh	r3, [r4, #24]
			evt = EVT_COMPLETE;
     cfa:	2101      	movs	r1, #1
		state = mgr->flags & ONOFF_STATE_MASK;
     cfc:	f8b4 9018 	ldrh.w	r9, [r4, #24]
     d00:	f009 0907 	and.w	r9, r9, #7
	} while (evt != EVT_NOP);
     d04:	2900      	cmp	r1, #0
     d06:	f47f af5e 	bne.w	bc6 <process_event+0x32>
out:
     d0a:	e754      	b.n	bb6 <process_event+0x22>
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
     d0c:	68a1      	ldr	r1, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
     d0e:	2900      	cmp	r1, #0
     d10:	d0dc      	beq.n	ccc <process_event+0x138>
	return node->next;
     d12:	f8d1 9000 	ldr.w	r9, [r1]
		mon->callback(mgr, mon, state, res);
     d16:	f8d1 b004 	ldr.w	fp, [r1, #4]
     d1a:	463b      	mov	r3, r7
     d1c:	4652      	mov	r2, sl
     d1e:	4620      	mov	r0, r4
     d20:	47d8      	blx	fp
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
     d22:	f1b9 0f00 	cmp.w	r9, #0
     d26:	d0d1      	beq.n	ccc <process_event+0x138>
     d28:	4649      	mov	r1, r9
     d2a:	f8d9 9000 	ldr.w	r9, [r9]
     d2e:	e7f2      	b.n	d16 <process_event+0x182>
     d30:	4629      	mov	r1, r5
		notify_one(mgr, cli, state, res);
     d32:	463b      	mov	r3, r7
     d34:	4652      	mov	r2, sl
     d36:	4620      	mov	r0, r4
     d38:	682d      	ldr	r5, [r5, #0]
     d3a:	f003 fc71 	bl	4620 <notify_one>
     d3e:	e7c5      	b.n	ccc <process_event+0x138>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
     d40:	f013 0120 	ands.w	r1, r3, #32
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
     d44:	bf1e      	ittt	ne
     d46:	f023 0320 	bicne.w	r3, r3, #32
     d4a:	8323      	strhne	r3, [r4, #24]
			evt = EVT_RECHECK;
     d4c:	2102      	movne	r1, #2
     d4e:	e7d5      	b.n	cfc <process_event+0x168>
     d50:	0000464d 	.word	0x0000464d

00000d54 <z_cbvprintf_impl>:
	return (int)count;
}

int z_cbvprintf_impl(cbprintf_cb out, void *ctx, const char *fp,
		     va_list ap, uint32_t flags)
{
     d54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     d58:	b091      	sub	sp, #68	; 0x44
     d5a:	468b      	mov	fp, r1
     d5c:	9002      	str	r0, [sp, #8]
     d5e:	4692      	mov	sl, r2
     d60:	461c      	mov	r4, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
     d62:	2500      	movs	r5, #0
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
     d64:	f89a 0000 	ldrb.w	r0, [sl]
     d68:	b908      	cbnz	r0, d6e <z_cbvprintf_impl+0x1a>
			OUTC(' ');
			--width;
		}
	}

	return count;
     d6a:	4628      	mov	r0, r5
     d6c:	e363      	b.n	1436 <CONFIG_FPROTECT_BLOCK_SIZE+0x436>
		if (*fp != '%') {
     d6e:	2825      	cmp	r0, #37	; 0x25
			OUTC(*fp++);
     d70:	f10a 0701 	add.w	r7, sl, #1
		if (*fp != '%') {
     d74:	d007      	beq.n	d86 <z_cbvprintf_impl+0x32>
			OUTC('%');
     d76:	9b02      	ldr	r3, [sp, #8]
     d78:	4659      	mov	r1, fp
     d7a:	4798      	blx	r3
     d7c:	2800      	cmp	r0, #0
     d7e:	f2c0 835a 	blt.w	1436 <CONFIG_FPROTECT_BLOCK_SIZE+0x436>
     d82:	3501      	adds	r5, #1
			break;
     d84:	e212      	b.n	11ac <CONFIG_FPROTECT_BLOCK_SIZE+0x1ac>
		} state = {
     d86:	2218      	movs	r2, #24
     d88:	2100      	movs	r1, #0
     d8a:	a80a      	add	r0, sp, #40	; 0x28
     d8c:	f003 fd74 	bl	4878 <memset>
	if (*sp == '%') {
     d90:	f89a 3001 	ldrb.w	r3, [sl, #1]
     d94:	2b25      	cmp	r3, #37	; 0x25
     d96:	d078      	beq.n	e8a <z_cbvprintf_impl+0x136>
     d98:	2200      	movs	r2, #0
     d9a:	4610      	mov	r0, r2
     d9c:	4696      	mov	lr, r2
     d9e:	4694      	mov	ip, r2
     da0:	4616      	mov	r6, r2
     da2:	4639      	mov	r1, r7
		switch (*sp) {
     da4:	f817 3b01 	ldrb.w	r3, [r7], #1
     da8:	2b2b      	cmp	r3, #43	; 0x2b
     daa:	f000 809d 	beq.w	ee8 <z_cbvprintf_impl+0x194>
     dae:	f200 8094 	bhi.w	eda <z_cbvprintf_impl+0x186>
     db2:	2b20      	cmp	r3, #32
     db4:	f000 809b 	beq.w	eee <z_cbvprintf_impl+0x19a>
     db8:	2b23      	cmp	r3, #35	; 0x23
     dba:	f000 809b 	beq.w	ef4 <z_cbvprintf_impl+0x1a0>
     dbe:	b12e      	cbz	r6, dcc <z_cbvprintf_impl+0x78>
     dc0:	f89d 6030 	ldrb.w	r6, [sp, #48]	; 0x30
     dc4:	f046 0604 	orr.w	r6, r6, #4
     dc8:	f88d 6030 	strb.w	r6, [sp, #48]	; 0x30
     dcc:	f1bc 0f00 	cmp.w	ip, #0
     dd0:	d005      	beq.n	dde <z_cbvprintf_impl+0x8a>
     dd2:	f89d 6030 	ldrb.w	r6, [sp, #48]	; 0x30
     dd6:	f046 0608 	orr.w	r6, r6, #8
     dda:	f88d 6030 	strb.w	r6, [sp, #48]	; 0x30
     dde:	f1be 0f00 	cmp.w	lr, #0
     de2:	d005      	beq.n	df0 <z_cbvprintf_impl+0x9c>
     de4:	f89d 6030 	ldrb.w	r6, [sp, #48]	; 0x30
     de8:	f046 0610 	orr.w	r6, r6, #16
     dec:	f88d 6030 	strb.w	r6, [sp, #48]	; 0x30
     df0:	b128      	cbz	r0, dfe <z_cbvprintf_impl+0xaa>
     df2:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
     df6:	f040 0020 	orr.w	r0, r0, #32
     dfa:	f88d 0030 	strb.w	r0, [sp, #48]	; 0x30
     dfe:	b12a      	cbz	r2, e0c <z_cbvprintf_impl+0xb8>
     e00:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
     e04:	f042 0240 	orr.w	r2, r2, #64	; 0x40
     e08:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	if (conv->flag_zero && conv->flag_dash) {
     e0c:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
     e10:	f002 0044 	and.w	r0, r2, #68	; 0x44
     e14:	2844      	cmp	r0, #68	; 0x44
     e16:	d103      	bne.n	e20 <z_cbvprintf_impl+0xcc>
		conv->flag_zero = false;
     e18:	f36f 1286 	bfc	r2, #6, #1
     e1c:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	conv->width_present = true;
     e20:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
	if (*sp == '*') {
     e24:	2b2a      	cmp	r3, #42	; 0x2a
	conv->width_present = true;
     e26:	f042 0280 	orr.w	r2, r2, #128	; 0x80
     e2a:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	if (*sp == '*') {
     e2e:	d17b      	bne.n	f28 <z_cbvprintf_impl+0x1d4>
		conv->width_star = true;
     e30:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
     e34:	f042 0201 	orr.w	r2, r2, #1
			++sp;
     e38:	1c4b      	adds	r3, r1, #1
		conv->width_star = true;
     e3a:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
	conv->prec_present = (*sp == '.');
     e3e:	781a      	ldrb	r2, [r3, #0]
     e40:	2a2e      	cmp	r2, #46	; 0x2e
     e42:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
     e46:	bf0c      	ite	eq
     e48:	2101      	moveq	r1, #1
     e4a:	2100      	movne	r1, #0
     e4c:	f361 0241 	bfi	r2, r1, #1, #1
     e50:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
	if (!conv->prec_present) {
     e54:	d174      	bne.n	f40 <z_cbvprintf_impl+0x1ec>
	if (*sp == '*') {
     e56:	785a      	ldrb	r2, [r3, #1]
     e58:	2a2a      	cmp	r2, #42	; 0x2a
     e5a:	d06a      	beq.n	f32 <z_cbvprintf_impl+0x1de>
	++sp;
     e5c:	3301      	adds	r3, #1
	size_t val = 0;
     e5e:	2100      	movs	r1, #0
		val = 10U * val + *sp++ - '0';
     e60:	260a      	movs	r6, #10
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
     e62:	4618      	mov	r0, r3
     e64:	f810 2b01 	ldrb.w	r2, [r0], #1
     e68:	f1a2 0730 	sub.w	r7, r2, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
     e6c:	2f09      	cmp	r7, #9
     e6e:	f240 808e 	bls.w	f8e <z_cbvprintf_impl+0x23a>
	conv->unsupported |= ((conv->prec_value < 0)
     e72:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
	conv->prec_value = prec;
     e76:	910e      	str	r1, [sp, #56]	; 0x38
	conv->unsupported |= ((conv->prec_value < 0)
     e78:	f3c2 0040 	ubfx	r0, r2, #1, #1
     e7c:	ea40 71d1 	orr.w	r1, r0, r1, lsr #31
     e80:	f361 0241 	bfi	r2, r1, #1, #1
     e84:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	return sp;
     e88:	e05a      	b.n	f40 <z_cbvprintf_impl+0x1ec>
		conv->specifier = *sp++;
     e8a:	f10a 0702 	add.w	r7, sl, #2
     e8e:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
		if (conv->width_star) {
     e92:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
     e96:	07d9      	lsls	r1, r3, #31
     e98:	f140 8149 	bpl.w	112e <CONFIG_FPROTECT_BLOCK_SIZE+0x12e>
			width = va_arg(ap, int);
     e9c:	f854 9b04 	ldr.w	r9, [r4], #4
			if (width < 0) {
     ea0:	f1b9 0f00 	cmp.w	r9, #0
     ea4:	da07      	bge.n	eb6 <z_cbvprintf_impl+0x162>
				conv->flag_dash = true;
     ea6:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
     eaa:	f042 0204 	orr.w	r2, r2, #4
     eae:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
				width = -width;
     eb2:	f1c9 0900 	rsb	r9, r9, #0
		if (conv->prec_star) {
     eb6:	075a      	lsls	r2, r3, #29
     eb8:	f140 8142 	bpl.w	1140 <CONFIG_FPROTECT_BLOCK_SIZE+0x140>
			int arg = va_arg(ap, int);
     ebc:	f854 8b04 	ldr.w	r8, [r4], #4
			if (arg < 0) {
     ec0:	f1b8 0f00 	cmp.w	r8, #0
     ec4:	f280 8141 	bge.w	114a <CONFIG_FPROTECT_BLOCK_SIZE+0x14a>
				conv->prec_present = false;
     ec8:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
     ecc:	f36f 0341 	bfc	r3, #1, #1
     ed0:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
		int precision = -1;
     ed4:	f04f 38ff 	mov.w	r8, #4294967295
     ed8:	e137      	b.n	114a <CONFIG_FPROTECT_BLOCK_SIZE+0x14a>
		switch (*sp) {
     eda:	2b2d      	cmp	r3, #45	; 0x2d
     edc:	d00c      	beq.n	ef8 <z_cbvprintf_impl+0x1a4>
     ede:	2b30      	cmp	r3, #48	; 0x30
     ee0:	f47f af6d 	bne.w	dbe <z_cbvprintf_impl+0x6a>
			conv->flag_zero = true;
     ee4:	2201      	movs	r2, #1
	} while (loop);
     ee6:	e75c      	b.n	da2 <z_cbvprintf_impl+0x4e>
			conv->flag_plus = true;
     ee8:	f04f 0c01 	mov.w	ip, #1
     eec:	e759      	b.n	da2 <z_cbvprintf_impl+0x4e>
			conv->flag_space = true;
     eee:	f04f 0e01 	mov.w	lr, #1
     ef2:	e756      	b.n	da2 <z_cbvprintf_impl+0x4e>
			conv->flag_hash = true;
     ef4:	2001      	movs	r0, #1
     ef6:	e754      	b.n	da2 <z_cbvprintf_impl+0x4e>
		switch (*sp) {
     ef8:	2601      	movs	r6, #1
     efa:	e752      	b.n	da2 <z_cbvprintf_impl+0x4e>
		val = 10U * val + *sp++ - '0';
     efc:	fb0c 0202 	mla	r2, ip, r2, r0
     f00:	3a30      	subs	r2, #48	; 0x30
     f02:	4633      	mov	r3, r6
     f04:	461e      	mov	r6, r3
     f06:	f816 0b01 	ldrb.w	r0, [r6], #1
     f0a:	f1a0 0730 	sub.w	r7, r0, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
     f0e:	2f09      	cmp	r7, #9
     f10:	d9f4      	bls.n	efc <z_cbvprintf_impl+0x1a8>
	if (sp != wp) {
     f12:	4299      	cmp	r1, r3
     f14:	d093      	beq.n	e3e <z_cbvprintf_impl+0xea>
		conv->unsupported |= ((conv->width_value < 0)
     f16:	f89d 1030 	ldrb.w	r1, [sp, #48]	; 0x30
		conv->width_value = width;
     f1a:	920d      	str	r2, [sp, #52]	; 0x34
				      || (width != (size_t)conv->width_value));
     f1c:	0fd2      	lsrs	r2, r2, #31
		conv->unsupported |= ((conv->width_value < 0)
     f1e:	f362 0141 	bfi	r1, r2, #1, #1
     f22:	f88d 1030 	strb.w	r1, [sp, #48]	; 0x30
     f26:	e78a      	b.n	e3e <z_cbvprintf_impl+0xea>
     f28:	460b      	mov	r3, r1
	size_t val = 0;
     f2a:	2200      	movs	r2, #0
		val = 10U * val + *sp++ - '0';
     f2c:	f04f 0c0a 	mov.w	ip, #10
     f30:	e7e8      	b.n	f04 <z_cbvprintf_impl+0x1b0>
		conv->prec_star = true;
     f32:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
     f36:	f042 0204 	orr.w	r2, r2, #4
     f3a:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
		return ++sp;
     f3e:	3302      	adds	r3, #2
	switch (*sp) {
     f40:	461f      	mov	r7, r3
     f42:	f817 2b01 	ldrb.w	r2, [r7], #1
     f46:	2a6c      	cmp	r2, #108	; 0x6c
     f48:	d041      	beq.n	fce <z_cbvprintf_impl+0x27a>
     f4a:	d825      	bhi.n	f98 <z_cbvprintf_impl+0x244>
     f4c:	2a68      	cmp	r2, #104	; 0x68
     f4e:	d02b      	beq.n	fa8 <z_cbvprintf_impl+0x254>
     f50:	2a6a      	cmp	r2, #106	; 0x6a
     f52:	d046      	beq.n	fe2 <z_cbvprintf_impl+0x28e>
     f54:	2a4c      	cmp	r2, #76	; 0x4c
     f56:	d04c      	beq.n	ff2 <z_cbvprintf_impl+0x29e>
     f58:	461f      	mov	r7, r3
	conv->specifier = *sp++;
     f5a:	f817 2b01 	ldrb.w	r2, [r7], #1
		if (conv->length_mod == LENGTH_UPPER_L) {
     f5e:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
	conv->specifier = *sp++;
     f62:	f88d 2033 	strb.w	r2, [sp, #51]	; 0x33
	switch (conv->specifier) {
     f66:	2a78      	cmp	r2, #120	; 0x78
     f68:	f200 80d9 	bhi.w	111e <CONFIG_FPROTECT_BLOCK_SIZE+0x11e>
     f6c:	2a57      	cmp	r2, #87	; 0x57
     f6e:	d84d      	bhi.n	100c <CONFIG_FPROTECT_BLOCK_SIZE+0xc>
     f70:	2a41      	cmp	r2, #65	; 0x41
     f72:	d003      	beq.n	f7c <z_cbvprintf_impl+0x228>
     f74:	3a45      	subs	r2, #69	; 0x45
     f76:	2a02      	cmp	r2, #2
     f78:	f200 80d1 	bhi.w	111e <CONFIG_FPROTECT_BLOCK_SIZE+0x11e>
		conv->specifier_cat = SPECIFIER_FP;
     f7c:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
     f80:	2204      	movs	r2, #4
     f82:	f362 0302 	bfi	r3, r2, #0, #3
     f86:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
			unsupported = true;
     f8a:	2301      	movs	r3, #1
			break;
     f8c:	e09e      	b.n	10cc <CONFIG_FPROTECT_BLOCK_SIZE+0xcc>
		val = 10U * val + *sp++ - '0';
     f8e:	fb06 2101 	mla	r1, r6, r1, r2
     f92:	3930      	subs	r1, #48	; 0x30
     f94:	4603      	mov	r3, r0
     f96:	e764      	b.n	e62 <z_cbvprintf_impl+0x10e>
	switch (*sp) {
     f98:	2a74      	cmp	r2, #116	; 0x74
     f9a:	d026      	beq.n	fea <z_cbvprintf_impl+0x296>
     f9c:	2a7a      	cmp	r2, #122	; 0x7a
     f9e:	d1db      	bne.n	f58 <z_cbvprintf_impl+0x204>
		conv->length_mod = LENGTH_Z;
     fa0:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
     fa4:	2206      	movs	r2, #6
     fa6:	e00d      	b.n	fc4 <z_cbvprintf_impl+0x270>
		if (*++sp == 'h') {
     fa8:	785a      	ldrb	r2, [r3, #1]
     faa:	2a68      	cmp	r2, #104	; 0x68
     fac:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
     fb0:	d106      	bne.n	fc0 <z_cbvprintf_impl+0x26c>
			conv->length_mod = LENGTH_HH;
     fb2:	2101      	movs	r1, #1
			conv->length_mod = LENGTH_LL;
     fb4:	f361 02c6 	bfi	r2, r1, #3, #4
     fb8:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
			++sp;
     fbc:	1c9f      	adds	r7, r3, #2
     fbe:	e7cc      	b.n	f5a <z_cbvprintf_impl+0x206>
			conv->length_mod = LENGTH_H;
     fc0:	4613      	mov	r3, r2
     fc2:	2202      	movs	r2, #2
		conv->length_mod = LENGTH_T;
     fc4:	f362 03c6 	bfi	r3, r2, #3, #4
     fc8:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
		break;
     fcc:	e7c5      	b.n	f5a <z_cbvprintf_impl+0x206>
		if (*++sp == 'l') {
     fce:	785a      	ldrb	r2, [r3, #1]
     fd0:	2a6c      	cmp	r2, #108	; 0x6c
     fd2:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
     fd6:	d101      	bne.n	fdc <z_cbvprintf_impl+0x288>
			conv->length_mod = LENGTH_LL;
     fd8:	2104      	movs	r1, #4
     fda:	e7eb      	b.n	fb4 <z_cbvprintf_impl+0x260>
			conv->length_mod = LENGTH_L;
     fdc:	4613      	mov	r3, r2
     fde:	2203      	movs	r2, #3
     fe0:	e7f0      	b.n	fc4 <z_cbvprintf_impl+0x270>
		conv->length_mod = LENGTH_J;
     fe2:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
     fe6:	2205      	movs	r2, #5
     fe8:	e7ec      	b.n	fc4 <z_cbvprintf_impl+0x270>
		conv->length_mod = LENGTH_T;
     fea:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
     fee:	2207      	movs	r2, #7
     ff0:	e7e8      	b.n	fc4 <z_cbvprintf_impl+0x270>
		conv->unsupported = true;
     ff2:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
     ff6:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
     ffa:	f023 0302 	bic.w	r3, r3, #2
     ffe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
    1002:	f043 0302 	orr.w	r3, r3, #2
    1006:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
		break;
    100a:	e7a6      	b.n	f5a <z_cbvprintf_impl+0x206>
	switch (conv->specifier) {
    100c:	f1a2 0158 	sub.w	r1, r2, #88	; 0x58
    1010:	2920      	cmp	r1, #32
    1012:	f200 8084 	bhi.w	111e <CONFIG_FPROTECT_BLOCK_SIZE+0x11e>
    1016:	a001      	add	r0, pc, #4	; (adr r0, 101c <CONFIG_FPROTECT_BLOCK_SIZE+0x1c>)
    1018:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
    101c:	000010e1 	.word	0x000010e1
    1020:	0000111f 	.word	0x0000111f
    1024:	0000111f 	.word	0x0000111f
    1028:	0000111f 	.word	0x0000111f
    102c:	0000111f 	.word	0x0000111f
    1030:	0000111f 	.word	0x0000111f
    1034:	0000111f 	.word	0x0000111f
    1038:	0000111f 	.word	0x0000111f
    103c:	0000111f 	.word	0x0000111f
    1040:	00000f7d 	.word	0x00000f7d
    1044:	0000111f 	.word	0x0000111f
    1048:	000010e1 	.word	0x000010e1
    104c:	000010a1 	.word	0x000010a1
    1050:	00000f7d 	.word	0x00000f7d
    1054:	00000f7d 	.word	0x00000f7d
    1058:	00000f7d 	.word	0x00000f7d
    105c:	0000111f 	.word	0x0000111f
    1060:	000010a1 	.word	0x000010a1
    1064:	0000111f 	.word	0x0000111f
    1068:	0000111f 	.word	0x0000111f
    106c:	0000111f 	.word	0x0000111f
    1070:	0000111f 	.word	0x0000111f
    1074:	000010e9 	.word	0x000010e9
    1078:	000010e1 	.word	0x000010e1
    107c:	00001105 	.word	0x00001105
    1080:	0000111f 	.word	0x0000111f
    1084:	0000111f 	.word	0x0000111f
    1088:	00001105 	.word	0x00001105
    108c:	0000111f 	.word	0x0000111f
    1090:	000010e1 	.word	0x000010e1
    1094:	0000111f 	.word	0x0000111f
    1098:	0000111f 	.word	0x0000111f
    109c:	000010e1 	.word	0x000010e1
		conv->specifier_cat = SPECIFIER_SINT;
    10a0:	f89d 1032 	ldrb.w	r1, [sp, #50]	; 0x32
    10a4:	2001      	movs	r0, #1
		if (conv->length_mod == LENGTH_UPPER_L) {
    10a6:	f003 0378 	and.w	r3, r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_UINT;
    10aa:	f360 0102 	bfi	r1, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
    10ae:	2b40      	cmp	r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_UINT;
    10b0:	f88d 1032 	strb.w	r1, [sp, #50]	; 0x32
			conv->invalid = true;
    10b4:	bf02      	ittt	eq
    10b6:	f89d 1030 	ldrbeq.w	r1, [sp, #48]	; 0x30
    10ba:	f041 0101 	orreq.w	r1, r1, #1
    10be:	f88d 1030 	strbeq.w	r1, [sp, #48]	; 0x30
		if (conv->specifier == 'c') {
    10c2:	2a63      	cmp	r2, #99	; 0x63
    10c4:	d131      	bne.n	112a <CONFIG_FPROTECT_BLOCK_SIZE+0x12a>
			unsupported = (conv->length_mod != LENGTH_NONE);
    10c6:	3b00      	subs	r3, #0
    10c8:	bf18      	it	ne
    10ca:	2301      	movne	r3, #1
	conv->unsupported |= unsupported;
    10cc:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
    10d0:	f3c2 0140 	ubfx	r1, r2, #1, #1
    10d4:	430b      	orrs	r3, r1
    10d6:	f363 0241 	bfi	r2, r3, #1, #1
    10da:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	return sp;
    10de:	e6d8      	b.n	e92 <z_cbvprintf_impl+0x13e>
		conv->specifier_cat = SPECIFIER_UINT;
    10e0:	f89d 1032 	ldrb.w	r1, [sp, #50]	; 0x32
    10e4:	2002      	movs	r0, #2
    10e6:	e7de      	b.n	10a6 <CONFIG_FPROTECT_BLOCK_SIZE+0xa6>
		conv->specifier_cat = SPECIFIER_PTR;
    10e8:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod == LENGTH_UPPER_L) {
    10ec:	f003 0378 	and.w	r3, r3, #120	; 0x78
    10f0:	f1a3 0040 	sub.w	r0, r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_PTR;
    10f4:	2103      	movs	r1, #3
    10f6:	f361 0202 	bfi	r2, r1, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
    10fa:	4243      	negs	r3, r0
		conv->specifier_cat = SPECIFIER_PTR;
    10fc:	f88d 2032 	strb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod == LENGTH_UPPER_L) {
    1100:	4143      	adcs	r3, r0
    1102:	e7e3      	b.n	10cc <CONFIG_FPROTECT_BLOCK_SIZE+0xcc>
		conv->specifier_cat = SPECIFIER_PTR;
    1104:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
    1108:	2103      	movs	r1, #3
		if (conv->length_mod != LENGTH_NONE) {
    110a:	f013 0f78 	tst.w	r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_PTR;
    110e:	f361 0202 	bfi	r2, r1, #0, #3
    1112:	f88d 2032 	strb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod != LENGTH_NONE) {
    1116:	bf14      	ite	ne
    1118:	2301      	movne	r3, #1
    111a:	2300      	moveq	r3, #0
    111c:	e7d6      	b.n	10cc <CONFIG_FPROTECT_BLOCK_SIZE+0xcc>
		conv->invalid = true;
    111e:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
    1122:	f043 0301 	orr.w	r3, r3, #1
    1126:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
	bool unsupported = false;
    112a:	2300      	movs	r3, #0
    112c:	e7ce      	b.n	10cc <CONFIG_FPROTECT_BLOCK_SIZE+0xcc>
		} else if (conv->width_present) {
    112e:	f99d 2030 	ldrsb.w	r2, [sp, #48]	; 0x30
    1132:	2a00      	cmp	r2, #0
			width = conv->width_value;
    1134:	bfb4      	ite	lt
    1136:	f8dd 9034 	ldrlt.w	r9, [sp, #52]	; 0x34
		int width = -1;
    113a:	f04f 39ff 	movge.w	r9, #4294967295
    113e:	e6ba      	b.n	eb6 <z_cbvprintf_impl+0x162>
		} else if (conv->prec_present) {
    1140:	079b      	lsls	r3, r3, #30
    1142:	f57f aec7 	bpl.w	ed4 <z_cbvprintf_impl+0x180>
			precision = conv->prec_value;
    1146:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
			= (enum length_mod_enum)conv->length_mod;
    114a:	f89d 1031 	ldrb.w	r1, [sp, #49]	; 0x31
		conv->pad0_value = 0;
    114e:	2300      	movs	r3, #0
		conv->pad0_pre_exp = 0;
    1150:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
			= (enum specifier_cat_enum)conv->specifier_cat;
    1154:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
		enum specifier_cat_enum specifier_cat
    1158:	f003 0307 	and.w	r3, r3, #7
		if (specifier_cat == SPECIFIER_SINT) {
    115c:	2b01      	cmp	r3, #1
			= (enum length_mod_enum)conv->length_mod;
    115e:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		if (specifier_cat == SPECIFIER_SINT) {
    1162:	d135      	bne.n	11d0 <CONFIG_FPROTECT_BLOCK_SIZE+0x1d0>
			switch (length_mod) {
    1164:	1ecb      	subs	r3, r1, #3
    1166:	2b04      	cmp	r3, #4
    1168:	d822      	bhi.n	11b0 <CONFIG_FPROTECT_BLOCK_SIZE+0x1b0>
    116a:	e8df f003 	tbb	[pc, r3]
    116e:	0903      	.short	0x0903
    1170:	2109      	.short	0x2109
    1172:	21          	.byte	0x21
    1173:	00          	.byte	0x00
					value->sint = va_arg(ap, long);
    1174:	f854 3b04 	ldr.w	r3, [r4], #4
				value->sint = (short)value->sint;
    1178:	17da      	asrs	r2, r3, #31
    117a:	e9cd 320a 	strd	r3, r2, [sp, #40]	; 0x28
    117e:	e006      	b.n	118e <CONFIG_FPROTECT_BLOCK_SIZE+0x18e>
					(sint_value_type)va_arg(ap, intmax_t);
    1180:	3407      	adds	r4, #7
    1182:	f024 0407 	bic.w	r4, r4, #7
				value->sint =
    1186:	e8f4 2302 	ldrd	r2, r3, [r4], #8
    118a:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
		if (conv->invalid || conv->unsupported) {
    118e:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
    1192:	f013 0603 	ands.w	r6, r3, #3
    1196:	d059      	beq.n	124c <CONFIG_FPROTECT_BLOCK_SIZE+0x24c>
			OUTS(sp, fp);
    1198:	9802      	ldr	r0, [sp, #8]
    119a:	463b      	mov	r3, r7
    119c:	4652      	mov	r2, sl
    119e:	4659      	mov	r1, fp
    11a0:	f003 fb1d 	bl	47de <outs>
    11a4:	2800      	cmp	r0, #0
    11a6:	f2c0 8146 	blt.w	1436 <CONFIG_FPROTECT_BLOCK_SIZE+0x436>
    11aa:	4405      	add	r5, r0
			continue;
    11ac:	46ba      	mov	sl, r7
    11ae:	e5d9      	b.n	d64 <z_cbvprintf_impl+0x10>
					(sint_value_type)va_arg(ap, ptrdiff_t);
    11b0:	f854 3b04 	ldr.w	r3, [r4], #4
			if (length_mod == LENGTH_HH) {
    11b4:	2901      	cmp	r1, #1
					(sint_value_type)va_arg(ap, ptrdiff_t);
    11b6:	ea4f 72e3 	mov.w	r2, r3, asr #31
    11ba:	e9cd 320a 	strd	r3, r2, [sp, #40]	; 0x28
			if (length_mod == LENGTH_HH) {
    11be:	d102      	bne.n	11c6 <CONFIG_FPROTECT_BLOCK_SIZE+0x1c6>
				value->sint = (signed char)value->sint;
    11c0:	f99d 3028 	ldrsb.w	r3, [sp, #40]	; 0x28
    11c4:	e7d8      	b.n	1178 <CONFIG_FPROTECT_BLOCK_SIZE+0x178>
			} else if (length_mod == LENGTH_H) {
    11c6:	2902      	cmp	r1, #2
    11c8:	d1e1      	bne.n	118e <CONFIG_FPROTECT_BLOCK_SIZE+0x18e>
				value->sint = (short)value->sint;
    11ca:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
    11ce:	e7d3      	b.n	1178 <CONFIG_FPROTECT_BLOCK_SIZE+0x178>
		} else if (specifier_cat == SPECIFIER_UINT) {
    11d0:	2b02      	cmp	r3, #2
    11d2:	d129      	bne.n	1228 <CONFIG_FPROTECT_BLOCK_SIZE+0x228>
			switch (length_mod) {
    11d4:	1ecb      	subs	r3, r1, #3
    11d6:	2b04      	cmp	r3, #4
    11d8:	d813      	bhi.n	1202 <CONFIG_FPROTECT_BLOCK_SIZE+0x202>
    11da:	e8df f003 	tbb	[pc, r3]
    11de:	0a03      	.short	0x0a03
    11e0:	120a      	.short	0x120a
    11e2:	12          	.byte	0x12
    11e3:	00          	.byte	0x00
					value->uint = (wchar_t)va_arg(ap,
    11e4:	6822      	ldr	r2, [r4, #0]
    11e6:	920a      	str	r2, [sp, #40]	; 0x28
    11e8:	2300      	movs	r3, #0
				value->sint = va_arg(ap, int);
    11ea:	1d20      	adds	r0, r4, #4
					value->uint = (wchar_t)va_arg(ap,
    11ec:	930b      	str	r3, [sp, #44]	; 0x2c
					(uint_value_type)va_arg(ap, size_t);
    11ee:	4604      	mov	r4, r0
    11f0:	e7cd      	b.n	118e <CONFIG_FPROTECT_BLOCK_SIZE+0x18e>
					(uint_value_type)va_arg(ap,
    11f2:	1de0      	adds	r0, r4, #7
    11f4:	f020 0007 	bic.w	r0, r0, #7
				value->uint =
    11f8:	e8f0 2302 	ldrd	r2, r3, [r0], #8
    11fc:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
				break;
    1200:	e7f5      	b.n	11ee <CONFIG_FPROTECT_BLOCK_SIZE+0x1ee>
					(uint_value_type)va_arg(ap, size_t);
    1202:	f854 3b04 	ldr.w	r3, [r4], #4
    1206:	930a      	str	r3, [sp, #40]	; 0x28
			if (length_mod == LENGTH_HH) {
    1208:	2901      	cmp	r1, #1
					(uint_value_type)va_arg(ap, size_t);
    120a:	f04f 0300 	mov.w	r3, #0
    120e:	930b      	str	r3, [sp, #44]	; 0x2c
			if (length_mod == LENGTH_HH) {
    1210:	d105      	bne.n	121e <CONFIG_FPROTECT_BLOCK_SIZE+0x21e>
				value->uint = (unsigned char)value->uint;
    1212:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
				value->uint = (unsigned short)value->uint;
    1216:	930a      	str	r3, [sp, #40]	; 0x28
    1218:	2300      	movs	r3, #0
    121a:	930b      	str	r3, [sp, #44]	; 0x2c
    121c:	e7b7      	b.n	118e <CONFIG_FPROTECT_BLOCK_SIZE+0x18e>
			} else if (length_mod == LENGTH_H) {
    121e:	2902      	cmp	r1, #2
    1220:	d1b5      	bne.n	118e <CONFIG_FPROTECT_BLOCK_SIZE+0x18e>
				value->uint = (unsigned short)value->uint;
    1222:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
    1226:	e7f6      	b.n	1216 <CONFIG_FPROTECT_BLOCK_SIZE+0x216>
		} else if (specifier_cat == SPECIFIER_FP) {
    1228:	2b04      	cmp	r3, #4
    122a:	d109      	bne.n	1240 <CONFIG_FPROTECT_BLOCK_SIZE+0x240>
					(sint_value_type)va_arg(ap, long long);
    122c:	1de3      	adds	r3, r4, #7
    122e:	f023 0307 	bic.w	r3, r3, #7
    1232:	f103 0408 	add.w	r4, r3, #8
				value->ldbl = va_arg(ap, long double);
    1236:	e9d3 2300 	ldrd	r2, r3, [r3]
    123a:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
    123e:	e7a6      	b.n	118e <CONFIG_FPROTECT_BLOCK_SIZE+0x18e>
		} else if (specifier_cat == SPECIFIER_PTR) {
    1240:	2b03      	cmp	r3, #3
			value->ptr = va_arg(ap, void *);
    1242:	bf04      	itt	eq
    1244:	f854 3b04 	ldreq.w	r3, [r4], #4
    1248:	930a      	streq	r3, [sp, #40]	; 0x28
    124a:	e7a0      	b.n	118e <CONFIG_FPROTECT_BLOCK_SIZE+0x18e>
		switch (conv->specifier) {
    124c:	f89d 0033 	ldrb.w	r0, [sp, #51]	; 0x33
    1250:	2878      	cmp	r0, #120	; 0x78
    1252:	d8ab      	bhi.n	11ac <CONFIG_FPROTECT_BLOCK_SIZE+0x1ac>
    1254:	2862      	cmp	r0, #98	; 0x62
    1256:	d822      	bhi.n	129e <CONFIG_FPROTECT_BLOCK_SIZE+0x29e>
    1258:	2825      	cmp	r0, #37	; 0x25
    125a:	f43f ad8c 	beq.w	d76 <z_cbvprintf_impl+0x22>
    125e:	2858      	cmp	r0, #88	; 0x58
    1260:	d1a4      	bne.n	11ac <CONFIG_FPROTECT_BLOCK_SIZE+0x1ac>
			bps = encode_uint(value->uint, conv, buf, bpe);
    1262:	f10d 0326 	add.w	r3, sp, #38	; 0x26
    1266:	9300      	str	r3, [sp, #0]
    1268:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
    126c:	ab04      	add	r3, sp, #16
    126e:	aa0c      	add	r2, sp, #48	; 0x30
    1270:	f003 fa6f 	bl	4752 <encode_uint>
    1274:	4682      	mov	sl, r0
			if (precision >= 0) {
    1276:	f1b8 0f00 	cmp.w	r8, #0
    127a:	f10d 0026 	add.w	r0, sp, #38	; 0x26
    127e:	db0c      	blt.n	129a <CONFIG_FPROTECT_BLOCK_SIZE+0x29a>
				conv->flag_zero = false;
    1280:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
				size_t len = bpe - bps;
    1284:	eba0 030a 	sub.w	r3, r0, sl
				conv->flag_zero = false;
    1288:	f36f 1286 	bfc	r2, #6, #1
				if (len < (size_t)precision) {
    128c:	4598      	cmp	r8, r3
				conv->flag_zero = false;
    128e:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
				if (len < (size_t)precision) {
    1292:	d902      	bls.n	129a <CONFIG_FPROTECT_BLOCK_SIZE+0x29a>
					conv->pad0_value = precision - (int)len;
    1294:	eba8 0303 	sub.w	r3, r8, r3
    1298:	930d      	str	r3, [sp, #52]	; 0x34
		const char *bpe = buf + sizeof(buf);
    129a:	4680      	mov	r8, r0
    129c:	e03e      	b.n	131c <CONFIG_FPROTECT_BLOCK_SIZE+0x31c>
		switch (conv->specifier) {
    129e:	3863      	subs	r0, #99	; 0x63
    12a0:	2815      	cmp	r0, #21
    12a2:	d883      	bhi.n	11ac <CONFIG_FPROTECT_BLOCK_SIZE+0x1ac>
    12a4:	a201      	add	r2, pc, #4	; (adr r2, 12ac <CONFIG_FPROTECT_BLOCK_SIZE+0x2ac>)
    12a6:	f852 f020 	ldr.w	pc, [r2, r0, lsl #2]
    12aa:	bf00      	nop
    12ac:	0000132d 	.word	0x0000132d
    12b0:	00001391 	.word	0x00001391
    12b4:	000011ad 	.word	0x000011ad
    12b8:	000011ad 	.word	0x000011ad
    12bc:	000011ad 	.word	0x000011ad
    12c0:	000011ad 	.word	0x000011ad
    12c4:	00001391 	.word	0x00001391
    12c8:	000011ad 	.word	0x000011ad
    12cc:	000011ad 	.word	0x000011ad
    12d0:	000011ad 	.word	0x000011ad
    12d4:	000011ad 	.word	0x000011ad
    12d8:	000013eb 	.word	0x000013eb
    12dc:	000013b9 	.word	0x000013b9
    12e0:	000013bd 	.word	0x000013bd
    12e4:	000011ad 	.word	0x000011ad
    12e8:	000011ad 	.word	0x000011ad
    12ec:	00001305 	.word	0x00001305
    12f0:	000011ad 	.word	0x000011ad
    12f4:	000013b9 	.word	0x000013b9
    12f8:	000011ad 	.word	0x000011ad
    12fc:	000011ad 	.word	0x000011ad
    1300:	000013b9 	.word	0x000013b9
			if (precision >= 0) {
    1304:	f1b8 0f00 	cmp.w	r8, #0
			bps = (const char *)value->ptr;
    1308:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
			if (precision >= 0) {
    130c:	db0a      	blt.n	1324 <CONFIG_FPROTECT_BLOCK_SIZE+0x324>
				len = strnlen(bps, precision);
    130e:	4641      	mov	r1, r8
    1310:	4650      	mov	r0, sl
    1312:	f003 fa9d 	bl	4850 <strnlen>
			bpe = bps + len;
    1316:	eb0a 0800 	add.w	r8, sl, r0
		char sign = 0;
    131a:	2600      	movs	r6, #0
		if (bps == NULL) {
    131c:	f1ba 0f00 	cmp.w	sl, #0
    1320:	d10c      	bne.n	133c <CONFIG_FPROTECT_BLOCK_SIZE+0x33c>
    1322:	e743      	b.n	11ac <CONFIG_FPROTECT_BLOCK_SIZE+0x1ac>
				len = strlen(bps);
    1324:	4650      	mov	r0, sl
    1326:	f003 fa8c 	bl	4842 <strlen>
    132a:	e7f4      	b.n	1316 <CONFIG_FPROTECT_BLOCK_SIZE+0x316>
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
    132c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    132e:	f88d 3010 	strb.w	r3, [sp, #16]
			break;
    1332:	2600      	movs	r6, #0
			bps = buf;
    1334:	f10d 0a10 	add.w	sl, sp, #16
			bpe = buf + 1;
    1338:	f10d 0811 	add.w	r8, sp, #17
		size_t nj_len = (bpe - bps);
    133c:	eba8 030a 	sub.w	r3, r8, sl
		if (sign != 0) {
    1340:	b106      	cbz	r6, 1344 <CONFIG_FPROTECT_BLOCK_SIZE+0x344>
			nj_len += 1U;
    1342:	3301      	adds	r3, #1
		if (conv->altform_0c) {
    1344:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
    1348:	06d0      	lsls	r0, r2, #27
    134a:	d568      	bpl.n	141e <CONFIG_FPROTECT_BLOCK_SIZE+0x41e>
			nj_len += 2U;
    134c:	3302      	adds	r3, #2
		if (conv->pad_fp) {
    134e:	0652      	lsls	r2, r2, #25
		nj_len += conv->pad0_value;
    1350:	990d      	ldr	r1, [sp, #52]	; 0x34
			nj_len += conv->pad0_pre_exp;
    1352:	bf48      	it	mi
    1354:	9a0e      	ldrmi	r2, [sp, #56]	; 0x38
		nj_len += conv->pad0_value;
    1356:	440b      	add	r3, r1
			nj_len += conv->pad0_pre_exp;
    1358:	bf48      	it	mi
    135a:	189b      	addmi	r3, r3, r2
		if (width > 0) {
    135c:	f1b9 0f00 	cmp.w	r9, #0
    1360:	dd76      	ble.n	1450 <CONFIG_FPROTECT_BLOCK_SIZE+0x450>
			if (!conv->flag_dash) {
    1362:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
			width -= (int)nj_len;
    1366:	eba9 0903 	sub.w	r9, r9, r3
			if (!conv->flag_dash) {
    136a:	f3c2 0380 	ubfx	r3, r2, #2, #1
    136e:	9303      	str	r3, [sp, #12]
    1370:	0753      	lsls	r3, r2, #29
    1372:	d46d      	bmi.n	1450 <CONFIG_FPROTECT_BLOCK_SIZE+0x450>
				if (conv->flag_zero) {
    1374:	0650      	lsls	r0, r2, #25
    1376:	d561      	bpl.n	143c <CONFIG_FPROTECT_BLOCK_SIZE+0x43c>
					if (sign != 0) {
    1378:	b146      	cbz	r6, 138c <CONFIG_FPROTECT_BLOCK_SIZE+0x38c>
						OUTC(sign);
    137a:	9b02      	ldr	r3, [sp, #8]
    137c:	4659      	mov	r1, fp
    137e:	4630      	mov	r0, r6
    1380:	4798      	blx	r3
    1382:	2800      	cmp	r0, #0
    1384:	db57      	blt.n	1436 <CONFIG_FPROTECT_BLOCK_SIZE+0x436>
						sign = 0;
    1386:	9b03      	ldr	r3, [sp, #12]
						OUTC(sign);
    1388:	3501      	adds	r5, #1
						sign = 0;
    138a:	461e      	mov	r6, r3
					pad = '0';
    138c:	2330      	movs	r3, #48	; 0x30
    138e:	e056      	b.n	143e <CONFIG_FPROTECT_BLOCK_SIZE+0x43e>
			if (conv->flag_plus) {
    1390:	071e      	lsls	r6, r3, #28
    1392:	d40f      	bmi.n	13b4 <CONFIG_FPROTECT_BLOCK_SIZE+0x3b4>
				sign = ' ';
    1394:	f013 0610 	ands.w	r6, r3, #16
    1398:	bf18      	it	ne
    139a:	2620      	movne	r6, #32
			sint = value->sint;
    139c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
			if (sint < 0) {
    13a0:	2b00      	cmp	r3, #0
    13a2:	f6bf af5e 	bge.w	1262 <CONFIG_FPROTECT_BLOCK_SIZE+0x262>
				value->uint = (uint_value_type)-sint;
    13a6:	4252      	negs	r2, r2
    13a8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    13ac:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
				sign = '-';
    13b0:	262d      	movs	r6, #45	; 0x2d
    13b2:	e756      	b.n	1262 <CONFIG_FPROTECT_BLOCK_SIZE+0x262>
				sign = '+';
    13b4:	262b      	movs	r6, #43	; 0x2b
    13b6:	e7f1      	b.n	139c <CONFIG_FPROTECT_BLOCK_SIZE+0x39c>
		switch (conv->specifier) {
    13b8:	2600      	movs	r6, #0
    13ba:	e752      	b.n	1262 <CONFIG_FPROTECT_BLOCK_SIZE+0x262>
			if (value->ptr != NULL) {
    13bc:	980a      	ldr	r0, [sp, #40]	; 0x28
    13be:	b340      	cbz	r0, 1412 <CONFIG_FPROTECT_BLOCK_SIZE+0x412>
				bps = encode_uint((uintptr_t)value->ptr, conv,
    13c0:	f10d 0326 	add.w	r3, sp, #38	; 0x26
    13c4:	9300      	str	r3, [sp, #0]
    13c6:	aa0c      	add	r2, sp, #48	; 0x30
    13c8:	ab04      	add	r3, sp, #16
    13ca:	2100      	movs	r1, #0
    13cc:	f003 f9c1 	bl	4752 <encode_uint>
				conv->altform_0c = true;
    13d0:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
    13d4:	f003 03ef 	and.w	r3, r3, #239	; 0xef
    13d8:	f443 43f0 	orr.w	r3, r3, #30720	; 0x7800
    13dc:	f043 0310 	orr.w	r3, r3, #16
				bps = encode_uint((uintptr_t)value->ptr, conv,
    13e0:	4682      	mov	sl, r0
				conv->altform_0c = true;
    13e2:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
		char sign = 0;
    13e6:	2600      	movs	r6, #0
				goto prec_int_pad0;
    13e8:	e745      	b.n	1276 <CONFIG_FPROTECT_BLOCK_SIZE+0x276>
				store_count(conv, value->ptr, count);
    13ea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
	switch ((enum length_mod_enum)conv->length_mod) {
    13ec:	2907      	cmp	r1, #7
    13ee:	f63f aedd 	bhi.w	11ac <CONFIG_FPROTECT_BLOCK_SIZE+0x1ac>
    13f2:	e8df f001 	tbb	[pc, r1]
    13f6:	040c      	.short	0x040c
    13f8:	08080c06 	.word	0x08080c06
    13fc:	0c0c      	.short	0x0c0c
		*(signed char *)dp = (signed char)count;
    13fe:	701d      	strb	r5, [r3, #0]
		break;
    1400:	e6d4      	b.n	11ac <CONFIG_FPROTECT_BLOCK_SIZE+0x1ac>
		*(short *)dp = (short)count;
    1402:	801d      	strh	r5, [r3, #0]
		break;
    1404:	e6d2      	b.n	11ac <CONFIG_FPROTECT_BLOCK_SIZE+0x1ac>
		*(intmax_t *)dp = (intmax_t)count;
    1406:	17ea      	asrs	r2, r5, #31
    1408:	e9c3 5200 	strd	r5, r2, [r3]
		break;
    140c:	e6ce      	b.n	11ac <CONFIG_FPROTECT_BLOCK_SIZE+0x1ac>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
    140e:	601d      	str	r5, [r3, #0]
		break;
    1410:	e6cc      	b.n	11ac <CONFIG_FPROTECT_BLOCK_SIZE+0x1ac>
			bps = "(nil)";
    1412:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 14dc <CONFIG_FPROTECT_BLOCK_SIZE+0x4dc>
    1416:	4606      	mov	r6, r0
			bpe = bps + 5;
    1418:	f10a 0805 	add.w	r8, sl, #5
    141c:	e78e      	b.n	133c <CONFIG_FPROTECT_BLOCK_SIZE+0x33c>
		} else if (conv->altform_0) {
    141e:	0711      	lsls	r1, r2, #28
			nj_len += 1U;
    1420:	bf48      	it	mi
    1422:	3301      	addmi	r3, #1
    1424:	e793      	b.n	134e <CONFIG_FPROTECT_BLOCK_SIZE+0x34e>
					OUTC(pad);
    1426:	4618      	mov	r0, r3
    1428:	9303      	str	r3, [sp, #12]
    142a:	4659      	mov	r1, fp
    142c:	9b02      	ldr	r3, [sp, #8]
    142e:	4798      	blx	r3
    1430:	2800      	cmp	r0, #0
    1432:	9b03      	ldr	r3, [sp, #12]
    1434:	da04      	bge.n	1440 <CONFIG_FPROTECT_BLOCK_SIZE+0x440>
#undef OUTS
#undef OUTC
}
    1436:	b011      	add	sp, #68	; 0x44
    1438:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				char pad = ' ';
    143c:	2320      	movs	r3, #32
    143e:	444d      	add	r5, r9
    1440:	464a      	mov	r2, r9
				while (width-- > 0) {
    1442:	2a00      	cmp	r2, #0
    1444:	eba5 0109 	sub.w	r1, r5, r9
    1448:	f109 39ff 	add.w	r9, r9, #4294967295
    144c:	dceb      	bgt.n	1426 <CONFIG_FPROTECT_BLOCK_SIZE+0x426>
    144e:	460d      	mov	r5, r1
		if (sign != 0) {
    1450:	b136      	cbz	r6, 1460 <CONFIG_FPROTECT_BLOCK_SIZE+0x460>
			OUTC(sign);
    1452:	9b02      	ldr	r3, [sp, #8]
    1454:	4659      	mov	r1, fp
    1456:	4630      	mov	r0, r6
    1458:	4798      	blx	r3
    145a:	2800      	cmp	r0, #0
    145c:	dbeb      	blt.n	1436 <CONFIG_FPROTECT_BLOCK_SIZE+0x436>
    145e:	3501      	adds	r5, #1
			if (conv->altform_0c | conv->altform_0) {
    1460:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
    1464:	06d9      	lsls	r1, r3, #27
    1466:	d401      	bmi.n	146c <CONFIG_FPROTECT_BLOCK_SIZE+0x46c>
    1468:	071a      	lsls	r2, r3, #28
    146a:	d506      	bpl.n	147a <CONFIG_FPROTECT_BLOCK_SIZE+0x47a>
				OUTC('0');
    146c:	9b02      	ldr	r3, [sp, #8]
    146e:	4659      	mov	r1, fp
    1470:	2030      	movs	r0, #48	; 0x30
    1472:	4798      	blx	r3
    1474:	2800      	cmp	r0, #0
    1476:	dbde      	blt.n	1436 <CONFIG_FPROTECT_BLOCK_SIZE+0x436>
    1478:	3501      	adds	r5, #1
			if (conv->altform_0c) {
    147a:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
    147e:	06db      	lsls	r3, r3, #27
    1480:	d507      	bpl.n	1492 <CONFIG_FPROTECT_BLOCK_SIZE+0x492>
				OUTC(conv->specifier);
    1482:	f89d 0033 	ldrb.w	r0, [sp, #51]	; 0x33
    1486:	9b02      	ldr	r3, [sp, #8]
    1488:	4659      	mov	r1, fp
    148a:	4798      	blx	r3
    148c:	2800      	cmp	r0, #0
    148e:	dbd2      	blt.n	1436 <CONFIG_FPROTECT_BLOCK_SIZE+0x436>
    1490:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
    1492:	9e0d      	ldr	r6, [sp, #52]	; 0x34
    1494:	442e      	add	r6, r5
    1496:	1b73      	subs	r3, r6, r5
    1498:	2b00      	cmp	r3, #0
    149a:	dc16      	bgt.n	14ca <CONFIG_FPROTECT_BLOCK_SIZE+0x4ca>
			OUTS(bps, bpe);
    149c:	9802      	ldr	r0, [sp, #8]
    149e:	4643      	mov	r3, r8
    14a0:	4652      	mov	r2, sl
    14a2:	4659      	mov	r1, fp
    14a4:	f003 f99b 	bl	47de <outs>
    14a8:	2800      	cmp	r0, #0
    14aa:	dbc4      	blt.n	1436 <CONFIG_FPROTECT_BLOCK_SIZE+0x436>
    14ac:	4405      	add	r5, r0
		while (width > 0) {
    14ae:	44a9      	add	r9, r5
    14b0:	eba9 0305 	sub.w	r3, r9, r5
    14b4:	2b00      	cmp	r3, #0
    14b6:	f77f ae79 	ble.w	11ac <CONFIG_FPROTECT_BLOCK_SIZE+0x1ac>
			OUTC(' ');
    14ba:	9b02      	ldr	r3, [sp, #8]
    14bc:	4659      	mov	r1, fp
    14be:	2020      	movs	r0, #32
    14c0:	4798      	blx	r3
    14c2:	2800      	cmp	r0, #0
    14c4:	dbb7      	blt.n	1436 <CONFIG_FPROTECT_BLOCK_SIZE+0x436>
    14c6:	3501      	adds	r5, #1
			--width;
    14c8:	e7f2      	b.n	14b0 <CONFIG_FPROTECT_BLOCK_SIZE+0x4b0>
				OUTC('0');
    14ca:	9b02      	ldr	r3, [sp, #8]
    14cc:	4659      	mov	r1, fp
    14ce:	2030      	movs	r0, #48	; 0x30
    14d0:	4798      	blx	r3
    14d2:	2800      	cmp	r0, #0
    14d4:	dbaf      	blt.n	1436 <CONFIG_FPROTECT_BLOCK_SIZE+0x436>
    14d6:	3501      	adds	r5, #1
    14d8:	e7dd      	b.n	1496 <CONFIG_FPROTECT_BLOCK_SIZE+0x496>
    14da:	bf00      	nop
    14dc:	00005321 	.word	0x00005321

000014e0 <z_arm_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
    14e0:	f001 bbe4 	b.w	2cac <SystemInit>

000014e4 <pm_state_notify>:
/*
 * Function called to notify when the system is entering / exiting a
 * power state
 */
static inline void pm_state_notify(bool entering_state)
{
    14e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    14e8:	4605      	mov	r5, r0
    14ea:	f04f 0320 	mov.w	r3, #32
    14ee:	f3ef 8611 	mrs	r6, BASEPRI
    14f2:	f383 8812 	msr	BASEPRI_MAX, r3
    14f6:	f3bf 8f6f 	isb	sy
	return list->head;
    14fa:	4b0e      	ldr	r3, [pc, #56]	; (1534 <pm_state_notify+0x50>)
    14fc:	681c      	ldr	r4, [r3, #0]
	struct pm_notifier *notifier;
	k_spinlock_key_t pm_notifier_key;
	void (*callback)(enum pm_state state);

	pm_notifier_key = k_spin_lock(&pm_notifier_lock);
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    14fe:	b19c      	cbz	r4, 1528 <pm_state_notify+0x44>
		} else {
			callback = notifier->state_exit;
		}

		if (callback) {
			callback(z_cpus_pm_state[_current_cpu->id].state);
    1500:	4f0d      	ldr	r7, [pc, #52]	; (1538 <pm_state_notify+0x54>)
    1502:	f8df 8038 	ldr.w	r8, [pc, #56]	; 153c <pm_state_notify+0x58>
    1506:	f04f 090c 	mov.w	r9, #12
			callback = notifier->state_exit;
    150a:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
    150e:	2d00      	cmp	r5, #0
    1510:	bf08      	it	eq
    1512:	4613      	moveq	r3, r2
		if (callback) {
    1514:	b12b      	cbz	r3, 1522 <pm_state_notify+0x3e>
			callback(z_cpus_pm_state[_current_cpu->id].state);
    1516:	f898 2014 	ldrb.w	r2, [r8, #20]
    151a:	fb09 f202 	mul.w	r2, r9, r2
    151e:	5cb8      	ldrb	r0, [r7, r2]
    1520:	4798      	blx	r3
	return node->next;
    1522:	6824      	ldr	r4, [r4, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    1524:	2c00      	cmp	r4, #0
    1526:	d1f0      	bne.n	150a <pm_state_notify+0x26>
	__asm__ volatile(
    1528:	f386 8811 	msr	BASEPRI, r6
    152c:	f3bf 8f6f 	isb	sy
		}
	}
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
}
    1530:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    1534:	200001c8 	.word	0x200001c8
    1538:	200001dc 	.word	0x200001dc
    153c:	2000032c 	.word	0x2000032c

00001540 <pm_system_resume>:

void pm_system_resume(void)
{
    1540:	b538      	push	{r3, r4, r5, lr}
	uint8_t id = CURRENT_CPU;
    1542:	4b1a      	ldr	r3, [pc, #104]	; (15ac <pm_system_resume+0x6c>)
    1544:	7d1c      	ldrb	r4, [r3, #20]
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    1546:	f3bf 8f5b 	dmb	ish
 *
 * @return true if the bit was set, false if it wasn't.
 */
static inline bool atomic_test_and_clear_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
    154a:	f004 031f 	and.w	r3, r4, #31
    154e:	2201      	movs	r2, #1
    1550:	409a      	lsls	r2, r3
    1552:	4b17      	ldr	r3, [pc, #92]	; (15b0 <pm_system_resume+0x70>)
	atomic_val_t old;

	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    1554:	0961      	lsrs	r1, r4, #5
    1556:	43d0      	mvns	r0, r2
    1558:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    155c:	e853 1f00 	ldrex	r1, [r3]
    1560:	ea01 0500 	and.w	r5, r1, r0
    1564:	e843 5c00 	strex	ip, r5, [r3]
    1568:	f1bc 0f00 	cmp.w	ip, #0
    156c:	d1f6      	bne.n	155c <pm_system_resume+0x1c>
    156e:	f3bf 8f5b 	dmb	ish
	 * that caused the wake. This hook will be called from the ISR.
	 * For such CPU LPS states, do post operations and restores here.
	 * The kernel scheduler will get control after the ISR finishes
	 * and it may schedule another thread.
	 */
	if (atomic_test_and_clear_bit(z_post_ops_required, id)) {
    1572:	4211      	tst	r1, r2
    1574:	d013      	beq.n	159e <pm_system_resume+0x5e>
	if (pm_state_exit_post_ops != NULL) {
    1576:	4b0f      	ldr	r3, [pc, #60]	; (15b4 <pm_system_resume+0x74>)
    1578:	4d0f      	ldr	r5, [pc, #60]	; (15b8 <pm_system_resume+0x78>)
    157a:	b18b      	cbz	r3, 15a0 <pm_system_resume+0x60>
		pm_state_exit_post_ops(info->state, info->substate_id);
    157c:	230c      	movs	r3, #12
    157e:	4363      	muls	r3, r4
    1580:	18ea      	adds	r2, r5, r3
    1582:	5ce8      	ldrb	r0, [r5, r3]
    1584:	7851      	ldrb	r1, [r2, #1]
    1586:	f003 f98f 	bl	48a8 <pm_state_exit_post_ops>
		pm_exit_pos_ops(&z_cpus_pm_state[id]);
		pm_state_notify(false);
    158a:	2000      	movs	r0, #0
    158c:	f7ff ffaa 	bl	14e4 <pm_state_notify>
		z_cpus_pm_state[id] = (struct pm_state_info){PM_STATE_ACTIVE,
    1590:	230c      	movs	r3, #12
    1592:	435c      	muls	r4, r3
    1594:	192a      	adds	r2, r5, r4
    1596:	2300      	movs	r3, #0
    1598:	512b      	str	r3, [r5, r4]
    159a:	e9c2 3301 	strd	r3, r3, [r2, #4]
			0, 0};
	}
}
    159e:	bd38      	pop	{r3, r4, r5, pc}
    15a0:	f383 8811 	msr	BASEPRI, r3
    15a4:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
    15a8:	e7ef      	b.n	158a <pm_system_resume+0x4a>
    15aa:	bf00      	nop
    15ac:	2000032c 	.word	0x2000032c
    15b0:	200001e8 	.word	0x200001e8
    15b4:	000048a9 	.word	0x000048a9
    15b8:	200001dc 	.word	0x200001dc

000015bc <pm_system_suspend>:

	return true;
}

bool pm_system_suspend(int32_t ticks)
{
    15bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t id = CURRENT_CPU;
    15c0:	4b33      	ldr	r3, [pc, #204]	; (1690 <pm_system_suspend+0xd4>)
{
    15c2:	4607      	mov	r7, r0
	uint8_t id = CURRENT_CPU;
    15c4:	7d1d      	ldrb	r5, [r3, #20]
	__asm__ volatile(
    15c6:	f04f 0320 	mov.w	r3, #32
    15ca:	f3ef 8811 	mrs	r8, BASEPRI
    15ce:	f383 8812 	msr	BASEPRI_MAX, r3
    15d2:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key;

	SYS_PORT_TRACING_FUNC_ENTER(pm, system_suspend, ticks);

	key = k_spin_lock(&pm_forced_state_lock);
	if (z_cpus_pm_forced_state[id].state != PM_STATE_ACTIVE) {
    15d6:	240c      	movs	r4, #12
    15d8:	4b2e      	ldr	r3, [pc, #184]	; (1694 <pm_system_suspend+0xd8>)
    15da:	4e2f      	ldr	r6, [pc, #188]	; (1698 <pm_system_suspend+0xdc>)
    15dc:	436c      	muls	r4, r5
    15de:	191a      	adds	r2, r3, r4
    15e0:	5d19      	ldrb	r1, [r3, r4]
    15e2:	2900      	cmp	r1, #0
    15e4:	d049      	beq.n	167a <pm_system_suspend+0xbe>
		z_cpus_pm_state[id] = z_cpus_pm_forced_state[id];
    15e6:	ca07      	ldmia	r2, {r0, r1, r2}
    15e8:	eb06 0c04 	add.w	ip, r6, r4
    15ec:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
		z_cpus_pm_forced_state[id].state = PM_STATE_ACTIVE;
    15f0:	2200      	movs	r2, #0
    15f2:	551a      	strb	r2, [r3, r4]
	__asm__ volatile(
    15f4:	f388 8811 	msr	BASEPRI, r8
    15f8:	f3bf 8f6f 	isb	sy
			z_cpus_pm_state[id] = *info;
		}
	}
	k_spin_unlock(&pm_forced_state_lock, key);

	if (z_cpus_pm_state[id].state == PM_STATE_ACTIVE) {
    15fc:	230c      	movs	r3, #12
    15fe:	436b      	muls	r3, r5
    1600:	18f2      	adds	r2, r6, r3
    1602:	5cf0      	ldrb	r0, [r6, r3]
    1604:	b3b8      	cbz	r0, 1676 <pm_system_suspend+0xba>
		SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);
		return false;
	}

	if (ticks != K_TICKS_FOREVER) {
    1606:	1c7b      	adds	r3, r7, #1
    1608:	d00f      	beq.n	162a <pm_system_suspend+0x6e>
		} else {
			return t * ((uint64_t)to_hz / from_hz);
		}
	} else {
		if (result32) {
			return (uint32_t)((t * to_hz + off) / from_hz);
    160a:	f8d2 c008 	ldr.w	ip, [r2, #8]
    160e:	4823      	ldr	r0, [pc, #140]	; (169c <pm_system_suspend+0xe0>)
    1610:	4a23      	ldr	r2, [pc, #140]	; (16a0 <pm_system_suspend+0xe4>)
    1612:	f44f 4400 	mov.w	r4, #32768	; 0x8000
    1616:	2100      	movs	r1, #0
    1618:	2300      	movs	r3, #0
    161a:	fbec 0104 	umlal	r0, r1, ip, r4
    161e:	f7ff f857 	bl	6d0 <__aeabi_uldivmod>
		/*
		 * We need to set the timer to interrupt a little bit early to
		 * accommodate the time required by the CPU to fully wake up.
		 */
		z_set_timeout_expiry(ticks -
    1622:	2101      	movs	r1, #1
    1624:	1a38      	subs	r0, r7, r0
    1626:	f003 fca2 	bl	4f6e <z_set_timeout_expiry>
	 * state. We don't want to be scheduled out yet, first we need
	 * to send a notification about leaving the idle state. So,
	 * we lock the scheduler here and unlock just after we have
	 * sent the notification in pm_system_resume().
	 */
	k_sched_lock();
    162a:	f002 fb49 	bl	3cc0 <k_sched_lock>
	pm_stats_start();
	/* Enter power state */
	pm_state_notify(true);
    162e:	2001      	movs	r0, #1
    1630:	f7ff ff58 	bl	14e4 <pm_state_notify>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    1634:	f3bf 8f5b 	dmb	ish
 * @param target Address of atomic variable or array.
 * @param bit Bit number (starting from 0).
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
    1638:	f005 021f 	and.w	r2, r5, #31
    163c:	2101      	movs	r1, #1
    163e:	4091      	lsls	r1, r2
    1640:	4a18      	ldr	r2, [pc, #96]	; (16a4 <pm_system_suspend+0xe8>)

	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    1642:	096b      	lsrs	r3, r5, #5
    1644:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    1648:	e853 2f00 	ldrex	r2, [r3]
    164c:	430a      	orrs	r2, r1
    164e:	e843 2000 	strex	r0, r2, [r3]
    1652:	2800      	cmp	r0, #0
    1654:	d1f8      	bne.n	1648 <pm_system_suspend+0x8c>
    1656:	f3bf 8f5b 	dmb	ish
	if (pm_state_set != NULL) {
    165a:	4b13      	ldr	r3, [pc, #76]	; (16a8 <pm_system_suspend+0xec>)
    165c:	b133      	cbz	r3, 166c <pm_system_suspend+0xb0>
		pm_state_set(info->state, info->substate_id);
    165e:	200c      	movs	r0, #12
    1660:	4368      	muls	r0, r5
    1662:	1833      	adds	r3, r6, r0
    1664:	5c30      	ldrb	r0, [r6, r0]
    1666:	7859      	ldrb	r1, [r3, #1]
    1668:	f003 f912 	bl	4890 <pm_state_set>
	if (atomic_add(&z_cpus_active, 1) == 0) {
		pm_resume_devices();
	}
#endif
	pm_stats_update(z_cpus_pm_state[id].state);
	pm_system_resume();
    166c:	f7ff ff68 	bl	1540 <pm_system_resume>
	k_sched_unlock();
    1670:	f002 fcae 	bl	3fd0 <k_sched_unlock>
	SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);

	return true;
    1674:	2001      	movs	r0, #1
}
    1676:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		info = pm_policy_next_state(id, ticks);
    167a:	4601      	mov	r1, r0
    167c:	4628      	mov	r0, r5
    167e:	f000 f815 	bl	16ac <pm_policy_next_state>
		if (info != NULL) {
    1682:	2800      	cmp	r0, #0
    1684:	d0b6      	beq.n	15f4 <pm_system_suspend+0x38>
			z_cpus_pm_state[id] = *info;
    1686:	c807      	ldmia	r0, {r0, r1, r2}
    1688:	4434      	add	r4, r6
    168a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    168e:	e7b1      	b.n	15f4 <pm_system_suspend+0x38>
    1690:	2000032c 	.word	0x2000032c
    1694:	200001d0 	.word	0x200001d0
    1698:	200001dc 	.word	0x200001dc
    169c:	000f423f 	.word	0x000f423f
    16a0:	000f4240 	.word	0x000f4240
    16a4:	200001e8 	.word	0x200001e8
    16a8:	00004891 	.word	0x00004891

000016ac <pm_policy_next_state>:
	}
}

#ifdef CONFIG_PM_POLICY_DEFAULT
const struct pm_state_info *pm_policy_next_state(uint8_t cpu, int32_t ticks)
{
    16ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    16b0:	b085      	sub	sp, #20
    16b2:	460e      	mov	r6, r1
	uint8_t num_cpu_states;
	const struct pm_state_info *cpu_states;

	num_cpu_states = pm_state_cpu_get_all(cpu, &cpu_states);
    16b4:	a903      	add	r1, sp, #12
    16b6:	f000 f841 	bl	173c <pm_state_cpu_get_all>

	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
		const struct pm_state_info *state = &cpu_states[i];
    16ba:	9b03      	ldr	r3, [sp, #12]
    16bc:	9301      	str	r3, [sp, #4]

		min_residency = k_us_to_ticks_ceil32(state->min_residency_us);
		exit_latency = k_us_to_ticks_ceil32(state->exit_latency_us);

		/* skip state if it brings too much latency */
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
    16be:	4b1c      	ldr	r3, [pc, #112]	; (1730 <pm_policy_next_state+0x84>)
    16c0:	f8df 8070 	ldr.w	r8, [pc, #112]	; 1734 <pm_policy_next_state+0x88>
    16c4:	f8d3 a000 	ldr.w	sl, [r3]
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
    16c8:	1e44      	subs	r4, r0, #1
    16ca:	b224      	sxth	r4, r4
    16cc:	f44f 4700 	mov.w	r7, #32768	; 0x8000
    16d0:	f04f 0b00 	mov.w	fp, #0
    16d4:	1c63      	adds	r3, r4, #1
    16d6:	d104      	bne.n	16e2 <pm_policy_next_state+0x36>
		    (ticks >= (min_residency + exit_latency))) {
			return state;
		}
	}

	return NULL;
    16d8:	2500      	movs	r5, #0
}
    16da:	4628      	mov	r0, r5
    16dc:	b005      	add	sp, #20
    16de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		const struct pm_state_info *state = &cpu_states[i];
    16e2:	9b01      	ldr	r3, [sp, #4]
    16e4:	4a14      	ldr	r2, [pc, #80]	; (1738 <pm_policy_next_state+0x8c>)
    16e6:	eb04 0544 	add.w	r5, r4, r4, lsl #1
    16ea:	eb03 0585 	add.w	r5, r3, r5, lsl #2
    16ee:	46c4      	mov	ip, r8
    16f0:	6868      	ldr	r0, [r5, #4]
    16f2:	4659      	mov	r1, fp
    16f4:	fbe0 c107 	umlal	ip, r1, r0, r7
    16f8:	2300      	movs	r3, #0
    16fa:	4660      	mov	r0, ip
    16fc:	f7fe ffe8 	bl	6d0 <__aeabi_uldivmod>
    1700:	4681      	mov	r9, r0
    1702:	68a8      	ldr	r0, [r5, #8]
    1704:	4a0c      	ldr	r2, [pc, #48]	; (1738 <pm_policy_next_state+0x8c>)
    1706:	46c4      	mov	ip, r8
    1708:	4659      	mov	r1, fp
    170a:	fbe0 c107 	umlal	ip, r1, r0, r7
    170e:	2300      	movs	r3, #0
    1710:	4660      	mov	r0, ip
    1712:	f7fe ffdd 	bl	6d0 <__aeabi_uldivmod>
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
    1716:	f1ba 3fff 	cmp.w	sl, #4294967295
    171a:	d001      	beq.n	1720 <pm_policy_next_state+0x74>
    171c:	4582      	cmp	sl, r0
    171e:	d904      	bls.n	172a <pm_policy_next_state+0x7e>
		if ((ticks == K_TICKS_FOREVER) ||
    1720:	1c72      	adds	r2, r6, #1
    1722:	d0da      	beq.n	16da <pm_policy_next_state+0x2e>
		    (ticks >= (min_residency + exit_latency))) {
    1724:	4448      	add	r0, r9
		if ((ticks == K_TICKS_FOREVER) ||
    1726:	42b0      	cmp	r0, r6
    1728:	d9d7      	bls.n	16da <pm_policy_next_state+0x2e>
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
    172a:	3c01      	subs	r4, #1
    172c:	b224      	sxth	r4, r4
    172e:	e7d1      	b.n	16d4 <pm_policy_next_state+0x28>
    1730:	20000004 	.word	0x20000004
    1734:	000f423f 	.word	0x000f423f
    1738:	000f4240 	.word	0x000f4240

0000173c <pm_state_cpu_get_all>:
	DT_FOREACH_CHILD(DT_PATH(cpus), NUM_CPU_STATES)
};

uint8_t pm_state_cpu_get_all(uint8_t cpu, const struct pm_state_info **states)
{
	if (cpu >= ARRAY_SIZE(cpus_states)) {
    173c:	b908      	cbnz	r0, 1742 <pm_state_cpu_get_all+0x6>
		return 0;
	}

	*states = cpus_states[cpu];
    173e:	4b02      	ldr	r3, [pc, #8]	; (1748 <pm_state_cpu_get_all+0xc>)
    1740:	600b      	str	r3, [r1, #0]

	return states_per_cpu[cpu];
}
    1742:	2000      	movs	r0, #0
    1744:	4770      	bx	lr
    1746:	bf00      	nop
    1748:	000051c8 	.word	0x000051c8

0000174c <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
    174c:	4901      	ldr	r1, [pc, #4]	; (1754 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
    174e:	2210      	movs	r2, #16
	str	r2, [r1]
    1750:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
    1752:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
    1754:	e000ed10 	.word	0xe000ed10

00001758 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
    1758:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
    175a:	4040      	eors	r0, r0
	msr	BASEPRI, r0
    175c:	f380 8811 	msr	BASEPRI, r0
	isb
    1760:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
    1764:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
    1768:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
    176a:	b662      	cpsie	i
	isb
    176c:	f3bf 8f6f 	isb	sy

	bx	lr
    1770:	4770      	bx	lr
    1772:	bf00      	nop

00001774 <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
    1774:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
    1776:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
    1778:	f381 8811 	msr	BASEPRI, r1

	wfe
    177c:	bf20      	wfe

	msr	BASEPRI, r0
    177e:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
    1782:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
    1784:	4770      	bx	lr
    1786:	bf00      	nop

00001788 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    1788:	b243      	sxtb	r3, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    178a:	2b00      	cmp	r3, #0
    178c:	db08      	blt.n	17a0 <arch_irq_enable+0x18>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    178e:	2201      	movs	r2, #1
    1790:	f000 001f 	and.w	r0, r0, #31
    1794:	fa02 f000 	lsl.w	r0, r2, r0
    1798:	095b      	lsrs	r3, r3, #5
    179a:	4a02      	ldr	r2, [pc, #8]	; (17a4 <arch_irq_enable+0x1c>)
    179c:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
    17a0:	4770      	bx	lr
    17a2:	bf00      	nop
    17a4:	e000e100 	.word	0xe000e100

000017a8 <arch_irq_is_enabled>:
	NVIC_DisableIRQ((IRQn_Type)irq);
}

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
    17a8:	4b05      	ldr	r3, [pc, #20]	; (17c0 <arch_irq_is_enabled+0x18>)
    17aa:	0942      	lsrs	r2, r0, #5
    17ac:	f000 001f 	and.w	r0, r0, #31
    17b0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    17b4:	2301      	movs	r3, #1
    17b6:	fa03 f000 	lsl.w	r0, r3, r0
}
    17ba:	4010      	ands	r0, r2
    17bc:	4770      	bx	lr
    17be:	bf00      	nop
    17c0:	e000e100 	.word	0xe000e100

000017c4 <z_arm_irq_priority_set>:
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    17c4:	b243      	sxtb	r3, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
    17c6:	2b00      	cmp	r3, #0
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    17c8:	bfa8      	it	ge
    17ca:	f103 4360 	addge.w	r3, r3, #3758096384	; 0xe0000000
		prio += _IRQ_PRIO_OFFSET;
    17ce:	f101 0101 	add.w	r1, r1, #1
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    17d2:	bfb8      	it	lt
    17d4:	4b06      	ldrlt	r3, [pc, #24]	; (17f0 <z_arm_irq_priority_set+0x2c>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    17d6:	ea4f 1141 	mov.w	r1, r1, lsl #5
    17da:	bfac      	ite	ge
    17dc:	f503 4361 	addge.w	r3, r3, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    17e0:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    17e4:	b2c9      	uxtb	r1, r1
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    17e6:	bfb4      	ite	lt
    17e8:	5419      	strblt	r1, [r3, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    17ea:	f883 1300 	strbge.w	r1, [r3, #768]	; 0x300
}
    17ee:	4770      	bx	lr
    17f0:	e000ed14 	.word	0xe000ed14

000017f4 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
    17f4:	bf30      	wfi
    b z_SysNmiOnReset
    17f6:	f7ff bffd 	b.w	17f4 <z_SysNmiOnReset>
    17fa:	bf00      	nop

000017fc <z_arm_prep_c>:

#define VECTOR_ADDRESS ((uintptr_t)_vector_start)

static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    17fc:	4a0b      	ldr	r2, [pc, #44]	; (182c <z_arm_prep_c+0x30>)
 *
 * This routine prepares for the execution of and runs C code.
 *
 */
void z_arm_prep_c(void)
{
    17fe:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    1800:	4b0b      	ldr	r3, [pc, #44]	; (1830 <z_arm_prep_c+0x34>)
    1802:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    1806:	609a      	str	r2, [r3, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    1808:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    180c:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
    1810:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    1814:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    1818:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
    181c:	f002 f858 	bl	38d0 <z_bss_zero>
	z_data_copy();
    1820:	f002 fd06 	bl	4230 <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
    1824:	f000 f9d0 	bl	1bc8 <z_arm_interrupt_init>
	z_cstart();
    1828:	f002 f896 	bl	3958 <z_cstart>
    182c:	00000000 	.word	0x00000000
    1830:	e000ed00 	.word	0xe000ed00

00001834 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
    1834:	4a09      	ldr	r2, [pc, #36]	; (185c <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
    1836:	490a      	ldr	r1, [pc, #40]	; (1860 <arch_swap+0x2c>)
	_current->arch.basepri = key;
    1838:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
    183a:	6809      	ldr	r1, [r1, #0]
    183c:	6799      	str	r1, [r3, #120]	; 0x78

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    183e:	4909      	ldr	r1, [pc, #36]	; (1864 <arch_swap+0x30>)
	_current->arch.basepri = key;
    1840:	6758      	str	r0, [r3, #116]	; 0x74
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    1842:	684b      	ldr	r3, [r1, #4]
    1844:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    1848:	604b      	str	r3, [r1, #4]
    184a:	2300      	movs	r3, #0
    184c:	f383 8811 	msr	BASEPRI, r3
    1850:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
    1854:	6893      	ldr	r3, [r2, #8]
}
    1856:	6f98      	ldr	r0, [r3, #120]	; 0x78
    1858:	4770      	bx	lr
    185a:	bf00      	nop
    185c:	2000032c 	.word	0x2000032c
    1860:	000052bc 	.word	0x000052bc
    1864:	e000ed00 	.word	0xe000ed00

00001868 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    1868:	4912      	ldr	r1, [pc, #72]	; (18b4 <z_arm_pendsv+0x4c>)
    ldr r2, [r1, #_kernel_offset_to_current]
    186a:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    186c:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
    1870:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
    1872:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    1876:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    187a:	2020      	movs	r0, #32
    msr BASEPRI_MAX, r0
    187c:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
    1880:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
    1884:	4f0c      	ldr	r7, [pc, #48]	; (18b8 <z_arm_pendsv+0x50>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    1886:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
    188a:	69ca      	ldr	r2, [r1, #28]

    str r2, [r1, #_kernel_offset_to_current]
    188c:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
    188e:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
    1890:	6f50      	ldr	r0, [r2, #116]	; 0x74
    movs r3, #0
    1892:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    1894:	6753      	str	r3, [r2, #116]	; 0x74
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    1896:	f380 8811 	msr	BASEPRI, r0
    isb
#endif

#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
    /* Re-program dynamic memory map */
    push {r2,lr}
    189a:	b504      	push	{r2, lr}
    mov r0, r2 /* _current thread */
    189c:	4610      	mov	r0, r2
    bl z_arm_configure_dynamic_mpu_regions
    189e:	f000 fa2f 	bl	1d00 <z_arm_configure_dynamic_mpu_regions>
    pop {r2,lr}
    18a2:	e8bd 4004 	ldmia.w	sp!, {r2, lr}
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    18a6:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
    18aa:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
    18ae:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
    18b2:	4770      	bx	lr
    ldr r1, =_kernel
    18b4:	2000032c 	.word	0x2000032c
    ldr v4, =_SCS_ICSR
    18b8:	e000ed04 	.word	0xe000ed04

000018bc <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
    18bc:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    18c0:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    18c2:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    18c6:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    18ca:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
    18cc:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
    18d0:	2902      	cmp	r1, #2
    beq _oops
    18d2:	d0ff      	beq.n	18d4 <_oops>

000018d4 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
    18d4:	b501      	push	{r0, lr}
    push {r1, r2}
    push {r4-r11}
    mov  r1, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    bl z_do_kernel_oops
    18d6:	f002 ff9b 	bl	4810 <z_do_kernel_oops>
     * the MSP to its value prior to entering the function
     */
    add sp, #40
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    pop {r0, pc}
    18da:	bd01      	pop	{r0, pc}

000018dc <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
    18dc:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
    18e0:	9b00      	ldr	r3, [sp, #0]
    18e2:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->pc &= 0xfffffffe;
    18e6:	490a      	ldr	r1, [pc, #40]	; (1910 <arch_new_thread+0x34>)
	iframe->a3 = (uint32_t)p2;
    18e8:	9b01      	ldr	r3, [sp, #4]
    18ea:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
    18ee:	9b02      	ldr	r3, [sp, #8]
    18f0:	f842 3c14 	str.w	r3, [r2, #-20]
	iframe->pc &= 0xfffffffe;
    18f4:	f021 0101 	bic.w	r1, r1, #1

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
    18f8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    18fc:	f842 3c04 	str.w	r3, [r2, #-4]
	iframe->pc &= 0xfffffffe;
    1900:	f842 1c08 	str.w	r1, [r2, #-8]
		((uintptr_t)iframe - sizeof(struct __fpu_sf));
	memset(iframe, 0, sizeof(struct __fpu_sf));
#endif

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
    1904:	2300      	movs	r3, #0
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
    1906:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
    1908:	6502      	str	r2, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
    190a:	6743      	str	r3, [r0, #116]	; 0x74
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
    190c:	4770      	bx	lr
    190e:	bf00      	nop
    1910:	0000473f 	.word	0x0000473f

00001914 <z_check_thread_stack_fail>:
 *         thread stack corruption, otherwise return 0.
 */
uint32_t z_check_thread_stack_fail(const uint32_t fault_addr, const uint32_t psp)
{
#if defined(CONFIG_MULTITHREADING)
	const struct k_thread *thread = _current;
    1914:	4a09      	ldr	r2, [pc, #36]	; (193c <z_check_thread_stack_fail+0x28>)
{
    1916:	4603      	mov	r3, r0
	const struct k_thread *thread = _current;
    1918:	6890      	ldr	r0, [r2, #8]

	if (thread == NULL) {
    191a:	b170      	cbz	r0, 193a <z_check_thread_stack_fail+0x26>
			return thread->stack_info.start;
		}
	}
#else /* CONFIG_USERSPACE */
#if defined(CONFIG_MULTITHREADING)
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
    191c:	f113 0f16 	cmn.w	r3, #22
    1920:	6e40      	ldr	r0, [r0, #100]	; 0x64
    1922:	d005      	beq.n	1930 <z_check_thread_stack_fail+0x1c>
    1924:	f1a0 0240 	sub.w	r2, r0, #64	; 0x40
    1928:	429a      	cmp	r2, r3
    192a:	d805      	bhi.n	1938 <z_check_thread_stack_fail+0x24>
    192c:	4283      	cmp	r3, r0
    192e:	d203      	bcs.n	1938 <z_check_thread_stack_fail+0x24>
		return (uint32_t)Z_THREAD_STACK_BUFFER(z_main_stack);
	}
#endif
#endif /* CONFIG_USERSPACE */

	return 0;
    1930:	4281      	cmp	r1, r0
    1932:	bf28      	it	cs
    1934:	2000      	movcs	r0, #0
    1936:	4770      	bx	lr
    1938:	2000      	movs	r0, #0
}
    193a:	4770      	bx	lr
    193c:	2000032c 	.word	0x2000032c

00001940 <arch_switch_to_main_thread>:
#endif /* CONFIG_FPU */
}

void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
    1940:	b508      	push	{r3, lr}
	z_arm_prepare_switch_to_main();

	_current = main_thread;
    1942:	4b09      	ldr	r3, [pc, #36]	; (1968 <arch_switch_to_main_thread+0x28>)
    1944:	6098      	str	r0, [r3, #8]
{
    1946:	460d      	mov	r5, r1
    1948:	4614      	mov	r4, r2
#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
	/*
	 * If stack protection is enabled, make sure to set it
	 * before jumping to thread entry function
	 */
	z_arm_configure_dynamic_mpu_regions(main_thread);
    194a:	f000 f9d9 	bl	1d00 <z_arm_configure_dynamic_mpu_regions>

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
    194e:	4620      	mov	r0, r4
    1950:	f385 8809 	msr	PSP, r5
    1954:	2100      	movs	r1, #0
    1956:	b663      	cpsie	if
    1958:	f381 8811 	msr	BASEPRI, r1
    195c:	f3bf 8f6f 	isb	sy
    1960:	2200      	movs	r2, #0
    1962:	2300      	movs	r3, #0
    1964:	f002 feeb 	bl	473e <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
    1968:	2000032c 	.word	0x2000032c

0000196c <_isr_wrapper>:
 *
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
    196c:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
    196e:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    1970:	4a0b      	ldr	r2, [pc, #44]	; (19a0 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    1972:	6990      	ldr	r0, [r2, #24]
	cmp r0, #0
    1974:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
    1976:	bf1e      	ittt	ne
	movne	r1, #0
    1978:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
    197a:	6191      	strne	r1, [r2, #24]
		blne	z_pm_save_idle_exit
    197c:	f003 fa28 	blne	4dd0 <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    1980:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
    1982:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    1986:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    198a:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
    198e:	4905      	ldr	r1, [pc, #20]	; (19a4 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    1990:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    1992:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
    1994:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    1996:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
    199a:	4903      	ldr	r1, [pc, #12]	; (19a8 <_isr_wrapper+0x3c>)
	bx r1
    199c:	4708      	bx	r1
    199e:	0000      	.short	0x0000
	ldr r2, =_kernel
    19a0:	2000032c 	.word	0x2000032c
	ldr r1, =_sw_isr_table
    19a4:	0000503c 	.word	0x0000503c
	ldr r1, =z_arm_int_exit
    19a8:	000019ad 	.word	0x000019ad

000019ac <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
    19ac:	4b04      	ldr	r3, [pc, #16]	; (19c0 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
    19ae:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
    19b0:	69d8      	ldr	r0, [r3, #28]
	cmp r0, r1
    19b2:	4288      	cmp	r0, r1
	beq _EXIT_EXC
    19b4:	d003      	beq.n	19be <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
    19b6:	4903      	ldr	r1, [pc, #12]	; (19c4 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
    19b8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
    19bc:	600a      	str	r2, [r1, #0]

000019be <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
    19be:	4770      	bx	lr
	ldr r3, =_kernel
    19c0:	2000032c 	.word	0x2000032c
	ldr r1, =_SCS_ICSR
    19c4:	e000ed04 	.word	0xe000ed04

000019c8 <mem_manage_fault>:
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
			      bool *recoverable)
{
    19c8:	b538      	push	{r3, r4, r5, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	uint32_t mmfar = -EINVAL;

	PR_FAULT_INFO("***** MPU FAULT *****");

	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    19ca:	4b1c      	ldr	r3, [pc, #112]	; (1a3c <mem_manage_fault+0x74>)
{
    19cc:	4614      	mov	r4, r2
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    19ce:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Stacking error (context area might be"
			" not valid)");
	}
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    19d0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unstacking error");
	}
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    19d2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
{
    19d4:	4605      	mov	r5, r0
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    19d6:	0790      	lsls	r0, r2, #30
    19d8:	d520      	bpl.n	1a1c <mem_manage_fault+0x54>
		 * The MMFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another higher
		 * priority exception might change the MMFAR value.
		 */
		uint32_t temp = SCB->MMFAR;
    19da:	6b58      	ldr	r0, [r3, #52]	; 0x34

		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    19dc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    19de:	0612      	lsls	r2, r2, #24
    19e0:	d51c      	bpl.n	1a1c <mem_manage_fault+0x54>
			mmfar = temp;
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
			if (from_hard_fault != 0) {
    19e2:	b119      	cbz	r1, 19ec <mem_manage_fault+0x24>
				/* clear SCB_MMAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    19e4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    19e6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    19ea:	629a      	str	r2, [r3, #40]	; 0x28
			}
		}
	}
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    19ec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Instruction Access Violation");
	}
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    19ee:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	 * crossed into an area beyond the thread stack.]
	 *
	 * Data Access Violation errors may or may not be caused by
	 * thread stack overflows.
	 */
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    19f0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    19f2:	06d2      	lsls	r2, r2, #27
    19f4:	d415      	bmi.n	1a22 <mem_manage_fault+0x5a>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
    19f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    19f8:	079b      	lsls	r3, r3, #30
    19fa:	d412      	bmi.n	1a22 <mem_manage_fault+0x5a>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    19fc:	2000      	movs	r0, #0
	 * lazy stacking Memory Manage fault. At the time of writing, this
	 * can happen when printing.  If that's true, we should clear the
	 * pending flag in addition to the clearing the reason for the fault
	 */
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    19fe:	4b0f      	ldr	r3, [pc, #60]	; (1a3c <mem_manage_fault+0x74>)
    1a00:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1a02:	0692      	lsls	r2, r2, #26
		SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTPENDED_Msk;
    1a04:	bf42      	ittt	mi
    1a06:	6a5a      	ldrmi	r2, [r3, #36]	; 0x24
    1a08:	f422 5200 	bicmi.w	r2, r2, #8192	; 0x2000
    1a0c:	625a      	strmi	r2, [r3, #36]	; 0x24
	}
#endif /* CONFIG_ARMV7_M_ARMV8_M_FP */

	/* clear MMFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    1a0e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1a10:	f042 02ff 	orr.w	r2, r2, #255	; 0xff
    1a14:	629a      	str	r2, [r3, #40]	; 0x28

	/* Assess whether system shall ignore/recover from this MPU fault. */
	*recoverable = memory_fault_recoverable(esf, true);
    1a16:	2300      	movs	r3, #0
    1a18:	7023      	strb	r3, [r4, #0]

	return reason;
}
    1a1a:	bd38      	pop	{r3, r4, r5, pc}
	uint32_t mmfar = -EINVAL;
    1a1c:	f06f 0015 	mvn.w	r0, #21
    1a20:	e7e4      	b.n	19ec <mem_manage_fault+0x24>
		if (SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) {
    1a22:	4b06      	ldr	r3, [pc, #24]	; (1a3c <mem_manage_fault+0x74>)
    1a24:	685b      	ldr	r3, [r3, #4]
    1a26:	0519      	lsls	r1, r3, #20
    1a28:	d5e8      	bpl.n	19fc <mem_manage_fault+0x34>
			uint32_t min_stack_ptr = z_check_thread_stack_fail(mmfar,
    1a2a:	4629      	mov	r1, r5
    1a2c:	f7ff ff72 	bl	1914 <z_check_thread_stack_fail>
			if (min_stack_ptr) {
    1a30:	2800      	cmp	r0, #0
    1a32:	d0e3      	beq.n	19fc <mem_manage_fault+0x34>
  \details Assigns the given value to the Process Stack Pointer (PSP).
  \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
    1a34:	f380 8809 	msr	PSP, r0
				reason = K_ERR_STACK_CHK_FAIL;
    1a38:	2002      	movs	r0, #2
    1a3a:	e7e0      	b.n	19fe <mem_manage_fault+0x36>
    1a3c:	e000ed00 	.word	0xe000ed00

00001a40 <bus_fault.constprop.0>:
{
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** BUS FAULT *****");

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    1a40:	4b0d      	ldr	r3, [pc, #52]	; (1a78 <bus_fault.constprop.0+0x38>)
    1a42:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Stacking error");
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    1a44:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unstacking error");
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    1a46:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1a48:	0592      	lsls	r2, r2, #22
    1a4a:	d508      	bpl.n	1a5e <bus_fault.constprop.0+0x1e>
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
    1a4c:	6b9a      	ldr	r2, [r3, #56]	; 0x38

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    1a4e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1a50:	0412      	lsls	r2, r2, #16
    1a52:	d504      	bpl.n	1a5e <bus_fault.constprop.0+0x1e>
			PR_EXC("  BFAR Address: 0x%x", bfar);
			if (from_hard_fault != 0) {
    1a54:	b118      	cbz	r0, 1a5e <bus_fault.constprop.0+0x1e>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    1a56:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1a58:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
    1a5c:	629a      	str	r2, [r3, #40]	; 0x28
			}
		}
	}
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    1a5e:	4b06      	ldr	r3, [pc, #24]	; (1a78 <bus_fault.constprop.0+0x38>)
    1a60:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Imprecise data bus error");
	}
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    1a62:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1a64:	05d2      	lsls	r2, r2, #23
		PR_FAULT_INFO("  Instruction bus error");
#if !defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	}
#else
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    1a66:	bf58      	it	pl
    1a68:	6a9a      	ldrpl	r2, [r3, #40]	; 0x28
		SYSMPU->CESR &= ~sperr;
	}
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    1a6a:	6a9a      	ldr	r2, [r3, #40]	; 0x28

	*recoverable = memory_fault_recoverable(esf, true);
    1a6c:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    1a6e:	f442 427f 	orr.w	r2, r2, #65280	; 0xff00
    1a72:	629a      	str	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    1a74:	7008      	strb	r0, [r1, #0]

	return reason;
}
    1a76:	4770      	bx	lr
    1a78:	e000ed00 	.word	0xe000ed00

00001a7c <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
    1a7c:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    1a7e:	4b47      	ldr	r3, [pc, #284]	; (1b9c <z_arm_fault+0x120>)
    1a80:	685b      	ldr	r3, [r3, #4]
{
    1a82:	b08b      	sub	sp, #44	; 0x2c
    1a84:	460d      	mov	r5, r1
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    1a86:	f3c3 0308 	ubfx	r3, r3, #0, #9
    1a8a:	2600      	movs	r6, #0
    1a8c:	f386 8811 	msr	BASEPRI, r6
    1a90:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
    1a94:	f002 417f 	and.w	r1, r2, #4278190080	; 0xff000000
    1a98:	f1b1 4f7f 	cmp.w	r1, #4278190080	; 0xff000000
    1a9c:	d111      	bne.n	1ac2 <z_arm_fault+0x46>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
    1a9e:	f002 010c 	and.w	r1, r2, #12
    1aa2:	2908      	cmp	r1, #8
    1aa4:	d00d      	beq.n	1ac2 <z_arm_fault+0x46>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    1aa6:	0712      	lsls	r2, r2, #28
    1aa8:	d401      	bmi.n	1aae <z_arm_fault+0x32>
			ptr_esf = (z_arch_esf_t *)msp;
    1aaa:	4605      	mov	r5, r0
			*nested_exc = true;
    1aac:	2601      	movs	r6, #1
	*recoverable = false;
    1aae:	2200      	movs	r2, #0
	switch (fault) {
    1ab0:	3b03      	subs	r3, #3
	*recoverable = false;
    1ab2:	f88d 2007 	strb.w	r2, [sp, #7]
	switch (fault) {
    1ab6:	2b03      	cmp	r3, #3
    1ab8:	d854      	bhi.n	1b64 <z_arm_fault+0xe8>
    1aba:	e8df f003 	tbb	[pc, r3]
    1abe:	5504      	.short	0x5504
    1ac0:	5d59      	.short	0x5d59
		return NULL;
    1ac2:	4635      	mov	r5, r6
    1ac4:	e7f3      	b.n	1aae <z_arm_fault+0x32>
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    1ac6:	4b35      	ldr	r3, [pc, #212]	; (1b9c <z_arm_fault+0x120>)
    1ac8:	6adc      	ldr	r4, [r3, #44]	; 0x2c
    1aca:	f014 0402 	ands.w	r4, r4, #2
    1ace:	d149      	bne.n	1b64 <z_arm_fault+0xe8>
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
    1ad0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    1ad2:	2a00      	cmp	r2, #0
    1ad4:	db16      	blt.n	1b04 <z_arm_fault+0x88>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
    1ad6:	6adc      	ldr	r4, [r3, #44]	; 0x2c
    1ad8:	f014 4480 	ands.w	r4, r4, #1073741824	; 0x40000000
    1adc:	d012      	beq.n	1b04 <z_arm_fault+0x88>
	uint16_t fault_insn = *(ret_addr - 1);
    1ade:	69aa      	ldr	r2, [r5, #24]
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
    1ae0:	f832 1c02 	ldrh.w	r1, [r2, #-2]
    1ae4:	f64d 7202 	movw	r2, #57090	; 0xdf02
    1ae8:	4291      	cmp	r1, r2
    1aea:	d00a      	beq.n	1b02 <z_arm_fault+0x86>
		} else if ((SCB->CFSR & SCB_CFSR_MEMFAULTSR_Msk) != 0) {
    1aec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1aee:	b2d2      	uxtb	r2, r2
    1af0:	b30a      	cbz	r2, 1b36 <z_arm_fault+0xba>
			reason = mem_manage_fault(esf, 1, recoverable);
    1af2:	f10d 0207 	add.w	r2, sp, #7
    1af6:	2101      	movs	r1, #1
		reason = mem_manage_fault(esf, 0, recoverable);
    1af8:	4628      	mov	r0, r5
    1afa:	f7ff ff65 	bl	19c8 <mem_manage_fault>
		reason = bus_fault(esf, 0, recoverable);
    1afe:	4604      	mov	r4, r0
		break;
    1b00:	e000      	b.n	1b04 <z_arm_fault+0x88>
			reason = esf->basic.r0;
    1b02:	682c      	ldr	r4, [r5, #0]
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
    1b04:	f89d 3007 	ldrb.w	r3, [sp, #7]
    1b08:	b99b      	cbnz	r3, 1b32 <z_arm_fault+0xb6>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
    1b0a:	2220      	movs	r2, #32
    1b0c:	4629      	mov	r1, r5
    1b0e:	a802      	add	r0, sp, #8
    1b10:	f002 fea7 	bl	4862 <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
    1b14:	9b09      	ldr	r3, [sp, #36]	; 0x24
    1b16:	2e00      	cmp	r6, #0
    1b18:	d03b      	beq.n	1b92 <z_arm_fault+0x116>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
    1b1a:	f3c3 0208 	ubfx	r2, r3, #0, #9
    1b1e:	b922      	cbnz	r2, 1b2a <z_arm_fault+0xae>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
    1b20:	ea6f 2353 	mvn.w	r3, r3, lsr #9
    1b24:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    1b28:	9309      	str	r3, [sp, #36]	; 0x24
	}

	z_arm_fatal_error(reason, &esf_copy);
    1b2a:	a902      	add	r1, sp, #8
    1b2c:	4620      	mov	r0, r4
    1b2e:	f002 fe6d 	bl	480c <z_arm_fatal_error>
}
    1b32:	b00b      	add	sp, #44	; 0x2c
    1b34:	bdf0      	pop	{r4, r5, r6, r7, pc}
		} else if ((SCB->CFSR & SCB_CFSR_BUSFAULTSR_Msk) != 0) {
    1b36:	6a9f      	ldr	r7, [r3, #40]	; 0x28
    1b38:	f417 477f 	ands.w	r7, r7, #65280	; 0xff00
    1b3c:	d005      	beq.n	1b4a <z_arm_fault+0xce>
			reason = bus_fault(esf, 1, recoverable);
    1b3e:	f10d 0107 	add.w	r1, sp, #7
    1b42:	2001      	movs	r0, #1
		reason = bus_fault(esf, 0, recoverable);
    1b44:	f7ff ff7c 	bl	1a40 <bus_fault.constprop.0>
    1b48:	e7d9      	b.n	1afe <z_arm_fault+0x82>
		} else if ((SCB->CFSR & SCB_CFSR_USGFAULTSR_Msk) != 0) {
    1b4a:	6a9c      	ldr	r4, [r3, #40]	; 0x28
    1b4c:	4914      	ldr	r1, [pc, #80]	; (1ba0 <z_arm_fault+0x124>)
    1b4e:	400c      	ands	r4, r1
    1b50:	d0d8      	beq.n	1b04 <z_arm_fault+0x88>
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    1b52:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    1b54:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    1b56:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    1b58:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    1b5a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    1b5c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    1b5e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1b60:	430a      	orrs	r2, r1
    1b62:	629a      	str	r2, [r3, #40]	; 0x28
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    1b64:	2400      	movs	r4, #0
    1b66:	e7cd      	b.n	1b04 <z_arm_fault+0x88>
		reason = mem_manage_fault(esf, 0, recoverable);
    1b68:	f10d 0207 	add.w	r2, sp, #7
    1b6c:	2100      	movs	r1, #0
    1b6e:	e7c3      	b.n	1af8 <z_arm_fault+0x7c>
		reason = bus_fault(esf, 0, recoverable);
    1b70:	f10d 0107 	add.w	r1, sp, #7
    1b74:	2000      	movs	r0, #0
    1b76:	e7e5      	b.n	1b44 <z_arm_fault+0xc8>
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    1b78:	4b08      	ldr	r3, [pc, #32]	; (1b9c <z_arm_fault+0x120>)
    1b7a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    1b7c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    1b7e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    1b80:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    1b82:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    1b84:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    1b86:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1b88:	ea6f 4202 	mvn.w	r2, r2, lsl #16
    1b8c:	ea6f 4212 	mvn.w	r2, r2, lsr #16
    1b90:	e7e7      	b.n	1b62 <z_arm_fault+0xe6>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    1b92:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
    1b96:	f023 0301 	bic.w	r3, r3, #1
    1b9a:	e7c5      	b.n	1b28 <z_arm_fault+0xac>
    1b9c:	e000ed00 	.word	0xe000ed00
    1ba0:	ffff0000 	.word	0xffff0000

00001ba4 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    1ba4:	4a02      	ldr	r2, [pc, #8]	; (1bb0 <z_arm_fault_init+0xc>)
    1ba6:	6953      	ldr	r3, [r2, #20]
    1ba8:	f043 0310 	orr.w	r3, r3, #16
    1bac:	6153      	str	r3, [r2, #20]
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
#ifdef CONFIG_TRAP_UNALIGNED_ACCESS
	SCB->CCR |= SCB_CCR_UNALIGN_TRP_Msk;
#endif /* CONFIG_TRAP_UNALIGNED_ACCESS */
}
    1bae:	4770      	bx	lr
    1bb0:	e000ed00 	.word	0xe000ed00

00001bb4 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
    1bb4:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
    1bb8:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
    1bbc:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
    1bbe:	4672      	mov	r2, lr
	bl z_arm_fault
    1bc0:	f7ff ff5c 	bl	1a7c <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
    1bc4:	bd01      	pop	{r0, pc}
    1bc6:	bf00      	nop

00001bc8 <z_arm_interrupt_init>:
    1bc8:	4804      	ldr	r0, [pc, #16]	; (1bdc <z_arm_interrupt_init+0x14>)
 *
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
    1bca:	2300      	movs	r3, #0
    1bcc:	2120      	movs	r1, #32
    1bce:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    1bd0:	3301      	adds	r3, #1
    1bd2:	2b27      	cmp	r3, #39	; 0x27
    1bd4:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
    1bd8:	d1f9      	bne.n	1bce <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
    1bda:	4770      	bx	lr
    1bdc:	e000e100 	.word	0xe000e100

00001be0 <__start>:
    strb r0, [r1]
#endif /* CONFIG_DEBUG_THREAD_INFO */

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
    /* Reset CONTROL register */
    movs.n r0, #0
    1be0:	2000      	movs	r0, #0
    msr CONTROL, r0
    1be2:	f380 8814 	msr	CONTROL, r0
    isb
    1be6:	f3bf 8f6f 	isb	sy
#if defined(CONFIG_PM_S2RAM)
    bl arch_pm_s2ram_resume
#endif /* CONFIG_PM_S2RAM */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_arm_platform_init
    1bea:	f7ff fc79 	bl	14e0 <z_arm_platform_init>
#endif

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
#if defined(CONFIG_CPU_HAS_ARM_MPU)
    /* Disable MPU */
    movs.n r0, #0
    1bee:	2000      	movs	r0, #0
    ldr r1, =_SCS_MPU_CTRL
    1bf0:	490d      	ldr	r1, [pc, #52]	; (1c28 <__start+0x48>)
    str r0, [r1]
    1bf2:	6008      	str	r0, [r1, #0]
    dsb
    1bf4:	f3bf 8f4f 	dsb	sy
#endif /* CONFIG_CPU_HAS_ARM_MPU */
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    1bf8:	480c      	ldr	r0, [pc, #48]	; (1c2c <__start+0x4c>)
    msr msp, r0
    1bfa:	f380 8808 	msr	MSP, r0

    /* Initialize core architecture registers and system blocks */
    bl z_arm_init_arch_hw_at_boot
    1bfe:	f000 f82b 	bl	1c58 <z_arm_init_arch_hw_at_boot>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    1c02:	2020      	movs	r0, #32
    msr BASEPRI, r0
    1c04:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
    1c08:	4809      	ldr	r0, [pc, #36]	; (1c30 <__start+0x50>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
    1c0a:	f44f 6104 	mov.w	r1, #2112	; 0x840
    adds r0, r0, r1
    1c0e:	1840      	adds	r0, r0, r1
    msr PSP, r0
    1c10:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
    1c14:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
    1c18:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
    1c1a:	4308      	orrs	r0, r1
    msr CONTROL, r0
    1c1c:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
    1c20:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
    1c24:	f7ff fdea 	bl	17fc <z_arm_prep_c>
    ldr r1, =_SCS_MPU_CTRL
    1c28:	e000ed94 	.word	0xe000ed94
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    1c2c:	20000b80 	.word	0x20000b80
    ldr r0, =z_interrupt_stacks
    1c30:	20000d40 	.word	0x20000d40

00001c34 <z_arm_clear_arm_mpu_config>:
void z_arm_clear_arm_mpu_config(void)
{
	int i;

	int num_regions =
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);
    1c34:	4907      	ldr	r1, [pc, #28]	; (1c54 <z_arm_clear_arm_mpu_config+0x20>)
    1c36:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90

	for (i = 0; i < num_regions; i++) {
    1c3a:	2300      	movs	r3, #0
	int num_regions =
    1c3c:	f3c2 2207 	ubfx	r2, r2, #8, #8
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegion(uint32_t rnr)
{
  MPU->RNR = rnr;
  MPU->RASR = 0U;
    1c40:	4618      	mov	r0, r3
	for (i = 0; i < num_regions; i++) {
    1c42:	4293      	cmp	r3, r2
    1c44:	d100      	bne.n	1c48 <z_arm_clear_arm_mpu_config+0x14>
		ARM_MPU_ClrRegion(i);
	}
}
    1c46:	4770      	bx	lr
  MPU->RNR = rnr;
    1c48:	f8c1 3098 	str.w	r3, [r1, #152]	; 0x98
  MPU->RASR = 0U;
    1c4c:	f8c1 00a0 	str.w	r0, [r1, #160]	; 0xa0
	for (i = 0; i < num_regions; i++) {
    1c50:	3301      	adds	r3, #1
    1c52:	e7f6      	b.n	1c42 <z_arm_clear_arm_mpu_config+0xe>
    1c54:	e000ed00 	.word	0xe000ed00

00001c58 <z_arm_init_arch_hw_at_boot>:
 * This routine resets Cortex-M system control block
 * components and core registers.
 *
 */
void z_arm_init_arch_hw_at_boot(void)
{
    1c58:	b508      	push	{r3, lr}
  __ASM volatile ("cpsid i" : : : "memory");
    1c5a:	b672      	cpsid	i
  \details Assigns the given value to the Fault Mask register.
  \param [in]    faultMask  Fault Mask value to set
 */
__STATIC_FORCEINLINE void __set_FAULTMASK(uint32_t faultMask)
{
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
    1c5c:	2300      	movs	r3, #0
    1c5e:	f383 8813 	msr	FAULTMASK, r3

	/* Initialize System Control Block components */

#if defined(CONFIG_CPU_HAS_ARM_MPU) || defined(CONFIG_CPU_HAS_NXP_MPU)
	/* Clear MPU region configuration */
	z_arm_clear_arm_mpu_config();
    1c62:	f7ff ffe7 	bl	1c34 <z_arm_clear_arm_mpu_config>
#endif /* CONFIG_CPU_HAS_ARM_MPU */

	/* Disable NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
		NVIC->ICER[i] = 0xFFFFFFFF;
    1c66:	4b14      	ldr	r3, [pc, #80]	; (1cb8 <z_arm_init_arch_hw_at_boot+0x60>)
    1c68:	f04f 32ff 	mov.w	r2, #4294967295
    1c6c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    1c70:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    1c74:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    1c78:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    1c7c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    1c80:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    1c84:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    1c88:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
	}
	/* Clear pending NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
		NVIC->ICPR[i] = 0xFFFFFFFF;
    1c8c:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    1c90:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
    1c94:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
    1c98:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
    1c9c:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
    1ca0:	f8c3 2194 	str.w	r2, [r3, #404]	; 0x194
    1ca4:	f8c3 2198 	str.w	r2, [r3, #408]	; 0x198
    1ca8:	f8c3 219c 	str.w	r2, [r3, #412]	; 0x19c
  __ASM volatile ("cpsie i" : : : "memory");
    1cac:	b662      	cpsie	i
  __ASM volatile ("dsb 0xF":::"memory");
    1cae:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1cb2:	f3bf 8f6f 	isb	sy
	/* Restore Interrupts */
	__enable_irq();

	__DSB();
	__ISB();
}
    1cb6:	bd08      	pop	{r3, pc}
    1cb8:	e000e100 	.word	0xe000e100

00001cbc <z_impl_k_thread_abort>:
#include <zephyr/wait_q.h>
#include <zephyr/sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
	if (_current == thread) {
    1cbc:	4b08      	ldr	r3, [pc, #32]	; (1ce0 <z_impl_k_thread_abort+0x24>)
    1cbe:	689b      	ldr	r3, [r3, #8]
    1cc0:	4283      	cmp	r3, r0
    1cc2:	d10b      	bne.n	1cdc <z_impl_k_thread_abort+0x20>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    1cc4:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
    1cc8:	b143      	cbz	r3, 1cdc <z_impl_k_thread_abort+0x20>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    1cca:	4b06      	ldr	r3, [pc, #24]	; (1ce4 <z_impl_k_thread_abort+0x28>)
    1ccc:	685a      	ldr	r2, [r3, #4]
    1cce:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
    1cd2:	605a      	str	r2, [r3, #4]
			/* Clear any system calls that may be pending
			 * as they have a higher priority than the PendSV
			 * handler and will check the stack of the thread
			 * being aborted.
			 */
			SCB->SHCSR &= ~SCB_SHCSR_SVCALLPENDED_Msk;
    1cd4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    1cd6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
    1cda:	625a      	str	r2, [r3, #36]	; 0x24
		}
	}

	z_thread_abort(thread);
    1cdc:	f002 ba48 	b.w	4170 <z_thread_abort>
    1ce0:	2000032c 	.word	0x2000032c
    1ce4:	e000ed00 	.word	0xe000ed00

00001ce8 <z_arm_configure_static_mpu_regions>:
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    1ce8:	4b02      	ldr	r3, [pc, #8]	; (1cf4 <z_arm_configure_static_mpu_regions+0xc>)
    1cea:	4a03      	ldr	r2, [pc, #12]	; (1cf8 <z_arm_configure_static_mpu_regions+0x10>)
    1cec:	4803      	ldr	r0, [pc, #12]	; (1cfc <z_arm_configure_static_mpu_regions+0x14>)
    1cee:	2101      	movs	r1, #1
    1cf0:	f000 b86e 	b.w	1dd0 <arm_core_mpu_configure_static_mpu_regions>
    1cf4:	20010000 	.word	0x20010000
    1cf8:	20000000 	.word	0x20000000
    1cfc:	000051c8 	.word	0x000051c8

00001d00 <z_arm_configure_dynamic_mpu_regions>:
#endif /* CONFIG_USERSPACE */
	{
		/* A supervisor thread only has the normal thread stack to
		 * protect with a stack guard.
		 */
		guard_start = thread->stack_info.start - guard_size;
    1d00:	6e42      	ldr	r2, [r0, #100]	; 0x64
	}

	__ASSERT(region_num < _MAX_DYNAMIC_MPU_REGIONS_NUM,
		"Out-of-bounds error for dynamic region map.");

	dynamic_regions[region_num].start = guard_start;
    1d02:	4b05      	ldr	r3, [pc, #20]	; (1d18 <z_arm_configure_dynamic_mpu_regions+0x18>)
		guard_start = thread->stack_info.start - guard_size;
    1d04:	3a40      	subs	r2, #64	; 0x40
	dynamic_regions[region_num].start = guard_start;
    1d06:	601a      	str	r2, [r3, #0]
	dynamic_regions[region_num].size = guard_size;
	dynamic_regions[region_num].attr = K_MEM_PARTITION_P_RO_U_NA;
    1d08:	4a04      	ldr	r2, [pc, #16]	; (1d1c <z_arm_configure_dynamic_mpu_regions+0x1c>)
    1d0a:	2140      	movs	r1, #64	; 0x40
    1d0c:	e9c3 1201 	strd	r1, r2, [r3, #4]

	/* Configure the dynamic MPU regions */
#ifdef CONFIG_AARCH32_ARMV8_R
	arm_core_mpu_disable();
#endif
	arm_core_mpu_configure_dynamic_mpu_regions(dynamic_regions,
    1d10:	4618      	mov	r0, r3
    1d12:	2101      	movs	r1, #1
    1d14:	f000 b866 	b.w	1de4 <arm_core_mpu_configure_dynamic_mpu_regions>
    1d18:	200001ec 	.word	0x200001ec
    1d1c:	150b0000 	.word	0x150b0000

00001d20 <mpu_configure_regions>:
 * sanity check of the memory regions to be programmed.
 */
static int mpu_configure_regions(const struct z_arm_mpu_partition
	regions[], uint8_t regions_num, uint8_t start_reg_index,
	bool do_sanity_check)
{
    1d20:	b5f0      	push	{r4, r5, r6, r7, lr}
#endif /* CPU_CORTEX_M0PLUS | CPU_CORTEX_M3 | CPU_CORTEX_M4 */
}

static inline void set_region_number(uint32_t index)
{
	MPU->RNR = index;
    1d22:	4f1f      	ldr	r7, [pc, #124]	; (1da0 <mpu_configure_regions+0x80>)
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
    1d24:	2600      	movs	r6, #0
    1d26:	428e      	cmp	r6, r1
    1d28:	db01      	blt.n	1d2e <mpu_configure_regions+0xe>
		/* Increment number of programmed MPU indices. */
		reg_index++;
	}

	return reg_index;
}
    1d2a:	4610      	mov	r0, r2
    1d2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (regions[i].size == 0U) {
    1d2e:	6844      	ldr	r4, [r0, #4]
    1d30:	b39c      	cbz	r4, 1d9a <mpu_configure_regions+0x7a>
		if (do_sanity_check &&
    1d32:	b153      	cbz	r3, 1d4a <mpu_configure_regions+0x2a>
	 * and greater or equal to the minimum
	 * MPU region size. Start address of the
	 * partition must align with size.
	 */
	int partition_is_valid =
		((part->size & (part->size - 1U)) == 0U)
    1d34:	f104 3cff 	add.w	ip, r4, #4294967295
		&&
		(part->size >= CONFIG_ARM_MPU_REGION_MIN_ALIGN_AND_SIZE)
		&&
    1d38:	ea14 0f0c 	tst.w	r4, ip
    1d3c:	d118      	bne.n	1d70 <mpu_configure_regions+0x50>
		&&
    1d3e:	2c1f      	cmp	r4, #31
    1d40:	d916      	bls.n	1d70 <mpu_configure_regions+0x50>
		((part->start & (part->size - 1U)) == 0U);
    1d42:	6805      	ldr	r5, [r0, #0]
		&&
    1d44:	ea1c 0f05 	tst.w	ip, r5
    1d48:	d112      	bne.n	1d70 <mpu_configure_regions+0x50>
 * to that power-of-two value.
 */
static inline uint32_t size_to_mpu_rasr_size(uint32_t size)
{
	/* The minimal supported region size is 32 bytes */
	if (size <= 32U) {
    1d4a:	2c20      	cmp	r4, #32
	region_conf.base = new_region->start;
    1d4c:	6805      	ldr	r5, [r0, #0]
#if defined(CONFIG_CPU_AARCH32_CORTEX_R)
	(void) size;

	p_attr->rasr = attr->rasr_attr;
#else
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
    1d4e:	f8d0 c008 	ldr.w	ip, [r0, #8]
		reg_index = mpu_configure_region(reg_index, &regions[i]);
    1d52:	b2d2      	uxtb	r2, r2
	if (size <= 32U) {
    1d54:	d90f      	bls.n	1d76 <mpu_configure_regions+0x56>
	if (size > (1UL << 31)) {
    1d56:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
    1d5a:	d80e      	bhi.n	1d7a <mpu_configure_regions+0x5a>
	return ((32 - __builtin_clz(size - 1U) - 2 + 1) << MPU_RASR_SIZE_Pos) &
    1d5c:	3c01      	subs	r4, #1
    1d5e:	fab4 f484 	clz	r4, r4
    1d62:	f1c4 041f 	rsb	r4, r4, #31
    1d66:	0064      	lsls	r4, r4, #1
	if (index > (get_num_regions() - 1U)) {
    1d68:	2a07      	cmp	r2, #7
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
    1d6a:	ea4c 0404 	orr.w	r4, ip, r4
    1d6e:	d906      	bls.n	1d7e <mpu_configure_regions+0x5e>
			return -EINVAL;
    1d70:	f06f 0215 	mvn.w	r2, #21
    1d74:	e7d9      	b.n	1d2a <mpu_configure_regions+0xa>
		return REGION_32B;
    1d76:	2408      	movs	r4, #8
    1d78:	e7f6      	b.n	1d68 <mpu_configure_regions+0x48>
		return REGION_4G;
    1d7a:	243e      	movs	r4, #62	; 0x3e
    1d7c:	e7f4      	b.n	1d68 <mpu_configure_regions+0x48>
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    1d7e:	f025 051f 	bic.w	r5, r5, #31
				| MPU_RBAR_VALID_Msk | index;
    1d82:	4315      	orrs	r5, r2
    1d84:	f045 0510 	orr.w	r5, r5, #16
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    1d88:	f044 0401 	orr.w	r4, r4, #1
    1d8c:	f8c7 2098 	str.w	r2, [r7, #152]	; 0x98
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    1d90:	f8c7 509c 	str.w	r5, [r7, #156]	; 0x9c
		reg_index++;
    1d94:	3201      	adds	r2, #1
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    1d96:	f8c7 40a0 	str.w	r4, [r7, #160]	; 0xa0
	for (i = 0; i < regions_num; i++) {
    1d9a:	3601      	adds	r6, #1
    1d9c:	300c      	adds	r0, #12
    1d9e:	e7c2      	b.n	1d26 <mpu_configure_regions+0x6>
    1da0:	e000ed00 	.word	0xe000ed00

00001da4 <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
    1da4:	4b04      	ldr	r3, [pc, #16]	; (1db8 <arm_core_mpu_enable+0x14>)
    1da6:	2205      	movs	r2, #5
    1da8:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  __ASM volatile ("dsb 0xF":::"memory");
    1dac:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1db0:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
    1db4:	4770      	bx	lr
    1db6:	bf00      	nop
    1db8:	e000ed00 	.word	0xe000ed00

00001dbc <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
    1dbc:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
    1dc0:	4b02      	ldr	r3, [pc, #8]	; (1dcc <arm_core_mpu_disable+0x10>)
    1dc2:	2200      	movs	r2, #0
    1dc4:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
    1dc8:	4770      	bx	lr
    1dca:	bf00      	nop
    1dcc:	e000ed00 	.word	0xe000ed00

00001dd0 <arm_core_mpu_configure_static_mpu_regions>:
 * @brief configure fixed (static) MPU regions.
 */
void arm_core_mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_start, const uint32_t background_area_end)
{
    1dd0:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
    1dd2:	4c03      	ldr	r4, [pc, #12]	; (1de0 <arm_core_mpu_configure_static_mpu_regions+0x10>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
    1dd4:	2301      	movs	r3, #1
    1dd6:	7822      	ldrb	r2, [r4, #0]
    1dd8:	f7ff ffa2 	bl	1d20 <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
    1ddc:	7020      	strb	r0, [r4, #0]
					       background_area_start, background_area_end) == -EINVAL) {

		__ASSERT(0, "Configuring %u static MPU regions failed\n",
			regions_num);
	}
}
    1dde:	bd10      	pop	{r4, pc}
    1de0:	20000364 	.word	0x20000364

00001de4 <arm_core_mpu_configure_dynamic_mpu_regions>:
/**
 * @brief configure dynamic MPU regions.
 */
void arm_core_mpu_configure_dynamic_mpu_regions(const struct z_arm_mpu_partition
	dynamic_regions[], uint8_t regions_num)
{
    1de4:	b508      	push	{r3, lr}

	/* In ARMv7-M architecture the dynamic regions are
	 * programmed on top of existing SRAM region configuration.
	 */

	mpu_reg_index = mpu_configure_regions(dynamic_regions,
    1de6:	4a09      	ldr	r2, [pc, #36]	; (1e0c <arm_core_mpu_configure_dynamic_mpu_regions+0x28>)
    1de8:	2300      	movs	r3, #0
    1dea:	7812      	ldrb	r2, [r2, #0]
    1dec:	f7ff ff98 	bl	1d20 <mpu_configure_regions>
		regions_num, mpu_reg_index, false);

	if (mpu_reg_index != -EINVAL) {
    1df0:	f110 0f16 	cmn.w	r0, #22
    1df4:	d002      	beq.n	1dfc <arm_core_mpu_configure_dynamic_mpu_regions+0x18>
  MPU->RNR = rnr;
    1df6:	4a06      	ldr	r2, [pc, #24]	; (1e10 <arm_core_mpu_configure_dynamic_mpu_regions+0x2c>)

		/* Disable the non-programmed MPU regions. */
		for (int i = mpu_reg_index; i < get_num_regions(); i++) {
    1df8:	2807      	cmp	r0, #7
    1dfa:	dd00      	ble.n	1dfe <arm_core_mpu_configure_dynamic_mpu_regions+0x1a>
		== -EINVAL) {

		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
			regions_num);
	}
}
    1dfc:	bd08      	pop	{r3, pc}
    1dfe:	f8c2 0098 	str.w	r0, [r2, #152]	; 0x98
  MPU->RASR = 0U;
    1e02:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
    1e06:	3001      	adds	r0, #1
    1e08:	e7f6      	b.n	1df8 <arm_core_mpu_configure_dynamic_mpu_regions+0x14>
    1e0a:	bf00      	nop
    1e0c:	20000364 	.word	0x20000364
    1e10:	e000ed00 	.word	0xe000ed00

00001e14 <z_arm_mpu_init>:
 */
int z_arm_mpu_init(void)
{
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
    1e14:	4914      	ldr	r1, [pc, #80]	; (1e68 <z_arm_mpu_init+0x54>)
    1e16:	6808      	ldr	r0, [r1, #0]
    1e18:	2808      	cmp	r0, #8
{
    1e1a:	b510      	push	{r4, lr}
	if (mpu_config.num_regions > get_num_regions()) {
    1e1c:	d821      	bhi.n	1e62 <z_arm_mpu_init+0x4e>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
    1e1e:	f7ff ffcd 	bl	1dbc <arm_core_mpu_disable>
    1e22:	4c12      	ldr	r4, [pc, #72]	; (1e6c <z_arm_mpu_init+0x58>)
    1e24:	6849      	ldr	r1, [r1, #4]

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    1e26:	2200      	movs	r2, #0
    1e28:	4290      	cmp	r0, r2
    1e2a:	f101 010c 	add.w	r1, r1, #12
    1e2e:	d105      	bne.n	1e3c <z_arm_mpu_init+0x28>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
    1e30:	4b0f      	ldr	r3, [pc, #60]	; (1e70 <z_arm_mpu_init+0x5c>)
    1e32:	7018      	strb	r0, [r3, #0]


	arm_core_mpu_enable();
    1e34:	f7ff ffb6 	bl	1da4 <arm_core_mpu_enable>
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
    1e38:	2000      	movs	r0, #0
}
    1e3a:	bd10      	pop	{r4, pc}
    1e3c:	f8c4 2098 	str.w	r2, [r4, #152]	; 0x98
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    1e40:	f851 3c0c 	ldr.w	r3, [r1, #-12]
    1e44:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
    1e48:	4313      	orrs	r3, r2
    1e4a:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    1e4e:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    1e52:	f851 3c04 	ldr.w	r3, [r1, #-4]
    1e56:	f043 0301 	orr.w	r3, r3, #1
    1e5a:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    1e5e:	3201      	adds	r2, #1
    1e60:	e7e2      	b.n	1e28 <z_arm_mpu_init+0x14>
		return -1;
    1e62:	f04f 30ff 	mov.w	r0, #4294967295
    1e66:	e7e8      	b.n	1e3a <z_arm_mpu_init+0x26>
    1e68:	000051d4 	.word	0x000051d4
    1e6c:	e000ed00 	.word	0xe000ed00
    1e70:	20000364 	.word	0x20000364

00001e74 <__stdout_hook_install>:

static int (*_stdout_hook)(int c) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int c))
{
	_stdout_hook = hook;
    1e74:	4b01      	ldr	r3, [pc, #4]	; (1e7c <__stdout_hook_install+0x8>)
    1e76:	6018      	str	r0, [r3, #0]
}
    1e78:	4770      	bx	lr
    1e7a:	bf00      	nop
    1e7c:	20000008 	.word	0x20000008

00001e80 <nordicsemi_nrf52_init>:
	__asm__ volatile(
    1e80:	f04f 0320 	mov.w	r3, #32
    1e84:	f3ef 8211 	mrs	r2, BASEPRI
    1e88:	f383 8812 	msr	BASEPRI_MAX, r3
    1e8c:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
    1e90:	4906      	ldr	r1, [pc, #24]	; (1eac <nordicsemi_nrf52_init+0x2c>)
    1e92:	2301      	movs	r3, #1
    1e94:	f8c1 3540 	str.w	r3, [r1, #1344]	; 0x540
#endif

#if NRF_POWER_HAS_DCDCEN
NRF_STATIC_INLINE void nrf_power_dcdcen_set(NRF_POWER_Type * p_reg, bool enable)
{
    p_reg->DCDCEN = (enable ? POWER_DCDCEN_DCDCEN_Enabled : POWER_DCDCEN_DCDCEN_Disabled) <<
    1e98:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    1e9c:	f8c1 3578 	str.w	r3, [r1, #1400]	; 0x578
	__asm__ volatile(
    1ea0:	f382 8811 	msr	BASEPRI, r2
    1ea4:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
    1ea8:	2000      	movs	r0, #0
    1eaa:	4770      	bx	lr
    1eac:	4001e000 	.word	0x4001e000

00001eb0 <sys_arch_reboot>:
    *p_gpregret = val;
    1eb0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    1eb4:	b2c0      	uxtb	r0, r0
    1eb6:	f8c3 051c 	str.w	r0, [r3, #1308]	; 0x51c
  __ASM volatile ("dsb 0xF":::"memory");
    1eba:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    1ebe:	4905      	ldr	r1, [pc, #20]	; (1ed4 <sys_arch_reboot+0x24>)
    1ec0:	4b05      	ldr	r3, [pc, #20]	; (1ed8 <sys_arch_reboot+0x28>)
    1ec2:	68ca      	ldr	r2, [r1, #12]
    1ec4:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    1ec8:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    1eca:	60cb      	str	r3, [r1, #12]
    1ecc:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    1ed0:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    1ed2:	e7fd      	b.n	1ed0 <sys_arch_reboot+0x20>
    1ed4:	e000ed00 	.word	0xe000ed00
    1ed8:	05fa0004 	.word	0x05fa0004

00001edc <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
    1edc:	b120      	cbz	r0, 1ee8 <arch_busy_wait+0xc>
    };

    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    1ede:	4b03      	ldr	r3, [pc, #12]	; (1eec <arch_busy_wait+0x10>)
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
    1ee0:	0180      	lsls	r0, r0, #6
    1ee2:	f043 0301 	orr.w	r3, r3, #1
    1ee6:	4718      	bx	r3

void arch_busy_wait(uint32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
    1ee8:	4770      	bx	lr
    1eea:	bf00      	nop
    1eec:	000051c0 	.word	0x000051c0

00001ef0 <onoff_stop>:
}

static clock_control_subsys_t get_subsys(struct onoff_manager *mgr)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;
	size_t offset = (size_t)(mgr - data->mgr);
    1ef0:	4b08      	ldr	r3, [pc, #32]	; (1f14 <onoff_stop+0x24>)
	return (clock_control_subsys_t)offset;
}

static void onoff_stop(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    1ef2:	b570      	push	{r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
    1ef4:	1ac3      	subs	r3, r0, r3
{
    1ef6:	460d      	mov	r5, r1
	int res;

	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    1ef8:	4907      	ldr	r1, [pc, #28]	; (1f18 <onoff_stop+0x28>)
	size_t offset = (size_t)(mgr - data->mgr);
    1efa:	109b      	asrs	r3, r3, #2
{
    1efc:	4604      	mov	r4, r0
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    1efe:	4359      	muls	r1, r3
    1f00:	4806      	ldr	r0, [pc, #24]	; (1f1c <onoff_stop+0x2c>)
    1f02:	2240      	movs	r2, #64	; 0x40
    1f04:	f002 fcf2 	bl	48ec <stop>
	notify(mgr, res);
    1f08:	462b      	mov	r3, r5
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    1f0a:	4601      	mov	r1, r0
	notify(mgr, res);
    1f0c:	4620      	mov	r0, r4
}
    1f0e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	notify(mgr, res);
    1f12:	4718      	bx	r3
    1f14:	20000208 	.word	0x20000208
    1f18:	b6db6db7 	.word	0xb6db6db7
    1f1c:	00004ff4 	.word	0x00004ff4

00001f20 <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    1f20:	b573      	push	{r0, r1, r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
    1f22:	4c0c      	ldr	r4, [pc, #48]	; (1f54 <onoff_start+0x34>)
	int err;

	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    1f24:	4a0c      	ldr	r2, [pc, #48]	; (1f58 <onoff_start+0x38>)
    1f26:	2340      	movs	r3, #64	; 0x40
	size_t offset = (size_t)(mgr - data->mgr);
    1f28:	1b04      	subs	r4, r0, r4
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    1f2a:	9300      	str	r3, [sp, #0]
{
    1f2c:	460d      	mov	r5, r1
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    1f2e:	460b      	mov	r3, r1
    1f30:	490a      	ldr	r1, [pc, #40]	; (1f5c <onoff_start+0x3c>)
	size_t offset = (size_t)(mgr - data->mgr);
    1f32:	10a4      	asrs	r4, r4, #2
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    1f34:	4361      	muls	r1, r4
{
    1f36:	4606      	mov	r6, r0
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    1f38:	4809      	ldr	r0, [pc, #36]	; (1f60 <onoff_start+0x40>)
    1f3a:	f002 fd03 	bl	4944 <async_start>
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
    1f3e:	1e01      	subs	r1, r0, #0
    1f40:	da05      	bge.n	1f4e <onoff_start+0x2e>
		notify(mgr, err);
    1f42:	4630      	mov	r0, r6
    1f44:	462b      	mov	r3, r5
	}
}
    1f46:	b002      	add	sp, #8
    1f48:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		notify(mgr, err);
    1f4c:	4718      	bx	r3
}
    1f4e:	b002      	add	sp, #8
    1f50:	bd70      	pop	{r4, r5, r6, pc}
    1f52:	bf00      	nop
    1f54:	20000208 	.word	0x20000208
    1f58:	000049b5 	.word	0x000049b5
    1f5c:	b6db6db7 	.word	0xb6db6db7
    1f60:	00004ff4 	.word	0x00004ff4

00001f64 <clk_init>:
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    1f64:	2200      	movs	r2, #0
{
    1f66:	b570      	push	{r4, r5, r6, lr}
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    1f68:	2101      	movs	r1, #1
{
    1f6a:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    1f6c:	4610      	mov	r0, r2
    1f6e:	f7ff fc29 	bl	17c4 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);

	nrfx_err = nrfx_clock_init(clock_event_handler);
    1f72:	480f      	ldr	r0, [pc, #60]	; (1fb0 <clk_init+0x4c>)
    1f74:	f001 f87a 	bl	306c <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
    1f78:	4b0e      	ldr	r3, [pc, #56]	; (1fb4 <clk_init+0x50>)
    1f7a:	4298      	cmp	r0, r3
    1f7c:	d115      	bne.n	1faa <clk_init+0x46>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
    1f7e:	f002 fed3 	bl	4d28 <nrfx_clock_enable>
	struct nrf_clock_control_data *data = dev->data;
    1f82:	6926      	ldr	r6, [r4, #16]
	for (enum clock_control_nrf_type i = 0;
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);

		err = onoff_manager_init(get_onoff_manager(dev, i),
    1f84:	490c      	ldr	r1, [pc, #48]	; (1fb8 <clk_init+0x54>)
    1f86:	4630      	mov	r0, r6
    1f88:	f002 fb7d 	bl	4686 <onoff_manager_init>
					 &transitions);
		if (err < 0) {
    1f8c:	2800      	cmp	r0, #0
    1f8e:	db0b      	blt.n	1fa8 <clk_init+0x44>
	struct nrf_clock_control_data *data = dev->data;
    1f90:	6924      	ldr	r4, [r4, #16]
		err = onoff_manager_init(get_onoff_manager(dev, i),
    1f92:	4909      	ldr	r1, [pc, #36]	; (1fb8 <clk_init+0x54>)
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    1f94:	2501      	movs	r5, #1
    1f96:	6435      	str	r5, [r6, #64]	; 0x40
		err = onoff_manager_init(get_onoff_manager(dev, i),
    1f98:	f104 001c 	add.w	r0, r4, #28
    1f9c:	f002 fb73 	bl	4686 <onoff_manager_init>
		if (err < 0) {
    1fa0:	2800      	cmp	r0, #0
    1fa2:	db01      	blt.n	1fa8 <clk_init+0x44>
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    1fa4:	64e5      	str	r5, [r4, #76]	; 0x4c
	}

	return 0;
    1fa6:	2000      	movs	r0, #0
}
    1fa8:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
    1faa:	f06f 0004 	mvn.w	r0, #4
    1fae:	e7fb      	b.n	1fa8 <clk_init+0x44>
    1fb0:	00001ff1 	.word	0x00001ff1
    1fb4:	0bad0000 	.word	0x0bad0000
    1fb8:	00005220 	.word	0x00005220

00001fbc <clkstarted_handle.constprop.0>:
static void clkstarted_handle(const struct device *dev,
    1fbc:	4601      	mov	r1, r0
	clock_control_cb_t callback = sub_data->cb;
    1fbe:	230c      	movs	r3, #12
    1fc0:	4809      	ldr	r0, [pc, #36]	; (1fe8 <clkstarted_handle.constprop.0+0x2c>)
    1fc2:	434b      	muls	r3, r1
static void clkstarted_handle(const struct device *dev,
    1fc4:	b570      	push	{r4, r5, r6, lr}
	clock_control_cb_t callback = sub_data->cb;
    1fc6:	18c4      	adds	r4, r0, r3
	void *user_data = sub_data->user_data;
    1fc8:	e9d4 560e 	ldrd	r5, r6, [r4, #56]	; 0x38
	sub_data->cb = NULL;
    1fcc:	2200      	movs	r2, #0
	set_on_state(&sub_data->flags);
    1fce:	3340      	adds	r3, #64	; 0x40
	sub_data->cb = NULL;
    1fd0:	63a2      	str	r2, [r4, #56]	; 0x38
	set_on_state(&sub_data->flags);
    1fd2:	4418      	add	r0, r3
    1fd4:	f002 fc77 	bl	48c6 <set_on_state>
	if (callback) {
    1fd8:	b12d      	cbz	r5, 1fe6 <clkstarted_handle.constprop.0+0x2a>
		callback(dev, (clock_control_subsys_t)type, user_data);
    1fda:	4632      	mov	r2, r6
    1fdc:	462b      	mov	r3, r5
    1fde:	4803      	ldr	r0, [pc, #12]	; (1fec <clkstarted_handle.constprop.0+0x30>)
}
    1fe0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		callback(dev, (clock_control_subsys_t)type, user_data);
    1fe4:	4718      	bx	r3
}
    1fe6:	bd70      	pop	{r4, r5, r6, pc}
    1fe8:	20000208 	.word	0x20000208
    1fec:	00004ff4 	.word	0x00004ff4

00001ff0 <clock_event_handler>:
	switch (event) {
    1ff0:	b110      	cbz	r0, 1ff8 <clock_event_handler+0x8>
    1ff2:	2801      	cmp	r0, #1
    1ff4:	d004      	beq.n	2000 <clock_event_handler+0x10>
    1ff6:	4770      	bx	lr
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
    1ff8:	4b03      	ldr	r3, [pc, #12]	; (2008 <clock_event_handler+0x18>)
    1ffa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    1ffc:	075b      	lsls	r3, r3, #29
    1ffe:	d101      	bne.n	2004 <clock_event_handler+0x14>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
    2000:	f7ff bfdc 	b.w	1fbc <clkstarted_handle.constprop.0>
}
    2004:	4770      	bx	lr
    2006:	bf00      	nop
    2008:	20000208 	.word	0x20000208

0000200c <generic_hfclk_start>:
{
    200c:	b508      	push	{r3, lr}
	__asm__ volatile(
    200e:	f04f 0320 	mov.w	r3, #32
    2012:	f3ef 8111 	mrs	r1, BASEPRI
    2016:	f383 8812 	msr	BASEPRI_MAX, r3
    201a:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
    201e:	4a12      	ldr	r2, [pc, #72]	; (2068 <generic_hfclk_start+0x5c>)
    2020:	6813      	ldr	r3, [r2, #0]
    2022:	f043 0002 	orr.w	r0, r3, #2
	if (hfclk_users & HF_USER_BT) {
    2026:	f013 0301 	ands.w	r3, r3, #1
	hfclk_users |= HF_USER_GENERIC;
    202a:	6010      	str	r0, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
    202c:	d00c      	beq.n	2048 <generic_hfclk_start+0x3c>
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    202e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    2032:	f8d2 340c 	ldr.w	r3, [r2, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    2036:	f8d2 240c 	ldr.w	r2, [r2, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
    203a:	f013 0301 	ands.w	r3, r3, #1
    203e:	d003      	beq.n	2048 <generic_hfclk_start+0x3c>
			set_on_state(get_hf_flags());
    2040:	480a      	ldr	r0, [pc, #40]	; (206c <generic_hfclk_start+0x60>)
    2042:	f002 fc40 	bl	48c6 <set_on_state>
			already_started = true;
    2046:	2301      	movs	r3, #1
	__asm__ volatile(
    2048:	f381 8811 	msr	BASEPRI, r1
    204c:	f3bf 8f6f 	isb	sy
	if (already_started) {
    2050:	b123      	cbz	r3, 205c <generic_hfclk_start+0x50>
}
    2052:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(CLOCK_DEVICE,
    2056:	2000      	movs	r0, #0
    2058:	f7ff bfb0 	b.w	1fbc <clkstarted_handle.constprop.0>
}
    205c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
    2060:	2001      	movs	r0, #1
    2062:	f001 b813 	b.w	308c <nrfx_clock_start>
    2066:	bf00      	nop
    2068:	20000258 	.word	0x20000258
    206c:	20000248 	.word	0x20000248

00002070 <api_blocking_start>:
{
    2070:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    2072:	2200      	movs	r2, #0
    2074:	2301      	movs	r3, #1
    2076:	e9cd 2302 	strd	r2, r3, [sp, #8]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    207a:	4a09      	ldr	r2, [pc, #36]	; (20a0 <api_blocking_start+0x30>)
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    207c:	f8cd d000 	str.w	sp, [sp]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    2080:	466b      	mov	r3, sp
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    2082:	f8cd d004 	str.w	sp, [sp, #4]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    2086:	f002 fc8e 	bl	49a6 <api_start>
	if (err < 0) {
    208a:	2800      	cmp	r0, #0
    208c:	db05      	blt.n	209a <api_blocking_start+0x2a>
		union { struct { uintptr_t lo, hi; } split; k_timeout_t val; } parm1 = { .val = timeout };
		return (int) arch_syscall_invoke3(parm0.x, parm1.split.lo, parm1.split.hi, K_SYSCALL_K_SEM_TAKE);
	}
#endif
	compiler_barrier();
	return z_impl_k_sem_take(sem, timeout);
    208e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    2092:	2300      	movs	r3, #0
    2094:	4668      	mov	r0, sp
    2096:	f001 fd93 	bl	3bc0 <z_impl_k_sem_take>
}
    209a:	b005      	add	sp, #20
    209c:	f85d fb04 	ldr.w	pc, [sp], #4
    20a0:	000049cd 	.word	0x000049cd

000020a4 <lfclk_start>:
{
    20a4:	b510      	push	{r4, lr}
	if (!once) {
    20a6:	4c07      	ldr	r4, [pc, #28]	; (20c4 <lfclk_start+0x20>)
    20a8:	7823      	ldrb	r3, [r4, #0]
    20aa:	b92b      	cbnz	r3, 20b8 <lfclk_start+0x14>
	z_impl_k_busy_wait(usec_to_wait);
    20ac:	f44f 70a5 	mov.w	r0, #330	; 0x14a
    20b0:	f002 ff7b 	bl	4faa <z_impl_k_busy_wait>
		once = true;
    20b4:	2301      	movs	r3, #1
    20b6:	7023      	strb	r3, [r4, #0]
}
    20b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
    20bc:	2000      	movs	r0, #0
    20be:	f000 bfe5 	b.w	308c <nrfx_clock_start>
    20c2:	bf00      	nop
    20c4:	20000365 	.word	0x20000365

000020c8 <generic_hfclk_stop>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    20c8:	4b09      	ldr	r3, [pc, #36]	; (20f0 <generic_hfclk_stop+0x28>)
    20ca:	f3bf 8f5b 	dmb	ish
    20ce:	e853 2f00 	ldrex	r2, [r3]
    20d2:	f022 0102 	bic.w	r1, r2, #2
    20d6:	e843 1000 	strex	r0, r1, [r3]
    20da:	2800      	cmp	r0, #0
    20dc:	d1f7      	bne.n	20ce <generic_hfclk_stop+0x6>
    20de:	f3bf 8f5b 	dmb	ish
	if (atomic_and(&hfclk_users, ~HF_USER_GENERIC) & HF_USER_BT) {
    20e2:	07d3      	lsls	r3, r2, #31
    20e4:	d402      	bmi.n	20ec <generic_hfclk_stop+0x24>
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
    20e6:	2001      	movs	r0, #1
    20e8:	f002 be2b 	b.w	4d42 <nrfx_clock_stop>
}
    20ec:	4770      	bx	lr
    20ee:	bf00      	nop
    20f0:	20000258 	.word	0x20000258

000020f4 <z_nrf_clock_control_lf_on>:
{
    20f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    20f8:	4939      	ldr	r1, [pc, #228]	; (21e0 <z_nrf_clock_control_lf_on+0xec>)
    20fa:	f3bf 8f5b 	dmb	ish
    20fe:	4607      	mov	r7, r0
    2100:	2201      	movs	r2, #1
    2102:	e851 3f00 	ldrex	r3, [r1]
    2106:	e841 2000 	strex	r0, r2, [r1]
    210a:	2800      	cmp	r0, #0
    210c:	d1f9      	bne.n	2102 <z_nrf_clock_control_lf_on+0xe>
    210e:	f3bf 8f5b 	dmb	ish
	if (atomic_set(&on, 1) == 0) {
    2112:	b933      	cbnz	r3, 2122 <z_nrf_clock_control_lf_on+0x2e>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
    2114:	4933      	ldr	r1, [pc, #204]	; (21e4 <z_nrf_clock_control_lf_on+0xf0>)
		err = onoff_request(mgr, &cli);
    2116:	4834      	ldr	r0, [pc, #208]	; (21e8 <z_nrf_clock_control_lf_on+0xf4>)
    2118:	604b      	str	r3, [r1, #4]
    211a:	60cb      	str	r3, [r1, #12]
    211c:	608a      	str	r2, [r1, #8]
    211e:	f002 fac5 	bl	46ac <onoff_request>
	switch (start_mode) {
    2122:	1e7b      	subs	r3, r7, #1
    2124:	2b01      	cmp	r3, #1
    2126:	d82f      	bhi.n	2188 <z_nrf_clock_control_lf_on+0x94>
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
    2128:	2f01      	cmp	r7, #1
    212a:	d107      	bne.n	213c <z_nrf_clock_control_lf_on+0x48>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    212c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2130:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
    2134:	f003 0303 	and.w	r3, r3, #3
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
    2138:	2b01      	cmp	r3, #1
    213a:	d025      	beq.n	2188 <z_nrf_clock_control_lf_on+0x94>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    213c:	f002 fe42 	bl	4dc4 <k_is_in_isr>
    2140:	4604      	mov	r4, r0
    2142:	b918      	cbnz	r0, 214c <z_nrf_clock_control_lf_on+0x58>
 */
static inline bool k_is_pre_kernel(void)
{
	extern bool z_sys_post_kernel; /* in init.c */

	return !z_sys_post_kernel;
    2144:	4b29      	ldr	r3, [pc, #164]	; (21ec <z_nrf_clock_control_lf_on+0xf8>)
	int key = isr_mode ? irq_lock() : 0;
    2146:	781b      	ldrb	r3, [r3, #0]
    2148:	2b00      	cmp	r3, #0
    214a:	d141      	bne.n	21d0 <z_nrf_clock_control_lf_on+0xdc>
	__asm__ volatile(
    214c:	f04f 0320 	mov.w	r3, #32
    2150:	f3ef 8611 	mrs	r6, BASEPRI
    2154:	f383 8812 	msr	BASEPRI_MAX, r3
    2158:	f3bf 8f6f 	isb	sy
    215c:	2401      	movs	r4, #1
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    215e:	f8df 8090 	ldr.w	r8, [pc, #144]	; 21f0 <z_nrf_clock_control_lf_on+0xfc>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    2162:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
    2166:	f8d5 3418 	ldr.w	r3, [r5, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    216a:	f8d5 2418 	ldr.w	r2, [r5, #1048]	; 0x418
    216e:	03d2      	lsls	r2, r2, #15
    2170:	d50c      	bpl.n	218c <z_nrf_clock_control_lf_on+0x98>
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    2172:	f003 0303 	and.w	r3, r3, #3
	while (!(nrfx_clock_is_running(d, (void *)&type)
    2176:	2b01      	cmp	r3, #1
    2178:	d001      	beq.n	217e <z_nrf_clock_control_lf_on+0x8a>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
    217a:	2f01      	cmp	r7, #1
    217c:	d106      	bne.n	218c <z_nrf_clock_control_lf_on+0x98>
	if (isr_mode) {
    217e:	b30c      	cbz	r4, 21c4 <z_nrf_clock_control_lf_on+0xd0>
	__asm__ volatile(
    2180:	f386 8811 	msr	BASEPRI, r6
    2184:	f3bf 8f6f 	isb	sy
}
    2188:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (isr_mode || !IS_ENABLED(CONFIG_MULTITHREADING)) {
    218c:	b1ac      	cbz	r4, 21ba <z_nrf_clock_control_lf_on+0xc6>
 *
 * @param key Interrupt locking key obtained from irq_lock().
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
    218e:	4630      	mov	r0, r6
    2190:	f7ff faf0 	bl	1774 <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
    2194:	f8d5 3518 	ldr.w	r3, [r5, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
    2198:	2b00      	cmp	r3, #0
    219a:	d1e4      	bne.n	2166 <z_nrf_clock_control_lf_on+0x72>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    219c:	f8d5 2104 	ldr.w	r2, [r5, #260]	; 0x104
		    && nrf_clock_event_check(NRF_CLOCK,
    21a0:	2a00      	cmp	r2, #0
    21a2:	d0e0      	beq.n	2166 <z_nrf_clock_control_lf_on+0x72>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    21a4:	f8c5 3104 	str.w	r3, [r5, #260]	; 0x104
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
    21a8:	f8d5 3104 	ldr.w	r3, [r5, #260]	; 0x104
    p_reg->LFCLKSRC = (uint32_t)(source);
    21ac:	2301      	movs	r3, #1
    21ae:	f8c5 3518 	str.w	r3, [r5, #1304]	; 0x518
    21b2:	f8c8 3180 	str.w	r3, [r8, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    21b6:	60ab      	str	r3, [r5, #8]
}
    21b8:	e7d5      	b.n	2166 <z_nrf_clock_control_lf_on+0x72>
	return z_impl_k_sleep(timeout);
    21ba:	2100      	movs	r1, #0
    21bc:	2021      	movs	r0, #33	; 0x21
    21be:	f001 ffb7 	bl	4130 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    21c2:	e7e7      	b.n	2194 <z_nrf_clock_control_lf_on+0xa0>
    p_reg->INTENSET = mask;
    21c4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    21c8:	2202      	movs	r2, #2
    21ca:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    21ce:	e7db      	b.n	2188 <z_nrf_clock_control_lf_on+0x94>
    p_reg->INTENCLR = mask;
    21d0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    21d4:	2202      	movs	r2, #2
    21d6:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
	int key = isr_mode ? irq_lock() : 0;
    21da:	4606      	mov	r6, r0
}
    21dc:	e7bf      	b.n	215e <z_nrf_clock_control_lf_on+0x6a>
    21de:	bf00      	nop
    21e0:	2000025c 	.word	0x2000025c
    21e4:	200001f8 	.word	0x200001f8
    21e8:	20000224 	.word	0x20000224
    21ec:	20000778 	.word	0x20000778
    21f0:	e000e100 	.word	0xe000e100

000021f4 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(const struct device *arg)
{
    21f4:	b508      	push	{r3, lr}

	ARG_UNUSED(arg);

	/* Claim console device */
	uart_console_dev = DEVICE_DT_GET(DT_CHOSEN(zephyr_console));
    21f6:	4b08      	ldr	r3, [pc, #32]	; (2218 <uart_console_init+0x24>)
    21f8:	4808      	ldr	r0, [pc, #32]	; (221c <uart_console_init+0x28>)
    21fa:	6018      	str	r0, [r3, #0]
    21fc:	f002 fdb9 	bl	4d72 <z_device_is_ready>
	if (!device_is_ready(uart_console_dev)) {
    2200:	b138      	cbz	r0, 2212 <uart_console_init+0x1e>
	__stdout_hook_install(console_out);
    2202:	4807      	ldr	r0, [pc, #28]	; (2220 <uart_console_init+0x2c>)
    2204:	f7ff fe36 	bl	1e74 <__stdout_hook_install>
	__printk_hook_install(console_out);
    2208:	4805      	ldr	r0, [pc, #20]	; (2220 <uart_console_init+0x2c>)
    220a:	f7fe fcaf 	bl	b6c <__printk_hook_install>
		return -ENODEV;
	}

	uart_console_hook_install();

	return 0;
    220e:	2000      	movs	r0, #0
}
    2210:	bd08      	pop	{r3, pc}
		return -ENODEV;
    2212:	f06f 0012 	mvn.w	r0, #18
    2216:	e7fb      	b.n	2210 <uart_console_init+0x1c>
    2218:	20000260 	.word	0x20000260
    221c:	00005024 	.word	0x00005024
    2220:	00002225 	.word	0x00002225

00002224 <console_out>:
	if ('\n' == c) {
    2224:	280a      	cmp	r0, #10
{
    2226:	b538      	push	{r3, r4, r5, lr}
    2228:	4d07      	ldr	r5, [pc, #28]	; (2248 <console_out+0x24>)
    222a:	4604      	mov	r4, r0
	if ('\n' == c) {
    222c:	d104      	bne.n	2238 <console_out+0x14>
		uart_poll_out(uart_console_dev, '\r');
    222e:	6828      	ldr	r0, [r5, #0]
					unsigned char out_char)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->api;

	api->poll_out(dev, out_char);
    2230:	6883      	ldr	r3, [r0, #8]
    2232:	210d      	movs	r1, #13
    2234:	685b      	ldr	r3, [r3, #4]
    2236:	4798      	blx	r3
	uart_poll_out(uart_console_dev, c);
    2238:	6828      	ldr	r0, [r5, #0]
    223a:	6883      	ldr	r3, [r0, #8]
    223c:	b2e1      	uxtb	r1, r4
    223e:	685b      	ldr	r3, [r3, #4]
    2240:	4798      	blx	r3
}
    2242:	4620      	mov	r0, r4
    2244:	bd38      	pop	{r3, r4, r5, pc}
    2246:	bf00      	nop
    2248:	20000260 	.word	0x20000260

0000224c <gpio_nrfx_pin_interrupt_configure>:

static int gpio_nrfx_pin_interrupt_configure(const struct device *port,
					     gpio_pin_t pin,
					     enum gpio_int_mode mode,
					     enum gpio_int_trig trig)
{
    224c:	b530      	push	{r4, r5, lr}
	return port->config;
    224e:	6840      	ldr	r0, [r0, #4]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    2250:	7b04      	ldrb	r4, [r0, #12]
    2252:	f001 051f 	and.w	r5, r1, #31
	nrfx_err_t err;
	uint8_t ch;

	if (mode == GPIO_INT_MODE_DISABLED) {
    2256:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    225a:	ea45 1544 	orr.w	r5, r5, r4, lsl #5
{
    225e:	b085      	sub	sp, #20
    2260:	f04f 0400 	mov.w	r4, #0
	if (mode == GPIO_INT_MODE_DISABLED) {
    2264:	d105      	bne.n	2272 <gpio_nrfx_pin_interrupt_configure+0x26>
		nrfx_gpiote_trigger_disable(abs_pin);
    2266:	4628      	mov	r0, r5
    2268:	f001 f9ca 	bl	3600 <nrfx_gpiote_trigger_disable>
		return -EINVAL;
	}

	nrfx_gpiote_trigger_enable(abs_pin, true);

	return 0;
    226c:	2000      	movs	r0, #0
}
    226e:	b005      	add	sp, #20
    2270:	bd30      	pop	{r4, r5, pc}
	if (mode == GPIO_INT_MODE_LEVEL) {
    2272:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
	nrfx_gpiote_trigger_config_t trigger_config = {
    2276:	e9cd 4402 	strd	r4, r4, [sp, #8]
	if (mode == GPIO_INT_MODE_LEVEL) {
    227a:	d130      	bne.n	22de <gpio_nrfx_pin_interrupt_configure+0x92>
		return trig == GPIO_INT_TRIG_LOW ? NRFX_GPIOTE_TRIGGER_LOW :
    227c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
    2280:	bf0c      	ite	eq
    2282:	2304      	moveq	r3, #4
    2284:	2305      	movne	r3, #5
	nrfx_gpiote_trigger_config_t trigger_config = {
    2286:	f88d 3008 	strb.w	r3, [sp, #8]
	if (!(BIT(pin) & get_port_cfg(port)->edge_sense) &&
    228a:	6883      	ldr	r3, [r0, #8]
    228c:	fa23 f101 	lsr.w	r1, r3, r1
    2290:	07c9      	lsls	r1, r1, #31
    2292:	d416      	bmi.n	22c2 <gpio_nrfx_pin_interrupt_configure+0x76>
    2294:	f1b2 7fa0 	cmp.w	r2, #20971520	; 0x1400000
    2298:	d113      	bne.n	22c2 <gpio_nrfx_pin_interrupt_configure+0x76>
}

NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;
    229a:	f005 031f 	and.w	r3, r5, #31
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
    229e:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    22a2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    22a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
    22aa:	07db      	lsls	r3, r3, #31
    22ac:	d409      	bmi.n	22c2 <gpio_nrfx_pin_interrupt_configure+0x76>
		err = nrfx_gpiote_channel_get(abs_pin, &ch);
    22ae:	f10d 0407 	add.w	r4, sp, #7
    22b2:	4621      	mov	r1, r4
    22b4:	4628      	mov	r0, r5
    22b6:	f001 f90b 	bl	34d0 <nrfx_gpiote_channel_get>
		if (err == NRFX_ERROR_INVALID_PARAM) {
    22ba:	4b14      	ldr	r3, [pc, #80]	; (230c <gpio_nrfx_pin_interrupt_configure+0xc0>)
    22bc:	4298      	cmp	r0, r3
    22be:	d019      	beq.n	22f4 <gpio_nrfx_pin_interrupt_configure+0xa8>
		trigger_config.p_in_channel = &ch;
    22c0:	9403      	str	r4, [sp, #12]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    22c2:	2300      	movs	r3, #0
    22c4:	4619      	mov	r1, r3
    22c6:	aa02      	add	r2, sp, #8
    22c8:	4628      	mov	r0, r5
    22ca:	f000 ffd9 	bl	3280 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
    22ce:	4b10      	ldr	r3, [pc, #64]	; (2310 <gpio_nrfx_pin_interrupt_configure+0xc4>)
    22d0:	4298      	cmp	r0, r3
    22d2:	d118      	bne.n	2306 <gpio_nrfx_pin_interrupt_configure+0xba>
	nrfx_gpiote_trigger_enable(abs_pin, true);
    22d4:	2101      	movs	r1, #1
    22d6:	4628      	mov	r0, r5
    22d8:	f001 f94e 	bl	3578 <nrfx_gpiote_trigger_enable>
    22dc:	e7c6      	b.n	226c <gpio_nrfx_pin_interrupt_configure+0x20>
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
    22de:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
    22e2:	d005      	beq.n	22f0 <gpio_nrfx_pin_interrupt_configure+0xa4>
    22e4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
    22e8:	bf0c      	ite	eq
    22ea:	2302      	moveq	r3, #2
    22ec:	2301      	movne	r3, #1
    22ee:	e7ca      	b.n	2286 <gpio_nrfx_pin_interrupt_configure+0x3a>
    22f0:	2303      	movs	r3, #3
    22f2:	e7c8      	b.n	2286 <gpio_nrfx_pin_interrupt_configure+0x3a>
			err = nrfx_gpiote_channel_alloc(&ch);
    22f4:	4620      	mov	r0, r4
    22f6:	f001 f939 	bl	356c <nrfx_gpiote_channel_alloc>
			if (err != NRFX_SUCCESS) {
    22fa:	4b05      	ldr	r3, [pc, #20]	; (2310 <gpio_nrfx_pin_interrupt_configure+0xc4>)
    22fc:	4298      	cmp	r0, r3
    22fe:	d0df      	beq.n	22c0 <gpio_nrfx_pin_interrupt_configure+0x74>
				return -ENOMEM;
    2300:	f06f 000b 	mvn.w	r0, #11
    2304:	e7b3      	b.n	226e <gpio_nrfx_pin_interrupt_configure+0x22>
		return -EINVAL;
    2306:	f06f 0015 	mvn.w	r0, #21
    230a:	e7b0      	b.n	226e <gpio_nrfx_pin_interrupt_configure+0x22>
    230c:	0bad0004 	.word	0x0bad0004
    2310:	0bad0000 	.word	0x0bad0000

00002314 <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
    2314:	b510      	push	{r4, lr}
	nrfx_err_t err;

	if (nrfx_gpiote_is_init()) {
    2316:	f001 f919 	bl	354c <nrfx_gpiote_is_init>
    231a:	4604      	mov	r4, r0
    231c:	b968      	cbnz	r0, 233a <gpio_nrfx_init+0x26>
		return 0;
	}

	err = nrfx_gpiote_init(0/*not used*/);
    231e:	f001 f8ed 	bl	34fc <nrfx_gpiote_init>
	if (err != NRFX_SUCCESS) {
    2322:	4b08      	ldr	r3, [pc, #32]	; (2344 <gpio_nrfx_init+0x30>)
    2324:	4298      	cmp	r0, r3
    2326:	d10a      	bne.n	233e <gpio_nrfx_init+0x2a>
		return -EIO;
	}

	nrfx_gpiote_global_callback_set(nrfx_gpio_handler, NULL);
    2328:	4807      	ldr	r0, [pc, #28]	; (2348 <gpio_nrfx_init+0x34>)
    232a:	4621      	mov	r1, r4
    232c:	f001 f8ca 	bl	34c4 <nrfx_gpiote_global_callback_set>

	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
    2330:	4622      	mov	r2, r4
    2332:	2105      	movs	r1, #5
    2334:	2006      	movs	r0, #6
    2336:	f7ff fa45 	bl	17c4 <z_arm_irq_priority_set>
		return 0;
    233a:	2000      	movs	r0, #0
		    nrfx_isr, nrfx_gpiote_irq_handler, 0);

	return 0;
}
    233c:	bd10      	pop	{r4, pc}
		return -EIO;
    233e:	f06f 0004 	mvn.w	r0, #4
    2342:	e7fb      	b.n	233c <gpio_nrfx_init+0x28>
    2344:	0bad0000 	.word	0x0bad0000
    2348:	0000234d 	.word	0x0000234d

0000234c <nrfx_gpio_handler>:
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    234c:	0943      	lsrs	r3, r0, #5
{
    234e:	b570      	push	{r4, r5, r6, lr}
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    2350:	d110      	bne.n	2374 <nrfx_gpio_handler+0x28>
	return list->head;
    2352:	4b09      	ldr	r3, [pc, #36]	; (2378 <nrfx_gpio_handler+0x2c>)
    2354:	6859      	ldr	r1, [r3, #4]
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    2356:	b169      	cbz	r1, 2374 <nrfx_gpio_handler+0x28>
	gpio_fire_callbacks(list, port, BIT(pin));
    2358:	2501      	movs	r5, #1
	return node->next;
    235a:	680c      	ldr	r4, [r1, #0]
		if (cb->pin_mask & pins) {
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
    235c:	4e07      	ldr	r6, [pc, #28]	; (237c <nrfx_gpio_handler+0x30>)
    235e:	4085      	lsls	r5, r0
		if (cb->pin_mask & pins) {
    2360:	688a      	ldr	r2, [r1, #8]
    2362:	402a      	ands	r2, r5
    2364:	d002      	beq.n	236c <nrfx_gpio_handler+0x20>
			cb->handler(port, cb, cb->pin_mask & pins);
    2366:	684b      	ldr	r3, [r1, #4]
    2368:	4630      	mov	r0, r6
    236a:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    236c:	b114      	cbz	r4, 2374 <nrfx_gpio_handler+0x28>
    236e:	4621      	mov	r1, r4
    2370:	6824      	ldr	r4, [r4, #0]
    2372:	e7f5      	b.n	2360 <nrfx_gpio_handler+0x14>
}
    2374:	bd70      	pop	{r4, r5, r6, pc}
    2376:	bf00      	nop
    2378:	20000264 	.word	0x20000264
    237c:	0000500c 	.word	0x0000500c

00002380 <gpio_nrfx_pin_configure>:
{
    2380:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	return port->config;
    2384:	f8d0 8004 	ldr.w	r8, [r0, #4]
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    2388:	f898 300c 	ldrb.w	r3, [r8, #12]
    238c:	f001 061f 	and.w	r6, r1, #31
{
    2390:	b085      	sub	sp, #20
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    2392:	ea46 1643 	orr.w	r6, r6, r3, lsl #5
{
    2396:	460f      	mov	r7, r1
	err = nrfx_gpiote_channel_get(abs_pin, &ch);
    2398:	4630      	mov	r0, r6
    239a:	f10d 0103 	add.w	r1, sp, #3
{
    239e:	4614      	mov	r4, r2
	err = nrfx_gpiote_channel_get(abs_pin, &ch);
    23a0:	f001 f896 	bl	34d0 <nrfx_gpiote_channel_get>
	if ((flags & (GPIO_INPUT | GPIO_OUTPUT)) == GPIO_DISCONNECTED) {
    23a4:	f414 3540 	ands.w	r5, r4, #196608	; 0x30000
	err = nrfx_gpiote_channel_get(abs_pin, &ch);
    23a8:	4681      	mov	r9, r0
	if ((flags & (GPIO_INPUT | GPIO_OUTPUT)) == GPIO_DISCONNECTED) {
    23aa:	d10b      	bne.n	23c4 <gpio_nrfx_pin_configure+0x44>
		(void)nrfx_gpiote_pin_uninit(abs_pin);
    23ac:	4630      	mov	r0, r6
    23ae:	f001 f94f 	bl	3650 <nrfx_gpiote_pin_uninit>
		if (free_ch) {
    23b2:	4b43      	ldr	r3, [pc, #268]	; (24c0 <gpio_nrfx_pin_configure+0x140>)
    23b4:	4599      	cmp	r9, r3
    23b6:	d103      	bne.n	23c0 <gpio_nrfx_pin_configure+0x40>
			err = nrfx_gpiote_channel_free(ch);
    23b8:	f89d 0003 	ldrb.w	r0, [sp, #3]
    23bc:	f001 f8d0 	bl	3560 <nrfx_gpiote_channel_free>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    23c0:	2000      	movs	r0, #0
    23c2:	e057      	b.n	2474 <gpio_nrfx_pin_configure+0xf4>
	nrfx_gpiote_trigger_config_t trigger_config = {
    23c4:	2300      	movs	r3, #0
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    23c6:	4619      	mov	r1, r3
    23c8:	aa02      	add	r2, sp, #8
    23ca:	4630      	mov	r0, r6
	nrfx_gpiote_trigger_config_t trigger_config = {
    23cc:	e9cd 3302 	strd	r3, r3, [sp, #8]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    23d0:	f000 ff56 	bl	3280 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
    23d4:	4b3a      	ldr	r3, [pc, #232]	; (24c0 <gpio_nrfx_pin_configure+0x140>)
    23d6:	4298      	cmp	r0, r3
    23d8:	d002      	beq.n	23e0 <gpio_nrfx_pin_configure+0x60>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
    23da:	f06f 0015 	mvn.w	r0, #21
    23de:	e049      	b.n	2474 <gpio_nrfx_pin_configure+0xf4>
	if (free_ch) {
    23e0:	4581      	cmp	r9, r0
    23e2:	d103      	bne.n	23ec <gpio_nrfx_pin_configure+0x6c>
		err = nrfx_gpiote_channel_free(ch);
    23e4:	f89d 0003 	ldrb.w	r0, [sp, #3]
    23e8:	f001 f8ba 	bl	3560 <nrfx_gpiote_channel_free>
	if (flags & GPIO_OUTPUT) {
    23ec:	03a5      	lsls	r5, r4, #14
    23ee:	d554      	bpl.n	249a <gpio_nrfx_pin_configure+0x11a>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
    23f0:	f240 3306 	movw	r3, #774	; 0x306
    23f4:	4023      	ands	r3, r4
    23f6:	f5b3 7f83 	cmp.w	r3, #262	; 0x106
    23fa:	d03e      	beq.n	247a <gpio_nrfx_pin_configure+0xfa>
    23fc:	d80c      	bhi.n	2418 <gpio_nrfx_pin_configure+0x98>
    23fe:	2b06      	cmp	r3, #6
    2400:	d015      	beq.n	242e <gpio_nrfx_pin_configure+0xae>
    2402:	d804      	bhi.n	240e <gpio_nrfx_pin_configure+0x8e>
    2404:	b19b      	cbz	r3, 242e <gpio_nrfx_pin_configure+0xae>
    2406:	2b02      	cmp	r3, #2
    2408:	d1e7      	bne.n	23da <gpio_nrfx_pin_configure+0x5a>
    240a:	2304      	movs	r3, #4
    240c:	e00f      	b.n	242e <gpio_nrfx_pin_configure+0xae>
    240e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    2412:	d1e2      	bne.n	23da <gpio_nrfx_pin_configure+0x5a>
		*drive = NRF_GPIO_PIN_H0S1;
    2414:	2301      	movs	r3, #1
    2416:	e00a      	b.n	242e <gpio_nrfx_pin_configure+0xae>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
    2418:	f240 2202 	movw	r2, #514	; 0x202
    241c:	4293      	cmp	r3, r2
    241e:	d02e      	beq.n	247e <gpio_nrfx_pin_configure+0xfe>
    2420:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
    2424:	d02d      	beq.n	2482 <gpio_nrfx_pin_configure+0x102>
    2426:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    242a:	d1d6      	bne.n	23da <gpio_nrfx_pin_configure+0x5a>
		*drive = NRF_GPIO_PIN_S0H1;
    242c:	2302      	movs	r3, #2
		nrfx_gpiote_output_config_t output_config = {
    242e:	f88d 3004 	strb.w	r3, [sp, #4]
				NRF_GPIO_PIN_INPUT_CONNECT :
    2432:	f484 3380 	eor.w	r3, r4, #65536	; 0x10000
    2436:	f3c3 4300 	ubfx	r3, r3, #16, #1
	if (flags & GPIO_PULL_UP) {
    243a:	06e0      	lsls	r0, r4, #27
		nrfx_gpiote_output_config_t output_config = {
    243c:	f88d 3005 	strb.w	r3, [sp, #5]
		return NRF_GPIO_PIN_PULLDOWN;
    2440:	bf54      	ite	pl
    2442:	f3c4 1340 	ubfxpl	r3, r4, #5, #1
		return NRF_GPIO_PIN_PULLUP;
    2446:	2303      	movmi	r3, #3
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
    2448:	0321      	lsls	r1, r4, #12
		nrfx_gpiote_output_config_t output_config = {
    244a:	f88d 3006 	strb.w	r3, [sp, #6]
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
    244e:	d51a      	bpl.n	2486 <gpio_nrfx_pin_configure+0x106>
			nrf_gpio_port_out_set(cfg->port, BIT(pin));
    2450:	f8d8 3004 	ldr.w	r3, [r8, #4]
    2454:	2101      	movs	r1, #1
    2456:	fa01 f707 	lsl.w	r7, r1, r7
    p_reg->OUTSET = set_mask;
    245a:	f8c3 7508 	str.w	r7, [r3, #1288]	; 0x508
		err = nrfx_gpiote_output_configure(abs_pin, &output_config, NULL);
    245e:	2200      	movs	r2, #0
    2460:	a901      	add	r1, sp, #4
    2462:	4630      	mov	r0, r6
    2464:	f000 ffb6 	bl	33d4 <nrfx_gpiote_output_configure>
		return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    2468:	4b15      	ldr	r3, [pc, #84]	; (24c0 <gpio_nrfx_pin_configure+0x140>)
    246a:	4298      	cmp	r0, r3
    246c:	bf14      	ite	ne
    246e:	f06f 0015 	mvnne.w	r0, #21
    2472:	2000      	moveq	r0, #0
}
    2474:	b005      	add	sp, #20
    2476:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		*drive = NRF_GPIO_PIN_H0D1;
    247a:	2307      	movs	r3, #7
    247c:	e7d7      	b.n	242e <gpio_nrfx_pin_configure+0xae>
		*drive = NRF_GPIO_PIN_D0H1;
    247e:	2305      	movs	r3, #5
    2480:	e7d5      	b.n	242e <gpio_nrfx_pin_configure+0xae>
		*drive = NRF_GPIO_PIN_H0H1;
    2482:	2303      	movs	r3, #3
    2484:	e7d3      	b.n	242e <gpio_nrfx_pin_configure+0xae>
		} else if (flags & GPIO_OUTPUT_INIT_LOW) {
    2486:	0362      	lsls	r2, r4, #13
			nrf_gpio_port_out_clear(cfg->port, BIT(pin));
    2488:	bf41      	itttt	mi
    248a:	f8d8 3004 	ldrmi.w	r3, [r8, #4]
    248e:	2101      	movmi	r1, #1
    2490:	fa01 f707 	lslmi.w	r7, r1, r7
    p_reg->OUTCLR = clr_mask;
    2494:	f8c3 750c 	strmi.w	r7, [r3, #1292]	; 0x50c
}
    2498:	e7e1      	b.n	245e <gpio_nrfx_pin_configure+0xde>
	if (flags & GPIO_PULL_UP) {
    249a:	06e3      	lsls	r3, r4, #27
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    249c:	f04f 0300 	mov.w	r3, #0
		return NRF_GPIO_PIN_PULLUP;
    24a0:	bf54      	ite	pl
    24a2:	f3c4 1440 	ubfxpl	r4, r4, #5, #1
    24a6:	2403      	movmi	r4, #3
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    24a8:	461a      	mov	r2, r3
    24aa:	a901      	add	r1, sp, #4
    24ac:	4630      	mov	r0, r6
	nrfx_gpiote_input_config_t input_config = {
    24ae:	f88d 4004 	strb.w	r4, [sp, #4]
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    24b2:	f000 fee5 	bl	3280 <nrfx_gpiote_input_configure>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    24b6:	4b02      	ldr	r3, [pc, #8]	; (24c0 <gpio_nrfx_pin_configure+0x140>)
    24b8:	4298      	cmp	r0, r3
    24ba:	d081      	beq.n	23c0 <gpio_nrfx_pin_configure+0x40>
    24bc:	e78d      	b.n	23da <gpio_nrfx_pin_configure+0x5a>
    24be:	bf00      	nop
    24c0:	0bad0000 	.word	0x0bad0000

000024c4 <uarte_nrfx_configure>:
	return 0;
}

static int uarte_nrfx_configure(const struct device *dev,
				const struct uart_config *cfg)
{
    24c4:	b570      	push	{r4, r5, r6, lr}
		break;
	default:
		return -ENOTSUP;
	}
#else
	if (cfg->stop_bits != UART_CFG_STOP_BITS_1) {
    24c6:	794b      	ldrb	r3, [r1, #5]
    24c8:	2b01      	cmp	r3, #1
    24ca:	d120      	bne.n	250e <uarte_nrfx_configure+0x4a>
		return -ENOTSUP;
	}
#endif

	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
    24cc:	798b      	ldrb	r3, [r1, #6]
    24ce:	2b03      	cmp	r3, #3
    24d0:	d11d      	bne.n	250e <uarte_nrfx_configure+0x4a>
		return -ENOTSUP;
	}

	switch (cfg->flow_ctrl) {
    24d2:	79cc      	ldrb	r4, [r1, #7]
    24d4:	b10c      	cbz	r4, 24da <uarte_nrfx_configure+0x16>
    24d6:	2c01      	cmp	r4, #1
    24d8:	d119      	bne.n	250e <uarte_nrfx_configure+0x4a>
	}

#if defined(UARTE_CONFIG_PARITYTYPE_Msk)
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
#endif
	switch (cfg->parity) {
    24da:	790a      	ldrb	r2, [r1, #4]
    24dc:	b112      	cbz	r2, 24e4 <uarte_nrfx_configure+0x20>
    24de:	2a02      	cmp	r2, #2
    24e0:	d115      	bne.n	250e <uarte_nrfx_configure+0x4a>
    24e2:	220e      	movs	r2, #14
#endif
	default:
		return -ENOTSUP;
	}

	if (baudrate_set(dev, cfg->baudrate) != 0) {
    24e4:	680b      	ldr	r3, [r1, #0]
	return config->uarte_regs;
    24e6:	6845      	ldr	r5, [r0, #4]
	switch (baudrate) {
    24e8:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
	return config->uarte_regs;
    24ec:	682d      	ldr	r5, [r5, #0]
	switch (baudrate) {
    24ee:	d062      	beq.n	25b6 <uarte_nrfx_configure+0xf2>
    24f0:	d82b      	bhi.n	254a <uarte_nrfx_configure+0x86>
    24f2:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
    24f6:	d061      	beq.n	25bc <uarte_nrfx_configure+0xf8>
    24f8:	d814      	bhi.n	2524 <uarte_nrfx_configure+0x60>
    24fa:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
    24fe:	d05f      	beq.n	25c0 <uarte_nrfx_configure+0xfc>
    2500:	d808      	bhi.n	2514 <uarte_nrfx_configure+0x50>
    2502:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
    2506:	d05e      	beq.n	25c6 <uarte_nrfx_configure+0x102>
    2508:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
    250c:	d05e      	beq.n	25cc <uarte_nrfx_configure+0x108>
    250e:	f06f 0085 	mvn.w	r0, #133	; 0x85
    2512:	e04f      	b.n	25b4 <uarte_nrfx_configure+0xf0>
    2514:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
    2518:	d05b      	beq.n	25d2 <uarte_nrfx_configure+0x10e>
    251a:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
    251e:	d1f6      	bne.n	250e <uarte_nrfx_configure+0x4a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
    2520:	4b36      	ldr	r3, [pc, #216]	; (25fc <uarte_nrfx_configure+0x138>)
    2522:	e03c      	b.n	259e <uarte_nrfx_configure+0xda>
	switch (baudrate) {
    2524:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
    2528:	d056      	beq.n	25d8 <uarte_nrfx_configure+0x114>
    252a:	d807      	bhi.n	253c <uarte_nrfx_configure+0x78>
    252c:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
    2530:	d054      	beq.n	25dc <uarte_nrfx_configure+0x118>
    2532:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
    2536:	d1ea      	bne.n	250e <uarte_nrfx_configure+0x4a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
    2538:	4b31      	ldr	r3, [pc, #196]	; (2600 <uarte_nrfx_configure+0x13c>)
    253a:	e030      	b.n	259e <uarte_nrfx_configure+0xda>
	switch (baudrate) {
    253c:	f647 2612 	movw	r6, #31250	; 0x7a12
    2540:	42b3      	cmp	r3, r6
    2542:	d1e4      	bne.n	250e <uarte_nrfx_configure+0x4a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
    2544:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
    2548:	e029      	b.n	259e <uarte_nrfx_configure+0xda>
	switch (baudrate) {
    254a:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
    254e:	d047      	beq.n	25e0 <uarte_nrfx_configure+0x11c>
    2550:	d813      	bhi.n	257a <uarte_nrfx_configure+0xb6>
    2552:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
    2556:	d046      	beq.n	25e6 <uarte_nrfx_configure+0x122>
    2558:	d809      	bhi.n	256e <uarte_nrfx_configure+0xaa>
    255a:	f64d 26c0 	movw	r6, #56000	; 0xdac0
    255e:	42b3      	cmp	r3, r6
    2560:	d043      	beq.n	25ea <uarte_nrfx_configure+0x126>
    2562:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
    2566:	d1d2      	bne.n	250e <uarte_nrfx_configure+0x4a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
    2568:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
    256c:	e017      	b.n	259e <uarte_nrfx_configure+0xda>
	switch (baudrate) {
    256e:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
    2572:	d1cc      	bne.n	250e <uarte_nrfx_configure+0x4a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
    2574:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
    2578:	e011      	b.n	259e <uarte_nrfx_configure+0xda>
	switch (baudrate) {
    257a:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
    257e:	d037      	beq.n	25f0 <uarte_nrfx_configure+0x12c>
    2580:	d808      	bhi.n	2594 <uarte_nrfx_configure+0xd0>
    2582:	4e20      	ldr	r6, [pc, #128]	; (2604 <uarte_nrfx_configure+0x140>)
    2584:	42b3      	cmp	r3, r6
    2586:	d036      	beq.n	25f6 <uarte_nrfx_configure+0x132>
    2588:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
    258c:	d1bf      	bne.n	250e <uarte_nrfx_configure+0x4a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
    258e:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
    2592:	e004      	b.n	259e <uarte_nrfx_configure+0xda>
	switch (baudrate) {
    2594:	4e1c      	ldr	r6, [pc, #112]	; (2608 <uarte_nrfx_configure+0x144>)
    2596:	42b3      	cmp	r3, r6
    2598:	d1b9      	bne.n	250e <uarte_nrfx_configure+0x4a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
    259a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
	struct uarte_nrfx_data *data = dev->data;
    259e:	6900      	ldr	r0, [r0, #16]
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
    25a0:	f8c5 3524 	str.w	r3, [r5, #1316]	; 0x524
		return -ENOTSUP;
	}

	nrf_uarte_configure(get_uarte_instance(dev), &uarte_cfg);

	data->uart_config = *cfg;
    25a4:	1d03      	adds	r3, r0, #4
    25a6:	c903      	ldmia	r1, {r0, r1}
                    | (uint32_t)p_cfg->hwfc;
    25a8:	4322      	orrs	r2, r4
    p_reg->CONFIG = (uint32_t)p_cfg->parity
    25aa:	f8c5 256c 	str.w	r2, [r5, #1388]	; 0x56c
    25ae:	e883 0003 	stmia.w	r3, {r0, r1}

	return 0;
    25b2:	2000      	movs	r0, #0
}
    25b4:	bd70      	pop	{r4, r5, r6, pc}
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
    25b6:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
    25ba:	e7f0      	b.n	259e <uarte_nrfx_configure+0xda>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
    25bc:	4b13      	ldr	r3, [pc, #76]	; (260c <uarte_nrfx_configure+0x148>)
    25be:	e7ee      	b.n	259e <uarte_nrfx_configure+0xda>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
    25c0:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
    25c4:	e7eb      	b.n	259e <uarte_nrfx_configure+0xda>
		nrf_baudrate = 0x00014000;
    25c6:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
    25ca:	e7e8      	b.n	259e <uarte_nrfx_configure+0xda>
	switch (baudrate) {
    25cc:	f44f 331c 	mov.w	r3, #159744	; 0x27000
    25d0:	e7e5      	b.n	259e <uarte_nrfx_configure+0xda>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
    25d2:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
    25d6:	e7e2      	b.n	259e <uarte_nrfx_configure+0xda>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
    25d8:	4b0d      	ldr	r3, [pc, #52]	; (2610 <uarte_nrfx_configure+0x14c>)
    25da:	e7e0      	b.n	259e <uarte_nrfx_configure+0xda>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
    25dc:	4b0d      	ldr	r3, [pc, #52]	; (2614 <uarte_nrfx_configure+0x150>)
    25de:	e7de      	b.n	259e <uarte_nrfx_configure+0xda>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
    25e0:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
    25e4:	e7db      	b.n	259e <uarte_nrfx_configure+0xda>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
    25e6:	4b0c      	ldr	r3, [pc, #48]	; (2618 <uarte_nrfx_configure+0x154>)
    25e8:	e7d9      	b.n	259e <uarte_nrfx_configure+0xda>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
    25ea:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
    25ee:	e7d6      	b.n	259e <uarte_nrfx_configure+0xda>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
    25f0:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
    25f4:	e7d3      	b.n	259e <uarte_nrfx_configure+0xda>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
    25f6:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
    25fa:	e7d0      	b.n	259e <uarte_nrfx_configure+0xda>
    25fc:	0013b000 	.word	0x0013b000
    2600:	004ea000 	.word	0x004ea000
    2604:	0003d090 	.word	0x0003d090
    2608:	000f4240 	.word	0x000f4240
    260c:	00275000 	.word	0x00275000
    2610:	0075c000 	.word	0x0075c000
    2614:	003af000 	.word	0x003af000
    2618:	013a9000 	.word	0x013a9000

0000261c <uarte_0_init>:
		(__attribute__((__section__(LINKER_DT_NODE_REGION_NAME(	       \
			DT_PHANDLE(UARTE(idx), memory_regions)))))),	       \
		())

#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
    261c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    2620:	4607      	mov	r7, r0
    2622:	2200      	movs	r2, #0
    2624:	2101      	movs	r1, #1
    2626:	2002      	movs	r0, #2
    2628:	f7ff f8cc 	bl	17c4 <z_arm_irq_priority_set>
    262c:	2002      	movs	r0, #2
    262e:	f7ff f8ab 	bl	1788 <arch_irq_enable>
	const struct uarte_nrfx_config *config = dev->config;
    2632:	f8d7 8004 	ldr.w	r8, [r7, #4]
	struct uarte_nrfx_data *data = dev->data;
    2636:	693e      	ldr	r6, [r7, #16]
	return config->uarte_regs;
    2638:	f8d8 4000 	ldr.w	r4, [r8]
	err = pinctrl_apply_state(cfg->pcfg, PINCTRL_STATE_DEFAULT);
    263c:	f8d8 900c 	ldr.w	r9, [r8, #12]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    2640:	2100      	movs	r1, #0
    2642:	f8c4 1500 	str.w	r1, [r4, #1280]	; 0x500
				      uint8_t id)
{
	int ret;
	const struct pinctrl_state *state;

	ret = pinctrl_lookup_state(config, id, &state);
    2646:	aa01      	add	r2, sp, #4
	data->dev = dev;
    2648:	6037      	str	r7, [r6, #0]
    264a:	4648      	mov	r0, r9
    264c:	f002 fa88 	bl	4b60 <pinctrl_lookup_state>
	if (ret < 0) {
    2650:	1e05      	subs	r5, r0, #0
    2652:	db55      	blt.n	2700 <uarte_0_init+0xe4>
		return ret;
	}

	return pinctrl_apply_state_direct(config, state);
    2654:	9b01      	ldr	r3, [sp, #4]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
    2656:	f8d9 2000 	ldr.w	r2, [r9]
    265a:	7919      	ldrb	r1, [r3, #4]
    265c:	6818      	ldr	r0, [r3, #0]
    265e:	f002 fac0 	bl	4be2 <pinctrl_configure_pins>
	if (err < 0) {
    2662:	1e05      	subs	r5, r0, #0
    2664:	db4c      	blt.n	2700 <uarte_0_init+0xe4>
	err = uarte_nrfx_configure(dev, &data->uart_config);
    2666:	1d31      	adds	r1, r6, #4
    2668:	4638      	mov	r0, r7
    266a:	f7ff ff2b 	bl	24c4 <uarte_nrfx_configure>
	if (err) {
    266e:	4605      	mov	r5, r0
    2670:	2800      	cmp	r0, #0
    2672:	d145      	bne.n	2700 <uarte_0_init+0xe4>
	    cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX) {
    2674:	f8d8 3004 	ldr.w	r3, [r8, #4]
	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
    2678:	0799      	lsls	r1, r3, #30
    267a:	d519      	bpl.n	26b0 <uarte_0_init+0x94>
	ret = gppi_channel_alloc(&data->ppi_ch_endtx);
    267c:	f106 0018 	add.w	r0, r6, #24
    2680:	f001 f8b0 	bl	37e4 <nrfx_ppi_channel_alloc>
	if (ret != NRFX_SUCCESS) {
    2684:	4b22      	ldr	r3, [pc, #136]	; (2710 <uarte_0_init+0xf4>)
    2686:	4298      	cmp	r0, r3
    2688:	d13e      	bne.n	2708 <uarte_0_init+0xec>
	nrfx_gppi_channel_endpoints_setup(data->ppi_ch_endtx,
    268a:	7e30      	ldrb	r0, [r6, #24]
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)event);
    268c:	00c3      	lsls	r3, r0, #3
    268e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    2692:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
    return (uint32_t)p_reg + (uint32_t)task;
    2696:	f104 020c 	add.w	r2, r4, #12
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)event);
    269a:	f504 7190 	add.w	r1, r4, #288	; 0x120
NRF_STATIC_INLINE void nrf_ppi_channel_endpoint_setup(NRF_PPI_Type *    p_reg,
                                                      nrf_ppi_channel_t channel,
                                                      uint32_t          eep,
                                                      uint32_t          tep)
{
    p_reg->CH[(uint32_t) channel].EEP = eep;
    269e:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
    p_reg->CH[(uint32_t) channel].TEP = tep;
    26a2:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
    p_reg->CHENSET = mask;
    26a6:	4a1b      	ldr	r2, [pc, #108]	; (2714 <uarte_0_init+0xf8>)
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));
    26a8:	2301      	movs	r3, #1
    26aa:	4083      	lsls	r3, r0
    26ac:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    26b0:	2308      	movs	r3, #8
    26b2:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
		if (!cfg->disable_rx) {
    26b6:	f898 3008 	ldrb.w	r3, [r8, #8]
    26ba:	b953      	cbnz	r3, 26d2 <uarte_0_init+0xb6>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    26bc:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
    26c0:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    26c4:	6973      	ldr	r3, [r6, #20]
    26c6:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
    26ca:	2301      	movs	r3, #1
    26cc:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    26d0:	6023      	str	r3, [r4, #0]
	if (!(cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX)) {
    26d2:	f8d8 3004 	ldr.w	r3, [r8, #4]
    26d6:	079a      	lsls	r2, r3, #30
    p_reg->INTENSET = mask;
    26d8:	bf5c      	itt	pl
    26da:	f44f 7280 	movpl.w	r2, #256	; 0x100
    26de:	f8c4 2304 	strpl.w	r2, [r4, #772]	; 0x304
	if (cfg->flags & UARTE_CFG_FLAG_LOW_POWER) {
    26e2:	06db      	lsls	r3, r3, #27
    26e4:	bf44      	itt	mi
    26e6:	f44f 0380 	movmi.w	r3, #4194304	; 0x400000
    26ea:	f8c4 3304 	strmi.w	r3, [r4, #772]	; 0x304
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    26ee:	6933      	ldr	r3, [r6, #16]
    26f0:	f8c4 3544 	str.w	r3, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    26f4:	2300      	movs	r3, #0
    26f6:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    26fa:	2301      	movs	r3, #1
    26fc:	60a3      	str	r3, [r4, #8]
    26fe:	60e3      	str	r3, [r4, #12]
UART_NRF_UARTE_DEVICE(0);
    2700:	4628      	mov	r0, r5
    2702:	b003      	add	sp, #12
    2704:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return -EIO;
    2708:	f06f 0504 	mvn.w	r5, #4
UART_NRF_UARTE_DEVICE(0);
    270c:	e7f8      	b.n	2700 <uarte_0_init+0xe4>
    270e:	bf00      	nop
    2710:	0bad0000 	.word	0x0bad0000
    2714:	4001f000 	.word	0x4001f000

00002718 <uarte_nrfx_poll_out>:
{
    2718:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct uarte_nrfx_data *data = dev->data;
    271a:	6907      	ldr	r7, [r0, #16]
{
    271c:	4604      	mov	r4, r0
    271e:	460d      	mov	r5, r1
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    2720:	f002 fb50 	bl	4dc4 <k_is_in_isr>
    2724:	b910      	cbnz	r0, 272c <uarte_nrfx_poll_out+0x14>
	return !z_sys_post_kernel;
    2726:	4b2d      	ldr	r3, [pc, #180]	; (27dc <uarte_nrfx_poll_out+0xc4>)
	if (isr_mode) {
    2728:	781b      	ldrb	r3, [r3, #0]
    272a:	b98b      	cbnz	r3, 2750 <uarte_nrfx_poll_out+0x38>
	__asm__ volatile(
    272c:	f04f 0320 	mov.w	r3, #32
    2730:	f3ef 8611 	mrs	r6, BASEPRI
    2734:	f383 8812 	msr	BASEPRI_MAX, r3
    2738:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
    273c:	6860      	ldr	r0, [r4, #4]
    273e:	4631      	mov	r1, r6
    2740:	f002 f9c0 	bl	4ac4 <is_tx_ready.isra.0>
    2744:	bb30      	cbnz	r0, 2794 <uarte_nrfx_poll_out+0x7c>
	__asm__ volatile(
    2746:	f386 8811 	msr	BASEPRI, r6
    274a:	f3bf 8f6f 	isb	sy
}
    274e:	e7ed      	b.n	272c <uarte_nrfx_poll_out+0x14>
{
    2750:	2664      	movs	r6, #100	; 0x64
		NRFX_WAIT_FOR(is_tx_ready(dev), 100, 1, res);
    2752:	6860      	ldr	r0, [r4, #4]
    2754:	f002 f9b6 	bl	4ac4 <is_tx_ready.isra.0>
    2758:	b970      	cbnz	r0, 2778 <uarte_nrfx_poll_out+0x60>
    275a:	2001      	movs	r0, #1
    275c:	f002 fae2 	bl	4d24 <nrfx_busy_wait>
    2760:	3e01      	subs	r6, #1
    2762:	d1f6      	bne.n	2752 <uarte_nrfx_poll_out+0x3a>
    2764:	2100      	movs	r1, #0
    2766:	2021      	movs	r0, #33	; 0x21
    2768:	f001 fce2 	bl	4130 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    276c:	e7f0      	b.n	2750 <uarte_nrfx_poll_out+0x38>
	__asm__ volatile(
    276e:	f386 8811 	msr	BASEPRI, r6
    2772:	f3bf 8f6f 	isb	sy
}
    2776:	e7f5      	b.n	2764 <uarte_nrfx_poll_out+0x4c>
	__asm__ volatile(
    2778:	f04f 0320 	mov.w	r3, #32
    277c:	f3ef 8611 	mrs	r6, BASEPRI
    2780:	f383 8812 	msr	BASEPRI_MAX, r3
    2784:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
    2788:	6860      	ldr	r0, [r4, #4]
    278a:	4631      	mov	r1, r6
    278c:	f002 f99a 	bl	4ac4 <is_tx_ready.isra.0>
    2790:	2800      	cmp	r0, #0
    2792:	d0ec      	beq.n	276e <uarte_nrfx_poll_out+0x56>
	*data->char_out = c;
    2794:	693b      	ldr	r3, [r7, #16]
    2796:	701d      	strb	r5, [r3, #0]
	tx_start(dev, data->char_out, 1);
    2798:	6862      	ldr	r2, [r4, #4]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    279a:	6938      	ldr	r0, [r7, #16]
	return config->uarte_regs;
    279c:	6813      	ldr	r3, [r2, #0]
    279e:	f8c3 0544 	str.w	r0, [r3, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    27a2:	2001      	movs	r0, #1
    27a4:	f8c3 0548 	str.w	r0, [r3, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    27a8:	2000      	movs	r0, #0
    27aa:	f8c3 0120 	str.w	r0, [r3, #288]	; 0x120
    27ae:	f8d3 4120 	ldr.w	r4, [r3, #288]	; 0x120
    27b2:	f8c3 0158 	str.w	r0, [r3, #344]	; 0x158
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
    27b6:	6852      	ldr	r2, [r2, #4]
    27b8:	f8d3 0158 	ldr.w	r0, [r3, #344]	; 0x158
    27bc:	06d2      	lsls	r2, r2, #27
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    27be:	bf41      	itttt	mi
    27c0:	2208      	movmi	r2, #8
    27c2:	f8c3 2500 	strmi.w	r2, [r3, #1280]	; 0x500
    p_reg->INTENSET = mask;
    27c6:	f44f 0280 	movmi.w	r2, #4194304	; 0x400000
    27ca:	f8c3 2304 	strmi.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    27ce:	2201      	movs	r2, #1
    27d0:	609a      	str	r2, [r3, #8]
	__asm__ volatile(
    27d2:	f381 8811 	msr	BASEPRI, r1
    27d6:	f3bf 8f6f 	isb	sy
}
    27da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    27dc:	20000778 	.word	0x20000778

000027e0 <compare_int_lock>:
	return 0;
#endif
}

static bool compare_int_lock(int32_t chan)
{
    27e0:	b510      	push	{r4, lr}
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
    27e2:	2301      	movs	r3, #1
    27e4:	4083      	lsls	r3, r0
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    27e6:	4a11      	ldr	r2, [pc, #68]	; (282c <compare_int_lock+0x4c>)
    27e8:	f3bf 8f5b 	dmb	ish
    27ec:	43dc      	mvns	r4, r3
    27ee:	e852 1f00 	ldrex	r1, [r2]
    27f2:	ea01 0c04 	and.w	ip, r1, r4
    27f6:	e842 ce00 	strex	lr, ip, [r2]
    27fa:	f1be 0f00 	cmp.w	lr, #0
    27fe:	d1f6      	bne.n	27ee <compare_int_lock+0xe>
    2800:	f3bf 8f5b 	dmb	ish

	nrf_rtc_int_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
    2804:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    2808:	fa02 f000 	lsl.w	r0, r2, r0
    p_reg->INTENSET = mask;
}

NRF_STATIC_INLINE void nrf_rtc_int_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->INTENCLR = mask;
    280c:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    2810:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
    2814:	f8c2 0308 	str.w	r0, [r2, #776]	; 0x308
  __ASM volatile ("dmb 0xF":::"memory");
    2818:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("isb 0xF":::"memory");
    281c:	f3bf 8f6f 	isb	sy

	__DMB();
	__ISB();

	return prev & BIT(chan);
    2820:	420b      	tst	r3, r1
}
    2822:	bf14      	ite	ne
    2824:	2001      	movne	r0, #1
    2826:	2000      	moveq	r0, #0
    2828:	bd10      	pop	{r4, pc}
    282a:	bf00      	nop
    282c:	20000274 	.word	0x20000274

00002830 <sys_clock_timeout_handler>:
static void sys_clock_timeout_handler(int32_t chan,
				      uint64_t expire_time,
				      void *user_data)
{
	uint32_t cc_value = absolute_time_to_cc(expire_time);
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
    2830:	4919      	ldr	r1, [pc, #100]	; (2898 <sys_clock_timeout_handler+0x68>)
{
    2832:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2834:	4604      	mov	r4, r0
	return absolute_time & COUNTER_MAX;
    2836:	f022 457f 	bic.w	r5, r2, #4278190080	; 0xff000000
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
    283a:	6808      	ldr	r0, [r1, #0]

	last_count += dticks * CYC_PER_TICK;
    283c:	e9c1 2300 	strd	r2, r3, [r1]
	return (cc_value >= ANCHOR_RANGE_START) && (cc_value < ANCHOR_RANGE_END);
    2840:	f5a5 1300 	sub.w	r3, r5, #2097152	; 0x200000
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
    2844:	1a10      	subs	r0, r2, r0
	if (in_anchor_range(cc_value)) {
    2846:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
    284a:	d222      	bcs.n	2892 <sys_clock_timeout_handler+0x62>
		anchor = (((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH) + cc_value;
    284c:	4b13      	ldr	r3, [pc, #76]	; (289c <sys_clock_timeout_handler+0x6c>)
    284e:	681b      	ldr	r3, [r3, #0]
    2850:	0a1a      	lsrs	r2, r3, #8
    2852:	061b      	lsls	r3, r3, #24
    2854:	195e      	adds	r6, r3, r5
    2856:	4b12      	ldr	r3, [pc, #72]	; (28a0 <sys_clock_timeout_handler+0x70>)
    2858:	f142 0700 	adc.w	r7, r2, #0
    285c:	e9c3 6700 	strd	r6, r7, [r3]
		return true;
    2860:	2601      	movs	r6, #1
		 */
		compare_set(chan, last_count + CYC_PER_TICK,
					  sys_clock_timeout_handler, NULL);
	}

	sys_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
    2862:	f001 fdc3 	bl	43ec <sys_clock_announce>
    return p_reg->CC[ch];
    2866:	00a3      	lsls	r3, r4, #2
    2868:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    286c:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
    2870:	f8d3 2540 	ldr.w	r2, [r3, #1344]	; 0x540
			   (int32_t)dticks : (dticks > 0));

	if (cc_value == get_comparator(chan)) {
    2874:	42aa      	cmp	r2, r5
    2876:	d10b      	bne.n	2890 <sys_clock_timeout_handler+0x60>
		 * If anchor was updated we can enable same CC value to trigger
		 * interrupt after full cycle. Else set event in anchor update
		 * range. Since anchor was not updated we know that it's very
		 * far from mid point so setting is done without any protection.
		 */
		if (!anchor_updated) {
    2878:	b91e      	cbnz	r6, 2882 <sys_clock_timeout_handler+0x52>
    p_reg->CC[ch] = cc_val;
    287a:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
    287e:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
    2882:	4b08      	ldr	r3, [pc, #32]	; (28a4 <sys_clock_timeout_handler+0x74>)
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    2884:	f44f 3080 	mov.w	r0, #65536	; 0x10000
    2888:	fa00 f404 	lsl.w	r4, r0, r4
    288c:	f8c3 4344 	str.w	r4, [r3, #836]	; 0x344
			set_comparator(chan, COUNTER_HALF_SPAN);
		}
		event_enable(chan);
	}
}
    2890:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return false;
    2892:	2600      	movs	r6, #0
    2894:	e7e5      	b.n	2862 <sys_clock_timeout_handler+0x32>
    2896:	bf00      	nop
    2898:	200000b8 	.word	0x200000b8
    289c:	20000278 	.word	0x20000278
    28a0:	200000a0 	.word	0x200000a0
    28a4:	40011000 	.word	0x40011000

000028a8 <compare_int_unlock>:
	if (key) {
    28a8:	b319      	cbz	r1, 28f2 <compare_int_unlock+0x4a>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    28aa:	f3bf 8f5b 	dmb	ish
		atomic_or(&int_mask, BIT(chan));
    28ae:	2301      	movs	r3, #1
    28b0:	4a10      	ldr	r2, [pc, #64]	; (28f4 <compare_int_unlock+0x4c>)
    28b2:	4083      	lsls	r3, r0
    28b4:	e852 1f00 	ldrex	r1, [r2]
    28b8:	4319      	orrs	r1, r3
    28ba:	e842 1c00 	strex	ip, r1, [r2]
    28be:	f1bc 0f00 	cmp.w	ip, #0
    28c2:	d1f7      	bne.n	28b4 <compare_int_unlock+0xc>
    28c4:	f3bf 8f5b 	dmb	ish
    p_reg->INTENSET = mask;
    28c8:	4a0b      	ldr	r2, [pc, #44]	; (28f8 <compare_int_unlock+0x50>)
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    28ca:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    28ce:	4083      	lsls	r3, r0
    28d0:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    28d4:	4b09      	ldr	r3, [pc, #36]	; (28fc <compare_int_unlock+0x54>)
    28d6:	f3bf 8f5b 	dmb	ish
    28da:	681b      	ldr	r3, [r3, #0]
    28dc:	f3bf 8f5b 	dmb	ish
		if (atomic_get(&force_isr_mask) & BIT(chan)) {
    28e0:	fa23 f000 	lsr.w	r0, r3, r0
    28e4:	07c3      	lsls	r3, r0, #31
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    28e6:	bf42      	ittt	mi
    28e8:	4b05      	ldrmi	r3, [pc, #20]	; (2900 <compare_int_unlock+0x58>)
    28ea:	f44f 3200 	movmi.w	r2, #131072	; 0x20000
    28ee:	f8c3 2100 	strmi.w	r2, [r3, #256]	; 0x100
}
    28f2:	4770      	bx	lr
    28f4:	20000274 	.word	0x20000274
    28f8:	40011000 	.word	0x40011000
    28fc:	20000270 	.word	0x20000270
    2900:	e000e100 	.word	0xe000e100

00002904 <z_nrf_rtc_timer_read>:
	uint64_t val = ((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH;
    2904:	4b0d      	ldr	r3, [pc, #52]	; (293c <z_nrf_rtc_timer_read+0x38>)
    2906:	6818      	ldr	r0, [r3, #0]
    2908:	0a01      	lsrs	r1, r0, #8
    290a:	0600      	lsls	r0, r0, #24
  __ASM volatile ("dmb 0xF":::"memory");
    290c:	f3bf 8f5f 	dmb	sy
     return p_reg->COUNTER;
    2910:	4b0b      	ldr	r3, [pc, #44]	; (2940 <z_nrf_rtc_timer_read+0x3c>)
    2912:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	val += cntr;
    2916:	1818      	adds	r0, r3, r0
    2918:	f141 0100 	adc.w	r1, r1, #0
	if (cntr < OVERFLOW_RISK_RANGE_END) {
    291c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
    2920:	d20a      	bcs.n	2938 <z_nrf_rtc_timer_read+0x34>
		if (val < anchor) {
    2922:	4b08      	ldr	r3, [pc, #32]	; (2944 <z_nrf_rtc_timer_read+0x40>)
    2924:	e9d3 2300 	ldrd	r2, r3, [r3]
    2928:	4290      	cmp	r0, r2
    292a:	eb71 0303 	sbcs.w	r3, r1, r3
    292e:	d203      	bcs.n	2938 <z_nrf_rtc_timer_read+0x34>
			val += COUNTER_SPAN;
    2930:	f110 7080 	adds.w	r0, r0, #16777216	; 0x1000000
    2934:	f141 0100 	adc.w	r1, r1, #0
}
    2938:	4770      	bx	lr
    293a:	bf00      	nop
    293c:	20000278 	.word	0x20000278
    2940:	40011000 	.word	0x40011000
    2944:	200000a0 	.word	0x200000a0

00002948 <compare_set>:
{
    2948:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    294c:	b085      	sub	sp, #20
    294e:	4616      	mov	r6, r2
    2950:	4698      	mov	r8, r3
    2952:	4605      	mov	r5, r0
	key = compare_int_lock(chan);
    2954:	f7ff ff44 	bl	27e0 <compare_int_lock>
    2958:	9000      	str	r0, [sp, #0]
	uint64_t curr_time = z_nrf_rtc_timer_read();
    295a:	f7ff ffd3 	bl	2904 <z_nrf_rtc_timer_read>
	if (curr_time < target_time) {
    295e:	42b0      	cmp	r0, r6
    2960:	eb71 0308 	sbcs.w	r3, r1, r8
    2964:	d278      	bcs.n	2a58 <compare_set+0x110>
		if (target_time - curr_time > COUNTER_SPAN) {
    2966:	4b46      	ldr	r3, [pc, #280]	; (2a80 <compare_set+0x138>)
    2968:	1a30      	subs	r0, r6, r0
    296a:	eb68 0101 	sbc.w	r1, r8, r1
    296e:	4298      	cmp	r0, r3
    2970:	f171 0300 	sbcs.w	r3, r1, #0
    2974:	f080 8081 	bcs.w	2a7a <compare_set+0x132>
		if (target_time != cc_data[chan].target_time) {
    2978:	4b42      	ldr	r3, [pc, #264]	; (2a84 <compare_set+0x13c>)
    297a:	eb03 1305 	add.w	r3, r3, r5, lsl #4
    297e:	e9d3 ab02 	ldrd	sl, fp, [r3, #8]
    2982:	45d8      	cmp	r8, fp
    2984:	bf08      	it	eq
    2986:	4556      	cmpeq	r6, sl
    2988:	d051      	beq.n	2a2e <compare_set+0xe6>
    298a:	ea4f 0985 	mov.w	r9, r5, lsl #2
    298e:	f109 4980 	add.w	r9, r9, #1073741824	; 0x40000000
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    2992:	f105 0750 	add.w	r7, r5, #80	; 0x50
    2996:	f509 3988 	add.w	r9, r9, #69632	; 0x11000
    299a:	00bf      	lsls	r7, r7, #2
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    299c:	f44f 3180 	mov.w	r1, #65536	; 0x10000
    29a0:	fa01 f305 	lsl.w	r3, r1, r5
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    29a4:	b2bf      	uxth	r7, r7
	return absolute_time & COUNTER_MAX;
    29a6:	f026 427f 	bic.w	r2, r6, #4278190080	; 0xff000000
    29aa:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    29ae:	9301      	str	r3, [sp, #4]
    return p_reg->CC[ch];
    29b0:	f8d9 0540 	ldr.w	r0, [r9, #1344]	; 0x540
     return p_reg->COUNTER;
    29b4:	4b34      	ldr	r3, [pc, #208]	; (2a88 <compare_set+0x140>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    29b6:	f507 3788 	add.w	r7, r7, #69632	; 0x11000
	uint32_t cc_val = abs_val & COUNTER_MAX;
    29ba:	4614      	mov	r4, r2
     return p_reg->COUNTER;
    29bc:	f8d3 1504 	ldr.w	r1, [r3, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
    29c0:	1a40      	subs	r0, r0, r1
    29c2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    29c6:	f021 4c7f 	bic.w	ip, r1, #4278190080	; 0xff000000
		if (counter_sub(prev_cc, now) == 1) {
    29ca:	2801      	cmp	r0, #1
    p_reg->CC[ch] = cc_val;
    29cc:	f8c9 c540 	str.w	ip, [r9, #1344]	; 0x540
    29d0:	d107      	bne.n	29e2 <compare_set+0x9a>
    29d2:	e9cd 2102 	strd	r2, r1, [sp, #8]
	z_impl_k_busy_wait(usec_to_wait);
    29d6:	2013      	movs	r0, #19
    29d8:	f002 fae7 	bl	4faa <z_impl_k_busy_wait>
    29dc:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
    29e0:	4b29      	ldr	r3, [pc, #164]	; (2a88 <compare_set+0x140>)
		if (counter_sub(cc_val, now + 2) > COUNTER_HALF_SPAN) {
    29e2:	f101 0c02 	add.w	ip, r1, #2
	return (a - b) & COUNTER_MAX;
    29e6:	eba4 000c 	sub.w	r0, r4, ip
    29ea:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			cc_val = now + 2;
    29ee:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    29f2:	bf88      	it	hi
    29f4:	4664      	movhi	r4, ip
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    29f6:	2000      	movs	r0, #0
    29f8:	6038      	str	r0, [r7, #0]
    29fa:	6838      	ldr	r0, [r7, #0]
    p_reg->EVTENSET = mask;
    29fc:	9801      	ldr	r0, [sp, #4]
    29fe:	f8c3 0344 	str.w	r0, [r3, #836]	; 0x344
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    2a02:	f024 407f 	bic.w	r0, r4, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
    2a06:	f8c9 0540 	str.w	r0, [r9, #1344]	; 0x540
     return p_reg->COUNTER;
    2a0a:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
		 (counter_sub(cc_val, now2 + 2) > COUNTER_HALF_SPAN));
    2a0e:	4281      	cmp	r1, r0
    2a10:	d006      	beq.n	2a20 <compare_set+0xd8>
	return (a - b) & COUNTER_MAX;
    2a12:	1a20      	subs	r0, r4, r0
    2a14:	3802      	subs	r0, #2
    2a16:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	} while ((now2 != now) &&
    2a1a:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    2a1e:	d819      	bhi.n	2a54 <compare_set+0x10c>
	return (a - b) & COUNTER_MAX;
    2a20:	1aa4      	subs	r4, r4, r2
    2a22:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
			target_time += counter_sub(cc_set, cc_value);
    2a26:	eb14 0a06 	adds.w	sl, r4, r6
    2a2a:	f148 0b00 	adc.w	fp, r8, #0
	cc_data[chan].target_time = target_time;
    2a2e:	4915      	ldr	r1, [pc, #84]	; (2a84 <compare_set+0x13c>)
	cc_data[chan].callback = handler;
    2a30:	980e      	ldr	r0, [sp, #56]	; 0x38
	cc_data[chan].target_time = target_time;
    2a32:	012b      	lsls	r3, r5, #4
    2a34:	eb01 1205 	add.w	r2, r1, r5, lsl #4
    2a38:	e9c2 ab02 	strd	sl, fp, [r2, #8]
	cc_data[chan].callback = handler;
    2a3c:	50c8      	str	r0, [r1, r3]
	cc_data[chan].user_context = user_data;
    2a3e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    2a40:	6053      	str	r3, [r2, #4]
	return ret;
    2a42:	2400      	movs	r4, #0
	compare_int_unlock(chan, key);
    2a44:	4628      	mov	r0, r5
    2a46:	9900      	ldr	r1, [sp, #0]
    2a48:	f7ff ff2e 	bl	28a8 <compare_int_unlock>
}
    2a4c:	4620      	mov	r0, r4
    2a4e:	b005      	add	sp, #20
    2a50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2a54:	4620      	mov	r0, r4
    2a56:	e7b1      	b.n	29bc <compare_set+0x74>
		atomic_or(&force_isr_mask, BIT(chan));
    2a58:	2301      	movs	r3, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    2a5a:	4a0c      	ldr	r2, [pc, #48]	; (2a8c <compare_set+0x144>)
    2a5c:	f3bf 8f5b 	dmb	ish
    2a60:	40ab      	lsls	r3, r5
    2a62:	e852 1f00 	ldrex	r1, [r2]
    2a66:	4319      	orrs	r1, r3
    2a68:	e842 1000 	strex	r0, r1, [r2]
    2a6c:	2800      	cmp	r0, #0
    2a6e:	d1f8      	bne.n	2a62 <compare_set+0x11a>
    2a70:	f3bf 8f5b 	dmb	ish
    2a74:	46b2      	mov	sl, r6
    2a76:	46c3      	mov	fp, r8
    2a78:	e7d9      	b.n	2a2e <compare_set+0xe6>
			return -EINVAL;
    2a7a:	f06f 0415 	mvn.w	r4, #21
    2a7e:	e7e1      	b.n	2a44 <compare_set+0xfc>
    2a80:	01000001 	.word	0x01000001
    2a84:	200000a8 	.word	0x200000a8
    2a88:	40011000 	.word	0x40011000
    2a8c:	20000270 	.word	0x20000270

00002a90 <sys_clock_driver_init>:
{
	return (uint32_t)z_nrf_rtc_timer_read();
}

static int sys_clock_driver_init(const struct device *dev)
{
    2a90:	b573      	push	{r0, r1, r4, r5, r6, lr}
			CLOCK_CONTROL_NRF_LF_START_STABLE);

	/* TODO: replace with counter driver to access RTC */
	nrf_rtc_prescaler_set(RTC, 0);
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
		cc_data[chan].target_time = TARGET_TIME_INVALID;
    2a92:	4b19      	ldr	r3, [pc, #100]	; (2af8 <sys_clock_driver_init+0x68>)
    p_reg->PRESCALER = val;
    2a94:	4d19      	ldr	r5, [pc, #100]	; (2afc <sys_clock_driver_init+0x6c>)
    2a96:	2400      	movs	r4, #0
    2a98:	f04f 30ff 	mov.w	r0, #4294967295
    2a9c:	f04f 31ff 	mov.w	r1, #4294967295
    2aa0:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
    2aa4:	e9c3 0102 	strd	r0, r1, [r3, #8]
    p_reg->INTENSET = mask;
    2aa8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    2aac:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2ab0:	4b13      	ldr	r3, [pc, #76]	; (2b00 <sys_clock_driver_init+0x70>)
    2ab2:	2602      	movs	r6, #2
    2ab4:	f44f 3200 	mov.w	r2, #131072	; 0x20000

	nrf_rtc_int_enable(RTC, NRF_RTC_INT_OVERFLOW_MASK);

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
    2ab8:	2101      	movs	r1, #1
    2aba:	f8c5 6304 	str.w	r6, [r5, #772]	; 0x304
    2abe:	2011      	movs	r0, #17
    2ac0:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    2ac4:	4622      	mov	r2, r4
    2ac6:	f7fe fe7d 	bl	17c4 <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
    2aca:	2011      	movs	r0, #17
    2acc:	f7fe fe5c 	bl	1788 <arch_irq_enable>

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
    2ad0:	4a0c      	ldr	r2, [pc, #48]	; (2b04 <sys_clock_driver_init+0x74>)
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    2ad2:	2301      	movs	r3, #1
    2ad4:	60ab      	str	r3, [r5, #8]
    2ad6:	602b      	str	r3, [r5, #0]
    2ad8:	6013      	str	r3, [r2, #0]

	uint32_t initial_timeout = IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
		(COUNTER_HALF_SPAN - 1) :
		(counter() + CYC_PER_TICK);

	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
    2ada:	4b0b      	ldr	r3, [pc, #44]	; (2b08 <sys_clock_driver_init+0x78>)
    2adc:	4a0b      	ldr	r2, [pc, #44]	; (2b0c <sys_clock_driver_init+0x7c>)
    2ade:	9300      	str	r3, [sp, #0]
    2ae0:	9401      	str	r4, [sp, #4]
    2ae2:	2300      	movs	r3, #0
    2ae4:	4620      	mov	r0, r4
    2ae6:	f7ff ff2f 	bl	2948 <compare_set>

	z_nrf_clock_control_lf_on(mode);
    2aea:	4630      	mov	r0, r6
    2aec:	f7ff fb02 	bl	20f4 <z_nrf_clock_control_lf_on>

	return 0;
}
    2af0:	4620      	mov	r0, r4
    2af2:	b002      	add	sp, #8
    2af4:	bd70      	pop	{r4, r5, r6, pc}
    2af6:	bf00      	nop
    2af8:	200000a8 	.word	0x200000a8
    2afc:	40011000 	.word	0x40011000
    2b00:	e000e100 	.word	0xe000e100
    2b04:	20000274 	.word	0x20000274
    2b08:	00002831 	.word	0x00002831
    2b0c:	007fffff 	.word	0x007fffff

00002b10 <rtc_nrf_isr>:
{
    2b10:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    return p_reg->INTENSET & mask;
    2b14:	4c35      	ldr	r4, [pc, #212]	; (2bec <rtc_nrf_isr+0xdc>)
    2b16:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, NRF_RTC_INT_OVERFLOW_MASK) &&
    2b1a:	079a      	lsls	r2, r3, #30
    2b1c:	d50b      	bpl.n	2b36 <rtc_nrf_isr+0x26>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    2b1e:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    2b22:	b143      	cbz	r3, 2b36 <rtc_nrf_isr+0x26>
		overflow_cnt++;
    2b24:	4a32      	ldr	r2, [pc, #200]	; (2bf0 <rtc_nrf_isr+0xe0>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    2b26:	2300      	movs	r3, #0
    2b28:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
    2b2c:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    2b30:	6813      	ldr	r3, [r2, #0]
    2b32:	3301      	adds	r3, #1
    2b34:	6013      	str	r3, [r2, #0]
	__asm__ volatile(
    2b36:	f04f 0320 	mov.w	r3, #32
    2b3a:	f3ef 8211 	mrs	r2, BASEPRI
    2b3e:	f383 8812 	msr	BASEPRI_MAX, r3
    2b42:	f3bf 8f6f 	isb	sy
    return p_reg->INTENSET & mask;
    2b46:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan))) {
    2b4a:	03db      	lsls	r3, r3, #15
    2b4c:	d512      	bpl.n	2b74 <rtc_nrf_isr+0x64>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    2b4e:	f3bf 8f5b 	dmb	ish
    2b52:	4b28      	ldr	r3, [pc, #160]	; (2bf4 <rtc_nrf_isr+0xe4>)
    2b54:	e853 1f00 	ldrex	r1, [r3]
    2b58:	f021 0001 	bic.w	r0, r1, #1
    2b5c:	e843 0600 	strex	r6, r0, [r3]
    2b60:	2e00      	cmp	r6, #0
    2b62:	d1f7      	bne.n	2b54 <rtc_nrf_isr+0x44>
    2b64:	f3bf 8f5b 	dmb	ish
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
    2b68:	2900      	cmp	r1, #0
    2b6a:	d136      	bne.n	2bda <rtc_nrf_isr+0xca>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    2b6c:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
		if (result) {
    2b70:	2b00      	cmp	r3, #0
    2b72:	d132      	bne.n	2bda <rtc_nrf_isr+0xca>
{
    2b74:	2300      	movs	r3, #0
	__asm__ volatile(
    2b76:	f382 8811 	msr	BASEPRI, r2
    2b7a:	f3bf 8f6f 	isb	sy
	if (channel_processing_check_and_clear(chan)) {
    2b7e:	b34b      	cbz	r3, 2bd4 <rtc_nrf_isr+0xc4>
		curr_time = z_nrf_rtc_timer_read();
    2b80:	f7ff fec0 	bl	2904 <z_nrf_rtc_timer_read>
	__asm__ volatile(
    2b84:	f04f 0320 	mov.w	r3, #32
    2b88:	f3ef 8c11 	mrs	ip, BASEPRI
    2b8c:	f383 8812 	msr	BASEPRI_MAX, r3
    2b90:	f3bf 8f6f 	isb	sy
		expire_time = cc_data[chan].target_time;
    2b94:	4b18      	ldr	r3, [pc, #96]	; (2bf8 <rtc_nrf_isr+0xe8>)
    2b96:	e9d3 6702 	ldrd	r6, r7, [r3, #8]
		if (curr_time >= expire_time) {
    2b9a:	42b0      	cmp	r0, r6
    2b9c:	eb71 0207 	sbcs.w	r2, r1, r7
    2ba0:	f04f 0200 	mov.w	r2, #0
    2ba4:	d320      	bcc.n	2be8 <rtc_nrf_isr+0xd8>
			cc_data[chan].target_time = TARGET_TIME_INVALID;
    2ba6:	f04f 38ff 	mov.w	r8, #4294967295
    2baa:	f04f 39ff 	mov.w	r9, #4294967295
			user_context = cc_data[chan].user_context;
    2bae:	e9d3 1500 	ldrd	r1, r5, [r3]
			cc_data[chan].target_time = TARGET_TIME_INVALID;
    2bb2:	e9c3 8902 	strd	r8, r9, [r3, #8]
			cc_data[chan].callback = NULL;
    2bb6:	601a      	str	r2, [r3, #0]
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
    2bb8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    2bbc:	f8c4 3348 	str.w	r3, [r4, #840]	; 0x348
	__asm__ volatile(
    2bc0:	f38c 8811 	msr	BASEPRI, ip
    2bc4:	f3bf 8f6f 	isb	sy
		if (handler) {
    2bc8:	b121      	cbz	r1, 2bd4 <rtc_nrf_isr+0xc4>
			handler(chan, expire_time, user_context);
    2bca:	9500      	str	r5, [sp, #0]
    2bcc:	4632      	mov	r2, r6
    2bce:	463b      	mov	r3, r7
    2bd0:	2000      	movs	r0, #0
    2bd2:	4788      	blx	r1
}
    2bd4:	b003      	add	sp, #12
    2bd6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    2bda:	2300      	movs	r3, #0
    2bdc:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
    2be0:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
    2be4:	2301      	movs	r3, #1
}
    2be6:	e7c6      	b.n	2b76 <rtc_nrf_isr+0x66>
		z_nrf_rtc_timer_compare_handler_t handler = NULL;
    2be8:	4611      	mov	r1, r2
    2bea:	e7e9      	b.n	2bc0 <rtc_nrf_isr+0xb0>
    2bec:	40011000 	.word	0x40011000
    2bf0:	20000278 	.word	0x20000278
    2bf4:	20000270 	.word	0x20000270
    2bf8:	200000a8 	.word	0x200000a8

00002bfc <sys_clock_set_timeout>:
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    2bfc:	1c43      	adds	r3, r0, #1
{
    2bfe:	b513      	push	{r0, r1, r4, lr}
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    2c00:	d021      	beq.n	2c46 <sys_clock_set_timeout+0x4a>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    2c02:	2801      	cmp	r0, #1
    2c04:	dd21      	ble.n	2c4a <sys_clock_set_timeout+0x4e>
    2c06:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    2c0a:	da20      	bge.n	2c4e <sys_clock_set_timeout+0x52>
    2c0c:	1e44      	subs	r4, r0, #1
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
    2c0e:	f7ff fe79 	bl	2904 <z_nrf_rtc_timer_read>
    2c12:	4b10      	ldr	r3, [pc, #64]	; (2c54 <sys_clock_set_timeout+0x58>)
    2c14:	e9d3 1300 	ldrd	r1, r3, [r3]
    2c18:	1a40      	subs	r0, r0, r1
		ticks = 0;
    2c1a:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    2c1e:	bf28      	it	cs
    2c20:	2400      	movcs	r4, #0
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
    2c22:	3001      	adds	r0, #1
    2c24:	1902      	adds	r2, r0, r4
	uint64_t target_time = cyc + last_count;
    2c26:	480c      	ldr	r0, [pc, #48]	; (2c58 <sys_clock_set_timeout+0x5c>)
    2c28:	4282      	cmp	r2, r0
    2c2a:	bf28      	it	cs
    2c2c:	4602      	movcs	r2, r0
    2c2e:	1852      	adds	r2, r2, r1
    2c30:	f04f 0000 	mov.w	r0, #0
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
    2c34:	4909      	ldr	r1, [pc, #36]	; (2c5c <sys_clock_set_timeout+0x60>)
    2c36:	9001      	str	r0, [sp, #4]
    2c38:	9100      	str	r1, [sp, #0]
    2c3a:	f143 0300 	adc.w	r3, r3, #0
    2c3e:	f7ff fe83 	bl	2948 <compare_set>
}
    2c42:	b002      	add	sp, #8
    2c44:	bd10      	pop	{r4, pc}
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    2c46:	4804      	ldr	r0, [pc, #16]	; (2c58 <sys_clock_set_timeout+0x5c>)
    2c48:	e7e0      	b.n	2c0c <sys_clock_set_timeout+0x10>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    2c4a:	2400      	movs	r4, #0
    2c4c:	e7df      	b.n	2c0e <sys_clock_set_timeout+0x12>
    2c4e:	4c02      	ldr	r4, [pc, #8]	; (2c58 <sys_clock_set_timeout+0x5c>)
    2c50:	e7dd      	b.n	2c0e <sys_clock_set_timeout+0x12>
    2c52:	bf00      	nop
    2c54:	200000b8 	.word	0x200000b8
    2c58:	007fffff 	.word	0x007fffff
    2c5c:	00002831 	.word	0x00002831

00002c60 <sys_clock_elapsed>:
{
    2c60:	b508      	push	{r3, lr}
	return (z_nrf_rtc_timer_read() - last_count) / CYC_PER_TICK;
    2c62:	f7ff fe4f 	bl	2904 <z_nrf_rtc_timer_read>
    2c66:	4b02      	ldr	r3, [pc, #8]	; (2c70 <sys_clock_elapsed+0x10>)
    2c68:	681b      	ldr	r3, [r3, #0]
}
    2c6a:	1ac0      	subs	r0, r0, r3
    2c6c:	bd08      	pop	{r3, pc}
    2c6e:	bf00      	nop
    2c70:	200000b8 	.word	0x200000b8

00002c74 <nrf52_errata_16>:
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            uint32_t var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
    2c74:	f04f 4370 	mov.w	r3, #4026531840	; 0xf0000000
    2c78:	f893 2fe0 	ldrb.w	r2, [r3, #4064]	; 0xfe0
            uint32_t var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
    2c7c:	2a06      	cmp	r2, #6
    2c7e:	d109      	bne.n	2c94 <nrf52_errata_16+0x20>
            uint32_t var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
    2c80:	f8d3 3fe8 	ldr.w	r3, [r3, #4072]	; 0xfe8
    2c84:	f3c3 1303 	ubfx	r3, r3, #4, #4
    2c88:	3b03      	subs	r3, #3
    2c8a:	2b04      	cmp	r3, #4
    2c8c:	d802      	bhi.n	2c94 <nrf52_errata_16+0x20>
    2c8e:	4a02      	ldr	r2, [pc, #8]	; (2c98 <nrf52_errata_16+0x24>)
    2c90:	5cd0      	ldrb	r0, [r2, r3]
    2c92:	4770      	bx	lr
                    default:
                        return false;
                }
            }
        #endif
        return false;
    2c94:	2000      	movs	r0, #0
    #endif
}
    2c96:	4770      	bx	lr
    2c98:	00005370 	.word	0x00005370

00002c9c <nvmc_wait>:

/* -- NVMC utility functions -- */
/* Waits until NVMC is done with the current pending action */
void nvmc_wait(void)
{
    while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
    2c9c:	4a02      	ldr	r2, [pc, #8]	; (2ca8 <nvmc_wait+0xc>)
    2c9e:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
    2ca2:	2b00      	cmp	r3, #0
    2ca4:	d0fb      	beq.n	2c9e <nvmc_wait+0x2>
}
    2ca6:	4770      	bx	lr
    2ca8:	4001e000 	.word	0x4001e000

00002cac <SystemInit>:
{
    SystemCoreClock = __SYSTEM_CLOCK_64M;
}

void SystemInit(void)
{
    2cac:	b510      	push	{r4, lr}
    #endif

    #if NRF52_ERRATA_12_ENABLE_WORKAROUND
        /* Workaround for Errata 12 "COMP: Reference ladder not correctly calibrated" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp */
        if (nrf52_errata_12()){
    2cae:	f002 f82a 	bl	4d06 <nrf52_errata_108>
    2cb2:	b140      	cbz	r0, 2cc6 <SystemInit+0x1a>
            *(volatile uint32_t *)0x40013540 = (*(uint32_t *)0x10000324 & 0x00001F00) >> 8;
    2cb4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    2cb8:	4a90      	ldr	r2, [pc, #576]	; (2efc <SystemInit+0x250>)
    2cba:	f8d3 3324 	ldr.w	r3, [r3, #804]	; 0x324
    2cbe:	f3c3 2304 	ubfx	r3, r3, #8, #5
    2cc2:	f8c2 3540 	str.w	r3, [r2, #1344]	; 0x540
    #endif

    #if NRF52_ERRATA_16_ENABLE_WORKAROUND
        /* Workaround for Errata 16 "System: RAM may be corrupt on wakeup from CPU IDLE" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp */
        if (nrf52_errata_16()){
    2cc6:	f7ff ffd5 	bl	2c74 <nrf52_errata_16>
    2cca:	b110      	cbz	r0, 2cd2 <SystemInit+0x26>
            *(volatile uint32_t *)0x4007C074 = 3131961357ul;
    2ccc:	4b8c      	ldr	r3, [pc, #560]	; (2f00 <SystemInit+0x254>)
    2cce:	4a8d      	ldr	r2, [pc, #564]	; (2f04 <SystemInit+0x258>)
    2cd0:	675a      	str	r2, [r3, #116]	; 0x74
    #endif

    #if NRF52_ERRATA_31_ENABLE_WORKAROUND
        /* Workaround for Errata 31 "CLOCK: Calibration values are not correctly loaded from FICR at reset" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp */
        if (nrf52_errata_31()){
    2cd2:	f002 f818 	bl	4d06 <nrf52_errata_108>
    2cd6:	b148      	cbz	r0, 2cec <SystemInit+0x40>
            *(volatile uint32_t *)0x4000053C = ((*(volatile uint32_t *)0x10000244) & 0x0000E000) >> 13;
    2cd8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    2cdc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    2ce0:	f8d3 3244 	ldr.w	r3, [r3, #580]	; 0x244
    2ce4:	f3c3 3342 	ubfx	r3, r3, #13, #3
    2ce8:	f8c2 353c 	str.w	r3, [r2, #1340]	; 0x53c
    #endif

    #if NRF52_ERRATA_32_ENABLE_WORKAROUND
        /* Workaround for Errata 32 "DIF: Debug session automatically enables TracePort pins" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp */
        if (nrf52_errata_32()){
    2cec:	f7ff ffc2 	bl	2c74 <nrf52_errata_16>
    2cf0:	b130      	cbz	r0, 2d00 <SystemInit+0x54>
            CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
    2cf2:	4a85      	ldr	r2, [pc, #532]	; (2f08 <SystemInit+0x25c>)
    2cf4:	f8d2 30fc 	ldr.w	r3, [r2, #252]	; 0xfc
    2cf8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
    2cfc:	f8c2 30fc 	str.w	r3, [r2, #252]	; 0xfc
    #endif

    #if NRF52_ERRATA_36_ENABLE_WORKAROUND
        /* Workaround for Errata 36 "CLOCK: Some registers are not reset when expected" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_36()){
    2d00:	f002 f801 	bl	4d06 <nrf52_errata_108>
    2d04:	b140      	cbz	r0, 2d18 <SystemInit+0x6c>
            NRF_CLOCK->EVENTS_DONE = 0;
    2d06:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2d0a:	2200      	movs	r2, #0
    2d0c:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
            NRF_CLOCK->EVENTS_CTTO = 0;
    2d10:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            NRF_CLOCK->CTIV = 0;
    2d14:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    #endif

    #if NRF52_ERRATA_37_ENABLE_WORKAROUND
        /* Workaround for Errata 37 "RADIO: Encryption engine is slow by default" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_37()){
    2d18:	f7ff ffac 	bl	2c74 <nrf52_errata_16>
    2d1c:	b120      	cbz	r0, 2d28 <SystemInit+0x7c>
            *(volatile uint32_t *)0x400005A0 = 0x3;
    2d1e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2d22:	2203      	movs	r2, #3
    2d24:	f8c3 25a0 	str.w	r2, [r3, #1440]	; 0x5a0
    #endif

    #if NRF52_ERRATA_57_ENABLE_WORKAROUND
        /* Workaround for Errata 57 "NFCT: NFC Modulation amplitude" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_57()){
    2d28:	f7ff ffa4 	bl	2c74 <nrf52_errata_16>
    2d2c:	b160      	cbz	r0, 2d48 <SystemInit+0x9c>
            *(volatile uint32_t *)0x40005610 = 0x00000005;
    2d2e:	4b77      	ldr	r3, [pc, #476]	; (2f0c <SystemInit+0x260>)
    2d30:	2205      	movs	r2, #5
    2d32:	f8c3 2610 	str.w	r2, [r3, #1552]	; 0x610
            *(volatile uint32_t *)0x40005688 = 0x00000001;
    2d36:	2201      	movs	r2, #1
    2d38:	f8c3 2688 	str.w	r2, [r3, #1672]	; 0x688
            *(volatile uint32_t *)0x40005618 = 0x00000000;
    2d3c:	2200      	movs	r2, #0
    2d3e:	f8c3 2618 	str.w	r2, [r3, #1560]	; 0x618
            *(volatile uint32_t *)0x40005614 = 0x0000003F;
    2d42:	223f      	movs	r2, #63	; 0x3f
    2d44:	f8c3 2614 	str.w	r2, [r3, #1556]	; 0x614
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            uint32_t var1;
            uint32_t var2;

            if (*(uint32_t *)0x10000130ul == 0xFFFFFFFF)
    2d48:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    2d4c:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
    2d50:	1c51      	adds	r1, r2, #1
            {
                var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
    2d52:	bf09      	itett	eq
    2d54:	f04f 4370 	moveq.w	r3, #4026531840	; 0xf0000000
                var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
            }
            else
            {
                var1 = *(uint32_t *)0x10000130ul;
                var2 = *(uint32_t *)0x10000134ul;
    2d58:	f8d3 3134 	ldrne.w	r3, [r3, #308]	; 0x134
                var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
    2d5c:	f893 2fe0 	ldrbeq.w	r2, [r3, #4064]	; 0xfe0
                var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
    2d60:	f8d3 3fe8 	ldreq.w	r3, [r3, #4072]	; 0xfe8
    2d64:	bf08      	it	eq
    2d66:	f3c3 1303 	ubfxeq	r3, r3, #4, #4
            uint32_t var1 = *(uint32_t *)0x10000130ul;
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
    2d6a:	2a06      	cmp	r2, #6
    2d6c:	d14d      	bne.n	2e0a <SystemInit+0x15e>
            {
                switch(var2)
    2d6e:	3b03      	subs	r3, #3
    2d70:	2b04      	cmp	r3, #4
    2d72:	d803      	bhi.n	2d7c <SystemInit+0xd0>
    #endif

    #if NRF52_ERRATA_66_ENABLE_WORKAROUND
        /* Workaround for Errata 66 "TEMP: Linearity specification not met with default settings" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_66()){
    2d74:	4a66      	ldr	r2, [pc, #408]	; (2f10 <SystemInit+0x264>)
    2d76:	5cd3      	ldrb	r3, [r2, r3]
    2d78:	2b00      	cmp	r3, #0
    2d7a:	d046      	beq.n	2e0a <SystemInit+0x15e>
            NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
    2d7c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    2d80:	4b64      	ldr	r3, [pc, #400]	; (2f14 <SystemInit+0x268>)
    2d82:	f8d2 1404 	ldr.w	r1, [r2, #1028]	; 0x404
    2d86:	f8c3 1520 	str.w	r1, [r3, #1312]	; 0x520
            NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
    2d8a:	f8d2 1408 	ldr.w	r1, [r2, #1032]	; 0x408
    2d8e:	f8c3 1524 	str.w	r1, [r3, #1316]	; 0x524
            NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
    2d92:	f8d2 140c 	ldr.w	r1, [r2, #1036]	; 0x40c
    2d96:	f8c3 1528 	str.w	r1, [r3, #1320]	; 0x528
            NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
    2d9a:	f8d2 1410 	ldr.w	r1, [r2, #1040]	; 0x410
    2d9e:	f8c3 152c 	str.w	r1, [r3, #1324]	; 0x52c
            NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
    2da2:	f8d2 1414 	ldr.w	r1, [r2, #1044]	; 0x414
    2da6:	f8c3 1530 	str.w	r1, [r3, #1328]	; 0x530
            NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
    2daa:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
    2dae:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
            NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
    2db2:	f8d2 141c 	ldr.w	r1, [r2, #1052]	; 0x41c
    2db6:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
            NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
    2dba:	f8d2 1420 	ldr.w	r1, [r2, #1056]	; 0x420
    2dbe:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
            NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
    2dc2:	f8d2 1424 	ldr.w	r1, [r2, #1060]	; 0x424
    2dc6:	f8c3 1548 	str.w	r1, [r3, #1352]	; 0x548
            NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
    2dca:	f8d2 1428 	ldr.w	r1, [r2, #1064]	; 0x428
    2dce:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c
            NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
    2dd2:	f8d2 142c 	ldr.w	r1, [r2, #1068]	; 0x42c
    2dd6:	f8c3 1550 	str.w	r1, [r3, #1360]	; 0x550
            NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
    2dda:	f8d2 1430 	ldr.w	r1, [r2, #1072]	; 0x430
    2dde:	f8c3 1554 	str.w	r1, [r3, #1364]	; 0x554
            NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
    2de2:	f8d2 1434 	ldr.w	r1, [r2, #1076]	; 0x434
    2de6:	f8c3 1560 	str.w	r1, [r3, #1376]	; 0x560
            NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
    2dea:	f8d2 1438 	ldr.w	r1, [r2, #1080]	; 0x438
    2dee:	f8c3 1564 	str.w	r1, [r3, #1380]	; 0x564
            NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
    2df2:	f8d2 143c 	ldr.w	r1, [r2, #1084]	; 0x43c
    2df6:	f8c3 1568 	str.w	r1, [r3, #1384]	; 0x568
            NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
    2dfa:	f8d2 1440 	ldr.w	r1, [r2, #1088]	; 0x440
    2dfe:	f8c3 156c 	str.w	r1, [r3, #1388]	; 0x56c
            NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
    2e02:	f8d2 2444 	ldr.w	r2, [r2, #1092]	; 0x444
    2e06:	f8c3 2570 	str.w	r2, [r3, #1392]	; 0x570
    #endif

    #if NRF52_ERRATA_108_ENABLE_WORKAROUND
        /* Workaround for Errata 108 "RAM: RAM content cannot be trusted upon waking up from System ON Idle or System OFF mode" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_108()){
    2e0a:	f001 ff7c 	bl	4d06 <nrf52_errata_108>
    2e0e:	b148      	cbz	r0, 2e24 <SystemInit+0x178>
            *(volatile uint32_t *)0x40000EE4ul = *(volatile uint32_t *)0x10000258ul & 0x0000004Ful;
    2e10:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    2e14:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    2e18:	f8d3 3258 	ldr.w	r3, [r3, #600]	; 0x258
    2e1c:	f003 034f 	and.w	r3, r3, #79	; 0x4f
    2e20:	f8c2 3ee4 	str.w	r3, [r2, #3812]	; 0xee4
    #endif

    #if NRF52_ERRATA_136_ENABLE_WORKAROUND
        /* Workaround for Errata 136 "System: Bits in RESETREAS are set when they should not be" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_136()){
    2e24:	f001 ff6f 	bl	4d06 <nrf52_errata_108>
    2e28:	b148      	cbz	r0, 2e3e <SystemInit+0x192>
            if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk){
    2e2a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2e2e:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    2e32:	07d2      	lsls	r2, r2, #31
                NRF_POWER->RESETREAS =  ~POWER_RESETREAS_RESETPIN_Msk;
    2e34:	bf44      	itt	mi
    2e36:	f06f 0201 	mvnmi.w	r2, #1
    2e3a:	f8c3 2400 	strmi.w	r2, [r3, #1024]	; 0x400
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    2e3e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
    2e42:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
    2e46:	2a06      	cmp	r2, #6
    2e48:	d126      	bne.n	2e98 <SystemInit+0x1ec>
            {
                switch(var2)
    2e4a:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
    2e4e:	3b03      	subs	r3, #3
    2e50:	2b04      	cmp	r3, #4
    2e52:	d802      	bhi.n	2e5a <SystemInit+0x1ae>
    #endif

    #if NRF52_ERRATA_182_ENABLE_WORKAROUND
        /* Workaround for Errata 182 "RADIO: Fixes for anomalies #102, #106, and #107 do not take effect" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_182()){
    2e54:	4a30      	ldr	r2, [pc, #192]	; (2f18 <SystemInit+0x26c>)
    2e56:	5cd3      	ldrb	r3, [r2, r3]
    2e58:	b163      	cbz	r3, 2e74 <SystemInit+0x1c8>
            *(volatile uint32_t *) 0x4000173C |= (0x1 << 10);
    2e5a:	4a30      	ldr	r2, [pc, #192]	; (2f1c <SystemInit+0x270>)
    2e5c:	f8d2 373c 	ldr.w	r3, [r2, #1852]	; 0x73c
    2e60:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
    2e64:	f8c2 373c 	str.w	r3, [r2, #1852]	; 0x73c
         || defined (NRF52820_XXAA) || defined (DEVELOP_IN_NRF52820)\
         || defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    2e68:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
    2e6c:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
    2e70:	2b06      	cmp	r3, #6
    2e72:	d111      	bne.n	2e98 <SystemInit+0x1ec>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    2e74:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    2e78:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
    2e7c:	3b03      	subs	r3, #3
    2e7e:	2b04      	cmp	r3, #4
    2e80:	d802      	bhi.n	2e88 <SystemInit+0x1dc>
            {
                /* Prevent processor from unlocking APPROTECT soft branch after this point. */
                NRF_APPROTECT->FORCEPROTECT = APPROTECT_FORCEPROTECT_FORCEPROTECT_Force;
            }
        #else
            if (nrf52_configuration_249())
    2e82:	4a27      	ldr	r2, [pc, #156]	; (2f20 <SystemInit+0x274>)
    2e84:	5cd3      	ldrb	r3, [r2, r3]
    2e86:	b13b      	cbz	r3, 2e98 <SystemInit+0x1ec>
            {
                /* Load APPROTECT soft branch from UICR.
                   If UICR->APPROTECT is disabled, POWER->APPROTECT will be disabled. */
                NRF_APPROTECT->DISABLE = NRF_UICR->APPROTECT;
    2e88:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    2e8c:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
    2e90:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2e94:	f8c3 2558 	str.w	r2, [r3, #1368]	; 0x558

    /* Configure GPIO pads as pPin Reset pin if Pin Reset capabilities desired. If CONFIG_GPIO_AS_PINRESET is not
      defined, pin reset will not be available. One GPIO (see Product Specification to see which one) will then be
      reserved for PinReset and not available as normal GPIO. */
    #if defined (CONFIG_GPIO_AS_PINRESET)
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
    2e98:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    2e9c:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    2ea0:	2a00      	cmp	r2, #0
    2ea2:	db03      	blt.n	2eac <SystemInit+0x200>
            ((NRF_UICR->PSELRESET[1] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos))){
    2ea4:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
    2ea8:	2b00      	cmp	r3, #0
    2eaa:	da22      	bge.n	2ef2 <SystemInit+0x246>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    2eac:	491d      	ldr	r1, [pc, #116]	; (2f24 <SystemInit+0x278>)
    2eae:	2301      	movs	r3, #1
            nvmc_config(NVMC_CONFIG_WEN_Wen);
            NRF_UICR->PSELRESET[0] = RESET_PIN;
    2eb0:	f04f 2010 	mov.w	r0, #268439552	; 0x10001000
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    2eb4:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
            NRF_UICR->PSELRESET[0] = RESET_PIN;
    2eb8:	2415      	movs	r4, #21
    nvmc_wait();
    2eba:	f7ff feef 	bl	2c9c <nvmc_wait>
            NRF_UICR->PSELRESET[0] = RESET_PIN;
    2ebe:	f8c0 4200 	str.w	r4, [r0, #512]	; 0x200
            nvmc_wait();
    2ec2:	f7ff feeb 	bl	2c9c <nvmc_wait>
            NRF_UICR->PSELRESET[1] = RESET_PIN;
    2ec6:	f8c0 4204 	str.w	r4, [r0, #516]	; 0x204
            nvmc_wait();
    2eca:	f7ff fee7 	bl	2c9c <nvmc_wait>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    2ece:	2300      	movs	r3, #0
    2ed0:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
    nvmc_wait();
    2ed4:	f7ff fee2 	bl	2c9c <nvmc_wait>
  __ASM volatile ("dsb 0xF":::"memory");
    2ed8:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    2edc:	490a      	ldr	r1, [pc, #40]	; (2f08 <SystemInit+0x25c>)
    2ede:	4b12      	ldr	r3, [pc, #72]	; (2f28 <SystemInit+0x27c>)
    2ee0:	68ca      	ldr	r2, [r1, #12]
    2ee2:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    2ee6:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    2ee8:	60cb      	str	r3, [r1, #12]
    2eea:	f3bf 8f4f 	dsb	sy
    __NOP();
    2eee:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    2ef0:	e7fd      	b.n	2eee <SystemInit+0x242>
    SystemCoreClock = __SYSTEM_CLOCK_64M;
    2ef2:	4b0e      	ldr	r3, [pc, #56]	; (2f2c <SystemInit+0x280>)
    2ef4:	4a0e      	ldr	r2, [pc, #56]	; (2f30 <SystemInit+0x284>)
    2ef6:	601a      	str	r2, [r3, #0]
            NVIC_SystemReset();
        }
    #endif

    SystemCoreClockUpdate();
}
    2ef8:	bd10      	pop	{r4, pc}
    2efa:	bf00      	nop
    2efc:	40013000 	.word	0x40013000
    2f00:	4007c000 	.word	0x4007c000
    2f04:	baadf00d 	.word	0xbaadf00d
    2f08:	e000ed00 	.word	0xe000ed00
    2f0c:	40005000 	.word	0x40005000
    2f10:	00005361 	.word	0x00005361
    2f14:	4000c000 	.word	0x4000c000
    2f18:	00005366 	.word	0x00005366
    2f1c:	40001000 	.word	0x40001000
    2f20:	0000536b 	.word	0x0000536b
    2f24:	4001e000 	.word	0x4001e000
    2f28:	05fa0004 	.word	0x05fa0004
    2f2c:	20000028 	.word	0x20000028
    2f30:	03d09000 	.word	0x03d09000

00002f34 <nrfx_flag32_alloc>:
{
    return (mask & NRFX_BIT(bitpos)) ? false : true;
}

nrfx_err_t nrfx_flag32_alloc(nrfx_atomic_t * p_mask, uint8_t *p_flag)
{
    2f34:	b570      	push	{r4, r5, r6, lr}
        idx = 31 - NRF_CLZ(prev_mask);
        if (idx < 0) {
            return NRFX_ERROR_NO_MEM;
        }

        new_mask = prev_mask & ~NRFX_BIT(idx);
    2f36:	2501      	movs	r5, #1
        prev_mask = *p_mask;
    2f38:	6802      	ldr	r2, [r0, #0]
        idx = 31 - NRF_CLZ(prev_mask);
    2f3a:	fab2 f382 	clz	r3, r2
    2f3e:	f1c3 031f 	rsb	r3, r3, #31
        if (idx < 0) {
    2f42:	1c5e      	adds	r6, r3, #1
        idx = 31 - NRF_CLZ(prev_mask);
    2f44:	b2dc      	uxtb	r4, r3
        if (idx < 0) {
    2f46:	d014      	beq.n	2f72 <nrfx_flag32_alloc+0x3e>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    2f48:	f3bf 8f5b 	dmb	ish
        new_mask = prev_mask & ~NRFX_BIT(idx);
    2f4c:	fa05 f303 	lsl.w	r3, r5, r3
    2f50:	ea22 0303 	bic.w	r3, r2, r3
    2f54:	e850 6f00 	ldrex	r6, [r0]
    2f58:	4296      	cmp	r6, r2
    2f5a:	d104      	bne.n	2f66 <nrfx_flag32_alloc+0x32>
    2f5c:	e840 3c00 	strex	ip, r3, [r0]
    2f60:	f1bc 0f00 	cmp.w	ip, #0
    2f64:	d1f6      	bne.n	2f54 <nrfx_flag32_alloc+0x20>
    2f66:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
    2f6a:	d1e5      	bne.n	2f38 <nrfx_flag32_alloc+0x4>

    *p_flag = idx;

    return NRFX_SUCCESS;
    2f6c:	4802      	ldr	r0, [pc, #8]	; (2f78 <nrfx_flag32_alloc+0x44>)
    *p_flag = idx;
    2f6e:	700c      	strb	r4, [r1, #0]
}
    2f70:	bd70      	pop	{r4, r5, r6, pc}
            return NRFX_ERROR_NO_MEM;
    2f72:	4802      	ldr	r0, [pc, #8]	; (2f7c <nrfx_flag32_alloc+0x48>)
    2f74:	e7fc      	b.n	2f70 <nrfx_flag32_alloc+0x3c>
    2f76:	bf00      	nop
    2f78:	0bad0000 	.word	0x0bad0000
    2f7c:	0bad0002 	.word	0x0bad0002

00002f80 <nrfx_flag32_free>:

nrfx_err_t nrfx_flag32_free(nrfx_atomic_t * p_mask, uint8_t flag)
{
    uint32_t new_mask, prev_mask;

    if ((NRFX_BIT(flag) & *p_mask))
    2f80:	6803      	ldr	r3, [r0, #0]
    2f82:	40cb      	lsrs	r3, r1
    2f84:	07db      	lsls	r3, r3, #31
{
    2f86:	b510      	push	{r4, lr}
    if ((NRFX_BIT(flag) & *p_mask))
    2f88:	d415      	bmi.n	2fb6 <nrfx_flag32_free+0x36>
        return NRFX_ERROR_INVALID_PARAM;
    }

    do {
        prev_mask = *p_mask;
        new_mask = prev_mask | NRFX_BIT(flag);
    2f8a:	2301      	movs	r3, #1
    2f8c:	fa03 f101 	lsl.w	r1, r3, r1
        prev_mask = *p_mask;
    2f90:	6803      	ldr	r3, [r0, #0]
    2f92:	f3bf 8f5b 	dmb	ish
        new_mask = prev_mask | NRFX_BIT(flag);
    2f96:	ea41 0203 	orr.w	r2, r1, r3
    2f9a:	e850 4f00 	ldrex	r4, [r0]
    2f9e:	429c      	cmp	r4, r3
    2fa0:	d104      	bne.n	2fac <nrfx_flag32_free+0x2c>
    2fa2:	e840 2c00 	strex	ip, r2, [r0]
    2fa6:	f1bc 0f00 	cmp.w	ip, #0
    2faa:	d1f6      	bne.n	2f9a <nrfx_flag32_free+0x1a>
    2fac:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
    2fb0:	d1ee      	bne.n	2f90 <nrfx_flag32_free+0x10>

    return NRFX_SUCCESS;
    2fb2:	4802      	ldr	r0, [pc, #8]	; (2fbc <nrfx_flag32_free+0x3c>)
}
    2fb4:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
    2fb6:	4802      	ldr	r0, [pc, #8]	; (2fc0 <nrfx_flag32_free+0x40>)
    2fb8:	e7fc      	b.n	2fb4 <nrfx_flag32_free+0x34>
    2fba:	bf00      	nop
    2fbc:	0bad0000 	.word	0x0bad0000
    2fc0:	0bad0004 	.word	0x0bad0004

00002fc4 <clock_stop>:
    CoreDebug->DEMCR = core_debug;
}
#endif // NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_132)

static void clock_stop(nrf_clock_domain_t domain)
{
    2fc4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    switch (domain)
    2fc6:	4604      	mov	r4, r0
    2fc8:	b118      	cbz	r0, 2fd2 <clock_stop+0xe>
    2fca:	2801      	cmp	r0, #1
    2fcc:	d029      	beq.n	3022 <clock_stop+0x5e>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    {
            m_clock_cb.hfclk_started = false;
    }
#endif
}
    2fce:	b003      	add	sp, #12
    2fd0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    p_reg->INTENCLR = mask;
    2fd2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2fd6:	2202      	movs	r2, #2
    2fd8:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    2fdc:	f8c3 0104 	str.w	r0, [r3, #260]	; 0x104
    2fe0:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    2fe4:	2201      	movs	r2, #1
    2fe6:	60da      	str	r2, [r3, #12]
    nrf_clock_hfclk_t clk_src = NRF_CLOCK_HFCLK_HIGH_ACCURACY;
    2fe8:	2301      	movs	r3, #1
    nrf_clock_hfclk_t *p_clk_src = (domain == NRF_CLOCK_DOMAIN_HFCLK) ? &clk_src : NULL;
    2fea:	429c      	cmp	r4, r3
    nrf_clock_hfclk_t clk_src = NRF_CLOCK_HFCLK_HIGH_ACCURACY;
    2fec:	f88d 3007 	strb.w	r3, [sp, #7]
    nrf_clock_hfclk_t *p_clk_src = (domain == NRF_CLOCK_DOMAIN_HFCLK) ? &clk_src : NULL;
    2ff0:	bf14      	ite	ne
    2ff2:	2500      	movne	r5, #0
    2ff4:	f10d 0507 	addeq.w	r5, sp, #7
    2ff8:	f242 7710 	movw	r7, #10000	; 0x2710
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    2ffc:	f04f 4680 	mov.w	r6, #1073741824	; 0x40000000
    switch (domain)
    3000:	b1d4      	cbz	r4, 3038 <clock_stop+0x74>
    3002:	2c01      	cmp	r4, #1
    3004:	d1e3      	bne.n	2fce <clock_stop+0xa>
            if (p_clk_src != NULL)
    3006:	b125      	cbz	r5, 3012 <clock_stop+0x4e>
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    3008:	f8d6 340c 	ldr.w	r3, [r6, #1036]	; 0x40c
    300c:	f003 0301 	and.w	r3, r3, #1
                (*(nrf_clock_hfclk_t *)p_clk_src) =
    3010:	702b      	strb	r3, [r5, #0]
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    3012:	f8d6 340c 	ldr.w	r3, [r6, #1036]	; 0x40c
    3016:	03db      	lsls	r3, r3, #15
    3018:	d418      	bmi.n	304c <clock_stop+0x88>
            m_clock_cb.hfclk_started = false;
    301a:	4b13      	ldr	r3, [pc, #76]	; (3068 <clock_stop+0xa4>)
    301c:	2200      	movs	r2, #0
    301e:	715a      	strb	r2, [r3, #5]
    3020:	e7d5      	b.n	2fce <clock_stop+0xa>
    p_reg->INTENCLR = mask;
    3022:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    3026:	2200      	movs	r2, #0
    p_reg->INTENCLR = mask;
    3028:	f8c3 0308 	str.w	r0, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    302c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    3030:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    3034:	6058      	str	r0, [r3, #4]
}
    3036:	e7d7      	b.n	2fe8 <clock_stop+0x24>
            if (p_clk_src != NULL)
    3038:	b125      	cbz	r5, 3044 <clock_stop+0x80>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    303a:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    303e:	f003 0303 	and.w	r3, r3, #3
                (*(nrf_clock_lfclk_t *)p_clk_src) =
    3042:	602b      	str	r3, [r5, #0]
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    3044:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
    3048:	03da      	lsls	r2, r3, #15
    304a:	d5c0      	bpl.n	2fce <clock_stop+0xa>
    NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, p_clk_src) ||
    304c:	b92d      	cbnz	r5, 305a <clock_stop+0x96>
    304e:	2001      	movs	r0, #1
    3050:	f001 fe68 	bl	4d24 <nrfx_busy_wait>
    3054:	3f01      	subs	r7, #1
    3056:	d1d3      	bne.n	3000 <clock_stop+0x3c>
    3058:	e003      	b.n	3062 <clock_stop+0x9e>
    305a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    305e:	2b01      	cmp	r3, #1
    3060:	d0f5      	beq.n	304e <clock_stop+0x8a>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    3062:	2c01      	cmp	r4, #1
    3064:	d0d9      	beq.n	301a <clock_stop+0x56>
    3066:	e7b2      	b.n	2fce <clock_stop+0xa>
    3068:	2000027c 	.word	0x2000027c

0000306c <nrfx_clock_init>:
nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
    NRFX_ASSERT(event_handler);

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
    306c:	4b04      	ldr	r3, [pc, #16]	; (3080 <nrfx_clock_init+0x14>)
    306e:	791a      	ldrb	r2, [r3, #4]
    3070:	b922      	cbnz	r2, 307c <nrfx_clock_init+0x10>
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
        m_clock_cb.module_initialized = true;
    3072:	2201      	movs	r2, #1
        m_clock_cb.event_handler = event_handler;
    3074:	6018      	str	r0, [r3, #0]
        m_clock_cb.module_initialized = true;
    3076:	809a      	strh	r2, [r3, #4]
    nrfx_err_t err_code = NRFX_SUCCESS;
    3078:	4802      	ldr	r0, [pc, #8]	; (3084 <nrfx_clock_init+0x18>)
    307a:	4770      	bx	lr
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
    307c:	4802      	ldr	r0, [pc, #8]	; (3088 <nrfx_clock_init+0x1c>)
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    307e:	4770      	bx	lr
    3080:	2000027c 	.word	0x2000027c
    3084:	0bad0000 	.word	0x0bad0000
    3088:	0bad000c 	.word	0x0bad000c

0000308c <nrfx_clock_start>:
    m_clock_cb.module_initialized = false;
    NRFX_LOG_INFO("Uninitialized.");
}

void nrfx_clock_start(nrf_clock_domain_t domain)
{
    308c:	b538      	push	{r3, r4, r5, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
    switch (domain)
    308e:	b110      	cbz	r0, 3096 <nrfx_clock_start+0xa>
    3090:	2801      	cmp	r0, #1
    3092:	d044      	beq.n	311e <nrfx_clock_start+0x92>
#endif
        default:
            NRFX_ASSERT(0);
            break;
    }
}
    3094:	bd38      	pop	{r3, r4, r5, pc}
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    3096:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    309a:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    309e:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
    30a2:	f413 3380 	ands.w	r3, r3, #65536	; 0x10000
    30a6:	d10b      	bne.n	30c0 <nrfx_clock_start+0x34>
            return ((p_reg->LFCLKRUN & CLOCK_LFCLKRUN_STATUS_Msk)
    30a8:	f8d2 1414 	ldr.w	r1, [r2, #1044]	; 0x414
                else if (nrf_clock_start_task_check(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK))
    30ac:	07c9      	lsls	r1, r1, #31
    30ae:	d510      	bpl.n	30d2 <nrfx_clock_start+0x46>
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    30b0:	f8d2 341c 	ldr.w	r3, [r2, #1052]	; 0x41c
    if (!is_correct_clk)
    30b4:	079b      	lsls	r3, r3, #30
    30b6:	d408      	bmi.n	30ca <nrfx_clock_start+0x3e>
    p_reg->INTENSET = mask;
    30b8:	2302      	movs	r3, #2
    30ba:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
                        break;
    30be:	e7e9      	b.n	3094 <nrfx_clock_start+0x8>
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    30c0:	f001 0303 	and.w	r3, r1, #3
    is_correct_clk = is_correct_clk || (*p_lfclksrc == NRF_CLOCK_LFCLK_RC);
    30c4:	2b01      	cmp	r3, #1
    30c6:	d004      	beq.n	30d2 <nrfx_clock_start+0x46>
    if (!is_correct_clk)
    30c8:	b11b      	cbz	r3, 30d2 <nrfx_clock_start+0x46>
        clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
    30ca:	2000      	movs	r0, #0
    30cc:	f7ff ff7a 	bl	2fc4 <clock_stop>
        *p_lfclksrc = clock_initial_lfclksrc_get();
    30d0:	2300      	movs	r3, #0
    p_reg->LFCLKSRC = (uint32_t)(source);
    30d2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    30d6:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    30da:	2300      	movs	r3, #0
    30dc:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
    30e0:	f8d2 3104 	ldr.w	r3, [r2, #260]	; 0x104
    p_reg->INTENSET = mask;
    30e4:	2302      	movs	r3, #2
    30e6:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
    core_debug = CoreDebug->DEMCR;
    30ea:	4a12      	ldr	r2, [pc, #72]	; (3134 <nrfx_clock_start+0xa8>)
    30ec:	f8d2 00fc 	ldr.w	r0, [r2, #252]	; 0xfc
    CoreDebug->DEMCR = core_debug | CoreDebug_DEMCR_TRCENA_Msk;
    30f0:	f040 7380 	orr.w	r3, r0, #16777216	; 0x1000000
    30f4:	f8c2 30fc 	str.w	r3, [r2, #252]	; 0xfc
    dwt_ctrl = DWT->CTRL;
    30f8:	4b0f      	ldr	r3, [pc, #60]	; (3138 <nrfx_clock_start+0xac>)
    30fa:	681c      	ldr	r4, [r3, #0]
    DWT->CTRL = dwt_ctrl | DWT_CTRL_CYCCNTENA_Msk;
    30fc:	f044 0101 	orr.w	r1, r4, #1
    3100:	6019      	str	r1, [r3, #0]
    cyccnt_inital = DWT->CYCCNT;
    3102:	685d      	ldr	r5, [r3, #4]
    while ((DWT->CYCCNT - cyccnt_inital) < ANOMALY_132_DELAY_CYCLES)
    3104:	6859      	ldr	r1, [r3, #4]
    3106:	1b49      	subs	r1, r1, r5
    3108:	f5b1 5f0a 	cmp.w	r1, #8832	; 0x2280
    310c:	d3fa      	bcc.n	3104 <nrfx_clock_start+0x78>
    DWT->CTRL = dwt_ctrl;
    310e:	601c      	str	r4, [r3, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    3110:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    CoreDebug->DEMCR = core_debug;
    3114:	f8c2 00fc 	str.w	r0, [r2, #252]	; 0xfc
    3118:	2201      	movs	r2, #1
    311a:	609a      	str	r2, [r3, #8]
}
    311c:	e7ba      	b.n	3094 <nrfx_clock_start+0x8>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    311e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    3122:	2200      	movs	r2, #0
    3124:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    3128:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENSET = mask;
    312c:	f8c3 0304 	str.w	r0, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    3130:	6018      	str	r0, [r3, #0]
}
    3132:	e7af      	b.n	3094 <nrfx_clock_start+0x8>
    3134:	e000ed00 	.word	0xe000ed00
    3138:	e0001000 	.word	0xe0001000

0000313c <nrfx_power_clock_irq_handler>:
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    313c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
    3140:	b510      	push	{r4, lr}
    3142:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
    3146:	b16a      	cbz	r2, 3164 <nrfx_power_clock_irq_handler+0x28>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    3148:	2200      	movs	r2, #0
    314a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    314e:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENCLR = mask;
    3152:	2201      	movs	r2, #1
    3154:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_HFCLKSTARTED");
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF_STARTED_MASK);

#if NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_201)
        if (!m_clock_cb.hfclk_started)
    3158:	4b11      	ldr	r3, [pc, #68]	; (31a0 <nrfx_power_clock_irq_handler+0x64>)
    315a:	7958      	ldrb	r0, [r3, #5]
    315c:	b910      	cbnz	r0, 3164 <nrfx_power_clock_irq_handler+0x28>
        {
            m_clock_cb.hfclk_started = true;
    315e:	715a      	strb	r2, [r3, #5]
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
    3160:	681b      	ldr	r3, [r3, #0]
    3162:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    3164:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    3168:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
    316c:	b172      	cbz	r2, 318c <nrfx_power_clock_irq_handler+0x50>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    316e:	2200      	movs	r2, #0
    3170:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    3174:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    3178:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    317c:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_LFCLKSTARTED");

#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
        nrf_clock_lfclk_t lfclksrc;
        (void)nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc);
        if (lfclksrc == NRF_CLOCK_LFCLK_RC)
    3180:	0792      	lsls	r2, r2, #30
    3182:	d104      	bne.n	318e <nrfx_power_clock_irq_handler+0x52>
    p_reg->LFCLKSRC = (uint32_t)(source);
    3184:	2201      	movs	r2, #1
    3186:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    318a:	609a      	str	r2, [r3, #8]
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    }
#endif
}
    318c:	bd10      	pop	{r4, pc}
    p_reg->INTENCLR = mask;
    318e:	2202      	movs	r2, #2
    3190:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
    3194:	4b02      	ldr	r3, [pc, #8]	; (31a0 <nrfx_power_clock_irq_handler+0x64>)
}
    3196:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
    319a:	681b      	ldr	r3, [r3, #0]
    319c:	2001      	movs	r0, #1
    319e:	4718      	bx	r3
    31a0:	2000027c 	.word	0x2000027c

000031a4 <pin_in_use_by_te>:
 *
 * @return True if pin uses GPIOTE task/event.
 */
static bool pin_in_use_by_te(uint32_t pin)
{
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
    31a4:	4b03      	ldr	r3, [pc, #12]	; (31b4 <pin_in_use_by_te+0x10>)
    31a6:	3008      	adds	r0, #8
    31a8:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    31ac:	f3c0 1040 	ubfx	r0, r0, #5, #1
    31b0:	4770      	bx	lr
    31b2:	bf00      	nop
    31b4:	2000002c 	.word	0x2000002c

000031b8 <call_handler>:
    nrf_gpiote_event_t event = nrfx_gpiote_in_event_get(pin);
    return nrf_gpiote_event_address_get(NRF_GPIOTE, event);
}

static void call_handler(nrfx_gpiote_pin_t pin, nrfx_gpiote_trigger_t trigger)
{
    31b8:	b570      	push	{r4, r5, r6, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    31ba:	f100 0308 	add.w	r3, r0, #8
    31be:	4c0c      	ldr	r4, [pc, #48]	; (31f0 <call_handler+0x38>)
    31c0:	f834 3013 	ldrh.w	r3, [r4, r3, lsl #1]
    31c4:	05da      	lsls	r2, r3, #23
{
    31c6:	4605      	mov	r5, r0
    31c8:	460e      	mov	r6, r1
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    31ca:	d507      	bpl.n	31dc <call_handler+0x24>
    31cc:	f3c3 2343 	ubfx	r3, r3, #9, #4
    nrfx_gpiote_handler_config_t const * handler = channel_handler_get(pin);

    if (handler)
    {
        handler->handler(pin, trigger, handler->p_context);
    31d0:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
    31d4:	f854 3033 	ldr.w	r3, [r4, r3, lsl #3]
    31d8:	6852      	ldr	r2, [r2, #4]
    31da:	4798      	blx	r3
    }
    if (m_cb.global_handler.handler)
    31dc:	68a3      	ldr	r3, [r4, #8]
    31de:	b12b      	cbz	r3, 31ec <call_handler+0x34>
    {
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
    31e0:	68e2      	ldr	r2, [r4, #12]
    31e2:	4631      	mov	r1, r6
    31e4:	4628      	mov	r0, r5
    }
}
    31e6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
    31ea:	4718      	bx	r3
}
    31ec:	bd70      	pop	{r4, r5, r6, pc}
    31ee:	bf00      	nop
    31f0:	2000002c 	.word	0x2000002c

000031f4 <release_handler>:
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    31f4:	4a12      	ldr	r2, [pc, #72]	; (3240 <release_handler+0x4c>)
    31f6:	3008      	adds	r0, #8
{
    31f8:	b410      	push	{r4}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    31fa:	f832 3010 	ldrh.w	r3, [r2, r0, lsl #1]
    31fe:	05d9      	lsls	r1, r3, #23
    3200:	d51b      	bpl.n	323a <release_handler+0x46>
    3202:	f3c3 2143 	ubfx	r1, r3, #9, #4
    m_cb.pin_flags[pin] &= ~PIN_HANDLER_MASK;
    3206:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
    320a:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
    320e:	f102 0410 	add.w	r4, r2, #16
    3212:	2000      	movs	r0, #0
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
    3214:	f834 3b02 	ldrh.w	r3, [r4], #2
    3218:	f413 7f80 	tst.w	r3, #256	; 0x100
    321c:	d003      	beq.n	3226 <release_handler+0x32>
    321e:	f3c3 2343 	ubfx	r3, r3, #9, #4
    3222:	4299      	cmp	r1, r3
    3224:	d009      	beq.n	323a <release_handler+0x46>
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
    3226:	3001      	adds	r0, #1
    3228:	2820      	cmp	r0, #32
    322a:	d1f3      	bne.n	3214 <release_handler+0x20>
        m_cb.handlers[handler_id].handler = NULL;
    322c:	2300      	movs	r3, #0
    322e:	f842 3031 	str.w	r3, [r2, r1, lsl #3]
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
    3232:	4804      	ldr	r0, [pc, #16]	; (3244 <release_handler+0x50>)
}
    3234:	bc10      	pop	{r4}
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
    3236:	f7ff bea3 	b.w	2f80 <nrfx_flag32_free>
}
    323a:	bc10      	pop	{r4}
    323c:	4770      	bx	lr
    323e:	bf00      	nop
    3240:	2000002c 	.word	0x2000002c
    3244:	20000080 	.word	0x20000080

00003248 <pin_handler_trigger_uninit>:
{
    3248:	b538      	push	{r3, r4, r5, lr}
    324a:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin))
    324c:	f7ff ffaa 	bl	31a4 <pin_in_use_by_te>
    3250:	4c09      	ldr	r4, [pc, #36]	; (3278 <pin_handler_trigger_uninit+0x30>)
    3252:	f102 0508 	add.w	r5, r2, #8
    3256:	b140      	cbz	r0, 326a <pin_handler_trigger_uninit+0x22>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    3258:	f834 3015 	ldrh.w	r3, [r4, r5, lsl #1]
                         ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
}

NRF_STATIC_INLINE void nrf_gpiote_te_default(NRF_GPIOTE_Type * p_reg, uint32_t idx)
{
    p_reg->CONFIG[idx] = 0;
    325c:	4907      	ldr	r1, [pc, #28]	; (327c <pin_handler_trigger_uninit+0x34>)
        nrf_gpiote_te_default(NRF_GPIOTE, pin_te_get(pin));
    325e:	0b5b      	lsrs	r3, r3, #13
    3260:	f503 73a2 	add.w	r3, r3, #324	; 0x144
    3264:	2000      	movs	r0, #0
    3266:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
    release_handler(pin);
    326a:	4610      	mov	r0, r2
    326c:	f7ff ffc2 	bl	31f4 <release_handler>
    m_cb.pin_flags[pin] = PIN_FLAG_NOT_USED;
    3270:	2300      	movs	r3, #0
    3272:	f824 3015 	strh.w	r3, [r4, r5, lsl #1]
}
    3276:	bd38      	pop	{r3, r4, r5, pc}
    3278:	2000002c 	.word	0x2000002c
    327c:	40006000 	.word	0x40006000

00003280 <nrfx_gpiote_input_configure>:
{
    3280:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    3284:	4604      	mov	r4, r0
    3286:	461e      	mov	r6, r3
    if (p_input_config)
    3288:	b309      	cbz	r1, 32ce <nrfx_gpiote_input_configure+0x4e>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    328a:	4f4d      	ldr	r7, [pc, #308]	; (33c0 <nrfx_gpiote_input_configure+0x140>)
    328c:	f100 0808 	add.w	r8, r0, #8
    3290:	f837 5018 	ldrh.w	r5, [r7, r8, lsl #1]
    return pin_is_output(pin) && pin_in_use_by_te(pin);
    3294:	07ab      	lsls	r3, r5, #30
    3296:	d506      	bpl.n	32a6 <nrfx_gpiote_input_configure+0x26>
    3298:	f7ff ff84 	bl	31a4 <pin_in_use_by_te>
        if (pin_is_task_output(pin))
    329c:	b118      	cbz	r0, 32a6 <nrfx_gpiote_input_configure+0x26>
            return NRFX_ERROR_INVALID_PARAM;
    329e:	4849      	ldr	r0, [pc, #292]	; (33c4 <nrfx_gpiote_input_configure+0x144>)
}
    32a0:	b002      	add	sp, #8
    32a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    *p_pin = pin_number & 0x1F;
    32a6:	f004 001f 	and.w	r0, r4, #31
    32aa:	0080      	lsls	r0, r0, #2
    32ac:	f100 40a0 	add.w	r0, r0, #1342177280	; 0x50000000
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
    32b0:	7809      	ldrb	r1, [r1, #0]
    uint32_t cnf = reg->PIN_CNF[pin_number];
    32b2:	f8d0 3700 	ldr.w	r3, [r0, #1792]	; 0x700
        m_cb.pin_flags[pin] &= ~PIN_FLAG_OUTPUT;
    32b6:	f025 0502 	bic.w	r5, r5, #2
    cnf &= ~to_update;
    32ba:	f023 030f 	bic.w	r3, r3, #15
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
    32be:	f045 0501 	orr.w	r5, r5, #1
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    32c2:	ea43 0381 	orr.w	r3, r3, r1, lsl #2
    32c6:	f827 5018 	strh.w	r5, [r7, r8, lsl #1]
    reg->PIN_CNF[pin_number] = cnf;
    32ca:	f8c0 3700 	str.w	r3, [r0, #1792]	; 0x700
    if (p_trigger_config)
    32ce:	b192      	cbz	r2, 32f6 <nrfx_gpiote_input_configure+0x76>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    32d0:	4b3b      	ldr	r3, [pc, #236]	; (33c0 <nrfx_gpiote_input_configure+0x140>)
        nrfx_gpiote_trigger_t trigger = p_trigger_config->trigger;
    32d2:	7815      	ldrb	r5, [r2, #0]
        bool use_evt = p_trigger_config->p_in_channel ? true : false;
    32d4:	6852      	ldr	r2, [r2, #4]
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    32d6:	f104 0008 	add.w	r0, r4, #8
    32da:	f833 1010 	ldrh.w	r1, [r3, r0, lsl #1]
        if (pin_is_output(pin))
    32de:	078f      	lsls	r7, r1, #30
    32e0:	d50c      	bpl.n	32fc <nrfx_gpiote_input_configure+0x7c>
            if (use_evt)
    32e2:	2a00      	cmp	r2, #0
    32e4:	d1db      	bne.n	329e <nrfx_gpiote_input_configure+0x1e>
        m_cb.pin_flags[pin] &= ~PIN_FLAG_TRIG_MODE_MASK;
    32e6:	f833 2010 	ldrh.w	r2, [r3, r0, lsl #1]
    32ea:	f022 021c 	bic.w	r2, r2, #28
        m_cb.pin_flags[pin] |= PIN_FLAG_TRIG_MODE_SET(trigger);
    32ee:	ea42 0285 	orr.w	r2, r2, r5, lsl #2
    32f2:	f823 2010 	strh.w	r2, [r3, r0, lsl #1]
    if (p_handler_config)
    32f6:	bbce      	cbnz	r6, 336c <nrfx_gpiote_input_configure+0xec>
    return NRFX_SUCCESS;
    32f8:	4833      	ldr	r0, [pc, #204]	; (33c8 <nrfx_gpiote_input_configure+0x148>)
    32fa:	e7d1      	b.n	32a0 <nrfx_gpiote_input_configure+0x20>
            m_cb.pin_flags[pin] &= ~(PIN_TE_ID_MASK | PIN_FLAG_TE_USED);
    32fc:	f021 0120 	bic.w	r1, r1, #32
    3300:	04c9      	lsls	r1, r1, #19
    3302:	0cc9      	lsrs	r1, r1, #19
    3304:	f823 1010 	strh.w	r1, [r3, r0, lsl #1]
            if (use_evt)
    3308:	2a00      	cmp	r2, #0
    330a:	d0ec      	beq.n	32e6 <nrfx_gpiote_input_configure+0x66>
                if (!edge)
    330c:	2d03      	cmp	r5, #3
    330e:	d8c6      	bhi.n	329e <nrfx_gpiote_input_configure+0x1e>
                uint8_t ch = *p_trigger_config->p_in_channel;
    3310:	7817      	ldrb	r7, [r2, #0]
                if (trigger == NRFX_GPIOTE_TRIGGER_NONE)
    3312:	b92d      	cbnz	r5, 3320 <nrfx_gpiote_input_configure+0xa0>
    3314:	4a2d      	ldr	r2, [pc, #180]	; (33cc <nrfx_gpiote_input_configure+0x14c>)
    3316:	f507 71a2 	add.w	r1, r7, #324	; 0x144
    331a:	f842 5021 	str.w	r5, [r2, r1, lsl #2]
#if defined(NRF9160_XXAA) || defined(NRF5340_XXAA)
    p_reg->CONFIG[idx] = 0;
#endif
}
    331e:	e7e2      	b.n	32e6 <nrfx_gpiote_input_configure+0x66>
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
    3320:	00ba      	lsls	r2, r7, #2
    3322:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    3326:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
                    m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
    332a:	ea41 3147 	orr.w	r1, r1, r7, lsl #13
    332e:	f8d2 c510 	ldr.w	ip, [r2, #1296]	; 0x510
    3332:	f02c 0c03 	bic.w	ip, ip, #3
    3336:	f8c2 c510 	str.w	ip, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
    333a:	f8d2 c510 	ldr.w	ip, [r2, #1296]	; 0x510
    333e:	f42c 3c47 	bic.w	ip, ip, #203776	; 0x31c00
    3342:	f42c 7c40 	bic.w	ip, ip, #768	; 0x300
    3346:	f8c2 c510 	str.w	ip, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    334a:	f8d2 e510 	ldr.w	lr, [r2, #1296]	; 0x510
    334e:	ea4f 2c04 	mov.w	ip, r4, lsl #8
    3352:	f40c 5cf8 	and.w	ip, ip, #7936	; 0x1f00
    3356:	ea4e 4e05 	orr.w	lr, lr, r5, lsl #16
    335a:	ea4c 0c0e 	orr.w	ip, ip, lr
    335e:	f041 0120 	orr.w	r1, r1, #32
    3362:	f823 1010 	strh.w	r1, [r3, r0, lsl #1]
    3366:	f8c2 c510 	str.w	ip, [r2, #1296]	; 0x510
    336a:	e7bc      	b.n	32e6 <nrfx_gpiote_input_configure+0x66>
        err = pin_handler_set(pin, p_handler_config->handler, p_handler_config->p_context);
    336c:	e9d6 7600 	ldrd	r7, r6, [r6]
    release_handler(pin);
    3370:	4620      	mov	r0, r4
    3372:	f7ff ff3f 	bl	31f4 <release_handler>
    if (!handler)
    3376:	2f00      	cmp	r7, #0
    3378:	d0be      	beq.n	32f8 <nrfx_gpiote_input_configure+0x78>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
    337a:	4d11      	ldr	r5, [pc, #68]	; (33c0 <nrfx_gpiote_input_configure+0x140>)
    337c:	682b      	ldr	r3, [r5, #0]
    337e:	429f      	cmp	r7, r3
    3380:	d104      	bne.n	338c <nrfx_gpiote_input_configure+0x10c>
    3382:	686b      	ldr	r3, [r5, #4]
    3384:	429e      	cmp	r6, r3
    3386:	d101      	bne.n	338c <nrfx_gpiote_input_configure+0x10c>
    3388:	2200      	movs	r2, #0
    338a:	e009      	b.n	33a0 <nrfx_gpiote_input_configure+0x120>
        err = nrfx_flag32_alloc(&m_cb.available_evt_handlers, &id);
    338c:	4810      	ldr	r0, [pc, #64]	; (33d0 <nrfx_gpiote_input_configure+0x150>)
    338e:	f10d 0107 	add.w	r1, sp, #7
    3392:	f7ff fdcf 	bl	2f34 <nrfx_flag32_alloc>
        if (err != NRFX_SUCCESS)
    3396:	4b0c      	ldr	r3, [pc, #48]	; (33c8 <nrfx_gpiote_input_configure+0x148>)
    3398:	4298      	cmp	r0, r3
    339a:	d181      	bne.n	32a0 <nrfx_gpiote_input_configure+0x20>
        handler_id = (int32_t)id;
    339c:	f89d 2007 	ldrb.w	r2, [sp, #7]
    m_cb.handlers[handler_id].handler = handler;
    33a0:	f845 7032 	str.w	r7, [r5, r2, lsl #3]
    m_cb.handlers[handler_id].p_context = p_context;
    33a4:	eb05 03c2 	add.w	r3, r5, r2, lsl #3
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
    33a8:	3408      	adds	r4, #8
    m_cb.handlers[handler_id].p_context = p_context;
    33aa:	605e      	str	r6, [r3, #4]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
    33ac:	f835 3014 	ldrh.w	r3, [r5, r4, lsl #1]
    33b0:	ea43 2342 	orr.w	r3, r3, r2, lsl #9
    33b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    33b8:	f825 3014 	strh.w	r3, [r5, r4, lsl #1]
    33bc:	e79c      	b.n	32f8 <nrfx_gpiote_input_configure+0x78>
    33be:	bf00      	nop
    33c0:	2000002c 	.word	0x2000002c
    33c4:	0bad0004 	.word	0x0bad0004
    33c8:	0bad0000 	.word	0x0bad0000
    33cc:	40006000 	.word	0x40006000
    33d0:	20000080 	.word	0x20000080

000033d4 <nrfx_gpiote_output_configure>:
{
    33d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    33d6:	4604      	mov	r4, r0
    if (p_config)
    33d8:	b371      	cbz	r1, 3438 <nrfx_gpiote_output_configure+0x64>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    33da:	4e37      	ldr	r6, [pc, #220]	; (34b8 <nrfx_gpiote_output_configure+0xe4>)
    33dc:	f100 0708 	add.w	r7, r0, #8
    33e0:	f836 5017 	ldrh.w	r5, [r6, r7, lsl #1]
        if (pin_is_input(pin) && pin_in_use_by_te(pin))
    33e4:	07ab      	lsls	r3, r5, #30
    33e6:	d404      	bmi.n	33f2 <nrfx_gpiote_output_configure+0x1e>
    33e8:	f7ff fedc 	bl	31a4 <pin_in_use_by_te>
    33ec:	b108      	cbz	r0, 33f2 <nrfx_gpiote_output_configure+0x1e>
    return NRFX_SUCCESS;
    33ee:	4833      	ldr	r0, [pc, #204]	; (34bc <nrfx_gpiote_output_configure+0xe8>)
}
    33f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (pin_has_trigger(pin) && (p_config->input_connect == NRF_GPIO_PIN_INPUT_DISCONNECT))
    33f2:	f015 0f1c 	tst.w	r5, #28
    33f6:	784b      	ldrb	r3, [r1, #1]
    33f8:	d001      	beq.n	33fe <nrfx_gpiote_output_configure+0x2a>
    33fa:	2b01      	cmp	r3, #1
    33fc:	d0f7      	beq.n	33ee <nrfx_gpiote_output_configure+0x1a>
    *p_pin = pin_number & 0x1F;
    33fe:	f004 001f 	and.w	r0, r4, #31
    3402:	0080      	lsls	r0, r0, #2
    3404:	f100 40a0 	add.w	r0, r0, #1342177280	; 0x50000000
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
    3408:	f891 e000 	ldrb.w	lr, [r1]
    uint32_t cnf = reg->PIN_CNF[pin_number];
    340c:	f8d0 c700 	ldr.w	ip, [r0, #1792]	; 0x700
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
    3410:	7889      	ldrb	r1, [r1, #2]
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
    3412:	005b      	lsls	r3, r3, #1
    cnf &= ~to_update;
    3414:	f42c 6ce1 	bic.w	ip, ip, #1800	; 0x708
    3418:	ea43 230e 	orr.w	r3, r3, lr, lsl #8
    341c:	f02c 0c07 	bic.w	ip, ip, #7
    3420:	ea43 030c 	orr.w	r3, r3, ip
    3424:	ea43 0381 	orr.w	r3, r3, r1, lsl #2
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE | PIN_FLAG_OUTPUT;
    3428:	f045 0503 	orr.w	r5, r5, #3
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    342c:	f043 0301 	orr.w	r3, r3, #1
    3430:	f826 5017 	strh.w	r5, [r6, r7, lsl #1]
    reg->PIN_CNF[pin_number] = cnf;
    3434:	f8c0 3700 	str.w	r3, [r0, #1792]	; 0x700
    if (p_task_config)
    3438:	b90a      	cbnz	r2, 343e <nrfx_gpiote_output_configure+0x6a>
    return NRFX_SUCCESS;
    343a:	4821      	ldr	r0, [pc, #132]	; (34c0 <nrfx_gpiote_output_configure+0xec>)
    343c:	e7d8      	b.n	33f0 <nrfx_gpiote_output_configure+0x1c>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    343e:	4e1e      	ldr	r6, [pc, #120]	; (34b8 <nrfx_gpiote_output_configure+0xe4>)
    3440:	f104 0708 	add.w	r7, r4, #8
    3444:	f836 0017 	ldrh.w	r0, [r6, r7, lsl #1]
        if (pin_is_input(pin))
    3448:	0783      	lsls	r3, r0, #30
    344a:	d5d0      	bpl.n	33ee <nrfx_gpiote_output_configure+0x1a>
        uint32_t ch = p_task_config->task_ch;
    344c:	f892 c000 	ldrb.w	ip, [r2]
    p_reg->CONFIG[idx] = 0;
    3450:	4661      	mov	r1, ip
    3452:	0089      	lsls	r1, r1, #2
        m_cb.pin_flags[pin] &= ~(PIN_FLAG_TE_USED | PIN_TE_ID_MASK);
    3454:	f020 0020 	bic.w	r0, r0, #32
    3458:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
    345c:	04c0      	lsls	r0, r0, #19
    345e:	f501 41c0 	add.w	r1, r1, #24576	; 0x6000
    3462:	0cc0      	lsrs	r0, r0, #19
    3464:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
    3468:	2300      	movs	r3, #0
    346a:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
        if (p_task_config->polarity != NRF_GPIOTE_POLARITY_NONE)
    346e:	7855      	ldrb	r5, [r2, #1]
    3470:	2d00      	cmp	r5, #0
    3472:	d0e2      	beq.n	343a <nrfx_gpiote_output_configure+0x66>
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk |
    3474:	f8d1 3510 	ldr.w	r3, [r1, #1296]	; 0x510
            nrf_gpiote_task_configure(NRF_GPIOTE, ch, pin,
    3478:	7892      	ldrb	r2, [r2, #2]
    347a:	f423 1398 	bic.w	r3, r3, #1245184	; 0x130000
    347e:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
    3482:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    3486:	f8d1 e510 	ldr.w	lr, [r1, #1296]	; 0x510
    348a:	0223      	lsls	r3, r4, #8
    348c:	f403 53f8 	and.w	r3, r3, #7936	; 0x1f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
    3490:	042d      	lsls	r5, r5, #16
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    3492:	ea43 030e 	orr.w	r3, r3, lr
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
    3496:	f405 3540 	and.w	r5, r5, #196608	; 0x30000
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
    349a:	0512      	lsls	r2, r2, #20
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    349c:	432b      	orrs	r3, r5
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
    349e:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
            m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
    34a2:	ea40 304c 	orr.w	r0, r0, ip, lsl #13
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    34a6:	4313      	orrs	r3, r2
    34a8:	f040 0020 	orr.w	r0, r0, #32
    34ac:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
    34b0:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
    34b4:	e7c1      	b.n	343a <nrfx_gpiote_output_configure+0x66>
    34b6:	bf00      	nop
    34b8:	2000002c 	.word	0x2000002c
    34bc:	0bad0004 	.word	0x0bad0004
    34c0:	0bad0000 	.word	0x0bad0000

000034c4 <nrfx_gpiote_global_callback_set>:
    m_cb.global_handler.handler = handler;
    34c4:	4b01      	ldr	r3, [pc, #4]	; (34cc <nrfx_gpiote_global_callback_set+0x8>)
    m_cb.global_handler.p_context = p_context;
    34c6:	e9c3 0102 	strd	r0, r1, [r3, #8]
}
    34ca:	4770      	bx	lr
    34cc:	2000002c 	.word	0x2000002c

000034d0 <nrfx_gpiote_channel_get>:
{
    34d0:	b508      	push	{r3, lr}
    34d2:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin))
    34d4:	f7ff fe66 	bl	31a4 <pin_in_use_by_te>
    34d8:	b138      	cbz	r0, 34ea <nrfx_gpiote_channel_get+0x1a>
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    34da:	4b05      	ldr	r3, [pc, #20]	; (34f0 <nrfx_gpiote_channel_get+0x20>)
        return NRFX_SUCCESS;
    34dc:	4805      	ldr	r0, [pc, #20]	; (34f4 <nrfx_gpiote_channel_get+0x24>)
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    34de:	3208      	adds	r2, #8
    34e0:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    34e4:	0b5b      	lsrs	r3, r3, #13
    34e6:	700b      	strb	r3, [r1, #0]
}
    34e8:	bd08      	pop	{r3, pc}
        return NRFX_ERROR_INVALID_PARAM;
    34ea:	4803      	ldr	r0, [pc, #12]	; (34f8 <nrfx_gpiote_channel_get+0x28>)
    34ec:	e7fc      	b.n	34e8 <nrfx_gpiote_channel_get+0x18>
    34ee:	bf00      	nop
    34f0:	2000002c 	.word	0x2000002c
    34f4:	0bad0000 	.word	0x0bad0000
    34f8:	0bad0004 	.word	0x0bad0004

000034fc <nrfx_gpiote_init>:
{
    34fc:	b538      	push	{r3, r4, r5, lr}
    if (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
    34fe:	4c0f      	ldr	r4, [pc, #60]	; (353c <nrfx_gpiote_init+0x40>)
    3500:	f894 5058 	ldrb.w	r5, [r4, #88]	; 0x58
    3504:	b9bd      	cbnz	r5, 3536 <nrfx_gpiote_init+0x3a>
    memset(m_cb.pin_flags, 0, sizeof(m_cb.pin_flags));
    3506:	2240      	movs	r2, #64	; 0x40
    3508:	4629      	mov	r1, r5
    350a:	f104 0010 	add.w	r0, r4, #16
    350e:	f001 f9b3 	bl	4878 <memset>
    NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_GPIOTE));
    3512:	2006      	movs	r0, #6
    3514:	f7fe f938 	bl	1788 <arch_irq_enable>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    3518:	4b09      	ldr	r3, [pc, #36]	; (3540 <nrfx_gpiote_init+0x44>)
    return err_code;
    351a:	480a      	ldr	r0, [pc, #40]	; (3544 <nrfx_gpiote_init+0x48>)
    351c:	f8c3 517c 	str.w	r5, [r3, #380]	; 0x17c
    3520:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
    p_reg->INTENSET = mask;
    3524:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    3528:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    m_cb.state = NRFX_DRV_STATE_INITIALIZED;
    352c:	2301      	movs	r3, #1
    352e:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
    m_cb.available_evt_handlers = NRFX_BIT_MASK(NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS);
    3532:	6563      	str	r3, [r4, #84]	; 0x54
}
    3534:	bd38      	pop	{r3, r4, r5, pc}
        return err_code;
    3536:	4804      	ldr	r0, [pc, #16]	; (3548 <nrfx_gpiote_init+0x4c>)
    3538:	e7fc      	b.n	3534 <nrfx_gpiote_init+0x38>
    353a:	bf00      	nop
    353c:	2000002c 	.word	0x2000002c
    3540:	40006000 	.word	0x40006000
    3544:	0bad0000 	.word	0x0bad0000
    3548:	0bad0005 	.word	0x0bad0005

0000354c <nrfx_gpiote_is_init>:
    return (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED) ? true : false;
    354c:	4b03      	ldr	r3, [pc, #12]	; (355c <nrfx_gpiote_is_init+0x10>)
    354e:	f893 0058 	ldrb.w	r0, [r3, #88]	; 0x58
}
    3552:	3800      	subs	r0, #0
    3554:	bf18      	it	ne
    3556:	2001      	movne	r0, #1
    3558:	4770      	bx	lr
    355a:	bf00      	nop
    355c:	2000002c 	.word	0x2000002c

00003560 <nrfx_gpiote_channel_free>:
{
    3560:	4601      	mov	r1, r0
    return nrfx_flag32_free(&m_cb.available_channels_mask, channel);
    3562:	4801      	ldr	r0, [pc, #4]	; (3568 <nrfx_gpiote_channel_free+0x8>)
    3564:	f7ff bd0c 	b.w	2f80 <nrfx_flag32_free>
    3568:	2000007c 	.word	0x2000007c

0000356c <nrfx_gpiote_channel_alloc>:
{
    356c:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_cb.available_channels_mask, p_channel);
    356e:	4801      	ldr	r0, [pc, #4]	; (3574 <nrfx_gpiote_channel_alloc+0x8>)
    3570:	f7ff bce0 	b.w	2f34 <nrfx_flag32_alloc>
    3574:	2000007c 	.word	0x2000007c

00003578 <nrfx_gpiote_trigger_enable>:
{
    3578:	b510      	push	{r4, lr}
    357a:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    357c:	f7ff fe12 	bl	31a4 <pin_in_use_by_te>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    3580:	f102 0408 	add.w	r4, r2, #8
    3584:	4b1c      	ldr	r3, [pc, #112]	; (35f8 <nrfx_gpiote_trigger_enable+0x80>)
    3586:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    358a:	b1e0      	cbz	r0, 35c6 <nrfx_gpiote_trigger_enable+0x4e>
    358c:	f013 0402 	ands.w	r4, r3, #2
    3590:	d119      	bne.n	35c6 <nrfx_gpiote_trigger_enable+0x4e>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    3592:	0b5b      	lsrs	r3, r3, #13
#endif

NRF_STATIC_INLINE nrf_gpiote_event_t nrf_gpiote_in_event_get(uint8_t index)
{
    NRFX_ASSERT(index < GPIOTE_CH_NUM);
    return (nrf_gpiote_event_t)NRFX_OFFSETOF(NRF_GPIOTE_Type, EVENTS_IN[index]);
    3594:	009a      	lsls	r2, r3, #2
    return ((uint32_t)p_reg + event);
    3596:	f102 4080 	add.w	r0, r2, #1073741824	; 0x40000000
    359a:	f500 40c2 	add.w	r0, r0, #24832	; 0x6100
    359e:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    35a2:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    35a6:	6004      	str	r4, [r0, #0]
    35a8:	6800      	ldr	r0, [r0, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
    35aa:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
    35ae:	f040 0001 	orr.w	r0, r0, #1
    35b2:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
        if (int_enable)
    35b6:	b129      	cbz	r1, 35c4 <nrfx_gpiote_trigger_enable+0x4c>
            nrf_gpiote_int_enable(NRF_GPIOTE, NRFX_BIT(ch));
    35b8:	2201      	movs	r2, #1
    35ba:	fa02 f303 	lsl.w	r3, r2, r3
    p_reg->INTENSET = mask;
    35be:	4a0f      	ldr	r2, [pc, #60]	; (35fc <nrfx_gpiote_trigger_enable+0x84>)
    35c0:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
    35c4:	bd10      	pop	{r4, pc}
    nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    35c6:	f3c3 0382 	ubfx	r3, r3, #2, #3
    if (trigger == NRFX_GPIOTE_TRIGGER_LOW)
    35ca:	2b04      	cmp	r3, #4
    35cc:	d010      	beq.n	35f0 <nrfx_gpiote_trigger_enable+0x78>
    else if (trigger == NRFX_GPIOTE_TRIGGER_HIGH)
    35ce:	2b05      	cmp	r3, #5
    35d0:	d010      	beq.n	35f4 <nrfx_gpiote_trigger_enable+0x7c>
    return p_reg->IN;
    35d2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    35d6:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
    *p_pin = pin_number & 0x1F;
    35da:	f002 031f 	and.w	r3, r2, #31
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
    35de:	40d9      	lsrs	r1, r3
    35e0:	f001 0101 	and.w	r1, r1, #1
        sense = nrf_gpio_pin_read(pin) ? NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    35e4:	3102      	adds	r1, #2
}
    35e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
    35ea:	4610      	mov	r0, r2
    35ec:	f001 bbab 	b.w	4d46 <nrf_gpio_cfg_sense_set>
        sense = NRF_GPIO_PIN_SENSE_LOW;
    35f0:	2103      	movs	r1, #3
    35f2:	e7f8      	b.n	35e6 <nrfx_gpiote_trigger_enable+0x6e>
        sense = NRF_GPIO_PIN_SENSE_HIGH;
    35f4:	2102      	movs	r1, #2
    35f6:	e7f6      	b.n	35e6 <nrfx_gpiote_trigger_enable+0x6e>
    35f8:	2000002c 	.word	0x2000002c
    35fc:	40006000 	.word	0x40006000

00003600 <nrfx_gpiote_trigger_disable>:
{
    3600:	b508      	push	{r3, lr}
    3602:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    3604:	f7ff fdce 	bl	31a4 <pin_in_use_by_te>
    3608:	b1c0      	cbz	r0, 363c <nrfx_gpiote_trigger_disable+0x3c>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    360a:	f102 0108 	add.w	r1, r2, #8
    360e:	4b0e      	ldr	r3, [pc, #56]	; (3648 <nrfx_gpiote_trigger_disable+0x48>)
    3610:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    3614:	0799      	lsls	r1, r3, #30
    3616:	d411      	bmi.n	363c <nrfx_gpiote_trigger_disable+0x3c>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    3618:	0b5b      	lsrs	r3, r3, #13
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
    361a:	2201      	movs	r2, #1
    361c:	409a      	lsls	r2, r3
    p_reg->INTENCLR = mask;
    361e:	009b      	lsls	r3, r3, #2
    3620:	490a      	ldr	r1, [pc, #40]	; (364c <nrfx_gpiote_trigger_disable+0x4c>)
    3622:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    3626:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    362a:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
    362e:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
    3632:	f022 0203 	bic.w	r2, r2, #3
    3636:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
}
    363a:	bd08      	pop	{r3, pc}
    363c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
    3640:	2100      	movs	r1, #0
    3642:	4610      	mov	r0, r2
    3644:	f001 bb7f 	b.w	4d46 <nrf_gpio_cfg_sense_set>
    3648:	2000002c 	.word	0x2000002c
    364c:	40006000 	.word	0x40006000

00003650 <nrfx_gpiote_pin_uninit>:
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
    3650:	4b0d      	ldr	r3, [pc, #52]	; (3688 <nrfx_gpiote_pin_uninit+0x38>)
    3652:	f100 0208 	add.w	r2, r0, #8
{
    3656:	b510      	push	{r4, lr}
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
    3658:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    if (!pin_in_use(pin))
    365c:	07db      	lsls	r3, r3, #31
{
    365e:	4604      	mov	r4, r0
    if (!pin_in_use(pin))
    3660:	d50f      	bpl.n	3682 <nrfx_gpiote_pin_uninit+0x32>
    nrfx_gpiote_trigger_disable(pin);
    3662:	f7ff ffcd 	bl	3600 <nrfx_gpiote_trigger_disable>
    pin_handler_trigger_uninit(pin);
    3666:	4620      	mov	r0, r4
    *p_pin = pin_number & 0x1F;
    3668:	f004 041f 	and.w	r4, r4, #31
    366c:	f7ff fdec 	bl	3248 <pin_handler_trigger_uninit>
    reg->PIN_CNF[pin_number] = cnf;
    3670:	f504 74e0 	add.w	r4, r4, #448	; 0x1c0
    3674:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    3678:	2202      	movs	r2, #2
    367a:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
    367e:	4803      	ldr	r0, [pc, #12]	; (368c <nrfx_gpiote_pin_uninit+0x3c>)
}
    3680:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
    3682:	4803      	ldr	r0, [pc, #12]	; (3690 <nrfx_gpiote_pin_uninit+0x40>)
    3684:	e7fc      	b.n	3680 <nrfx_gpiote_pin_uninit+0x30>
    3686:	bf00      	nop
    3688:	2000002c 	.word	0x2000002c
    368c:	0bad0000 	.word	0x0bad0000
    3690:	0bad0004 	.word	0x0bad0004

00003694 <nrfx_gpiote_irq_handler>:
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    }
}

void nrfx_gpiote_irq_handler(void)
{
    3694:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3698:	4b4e      	ldr	r3, [pc, #312]	; (37d4 <nrfx_gpiote_irq_handler+0x140>)
    return p_reg->INTENSET & mask;
    369a:	484f      	ldr	r0, [pc, #316]	; (37d8 <nrfx_gpiote_irq_handler+0x144>)
    uint32_t i;
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;

    /* collect status of all GPIOTE pin events. Processing is done once all are collected and cleared.*/
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    369c:	494f      	ldr	r1, [pc, #316]	; (37dc <nrfx_gpiote_irq_handler+0x148>)
    uint32_t status = 0;
    369e:	2500      	movs	r5, #0
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;
    36a0:	2201      	movs	r2, #1
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    36a2:	462c      	mov	r4, r5
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    36a4:	681e      	ldr	r6, [r3, #0]
    {
        if (nrf_gpiote_event_check(NRF_GPIOTE, event) &&
    36a6:	b136      	cbz	r6, 36b6 <nrfx_gpiote_irq_handler+0x22>
    return p_reg->INTENSET & mask;
    36a8:	f8d0 6304 	ldr.w	r6, [r0, #772]	; 0x304
    36ac:	4216      	tst	r6, r2
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    36ae:	bf1e      	ittt	ne
    36b0:	601c      	strne	r4, [r3, #0]
    36b2:	681e      	ldrne	r6, [r3, #0]
            nrf_gpiote_int_enable_check(NRF_GPIOTE, mask))
        {
            nrf_gpiote_event_clear(NRF_GPIOTE, event);
            status |= mask;
    36b4:	4315      	orrne	r5, r2
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    36b6:	3304      	adds	r3, #4
    36b8:	428b      	cmp	r3, r1
        }
        mask <<= 1;
    36ba:	ea4f 0242 	mov.w	r2, r2, lsl #1
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    36be:	d1f1      	bne.n	36a4 <nrfx_gpiote_irq_handler+0x10>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    36c0:	4b45      	ldr	r3, [pc, #276]	; (37d8 <nrfx_gpiote_irq_handler+0x144>)
    36c2:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
         * in ascending order. */
        event = (nrf_gpiote_event_t)((uint32_t)event + sizeof(uint32_t));
    }

    /* handle PORT event */
    if (nrf_gpiote_event_check(NRF_GPIOTE, NRF_GPIOTE_EVENT_PORT))
    36c6:	b1bb      	cbz	r3, 36f8 <nrfx_gpiote_irq_handler+0x64>
        *p_masks = gpio_regs[i]->LATCH;
    36c8:	f04f 46a0 	mov.w	r6, #1342177280	; 0x50000000
    36cc:	f8d6 3520 	ldr.w	r3, [r6, #1312]	; 0x520
    36d0:	9301      	str	r3, [sp, #4]
        gpio_regs[i]->LATCH = *p_masks;
    36d2:	f8c6 3520 	str.w	r3, [r6, #1312]	; 0x520
__STATIC_INLINE void nrf_bitmask_bit_clear(uint32_t bit, void * p_mask)
{
    uint8_t * p_mask8 = (uint8_t *)p_mask;
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    bit = BITMASK_RELBIT_GET(bit);
    p_mask8[byte_idx] &= ~(1 << bit);
    36d6:	af01      	add	r7, sp, #4
    36d8:	f04f 0801 	mov.w	r8, #1
            while (latch[i])
    36dc:	9c01      	ldr	r4, [sp, #4]
    36de:	b96c      	cbnz	r4, 36fc <nrfx_gpiote_irq_handler+0x68>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    36e0:	4b3d      	ldr	r3, [pc, #244]	; (37d8 <nrfx_gpiote_irq_handler+0x144>)
    36e2:	f8c3 417c 	str.w	r4, [r3, #380]	; 0x17c
    36e6:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
        *p_masks = gpio_regs[i]->LATCH;
    36ea:	f8d6 3520 	ldr.w	r3, [r6, #1312]	; 0x520
    36ee:	9301      	str	r3, [sp, #4]
        gpio_regs[i]->LATCH = *p_masks;
    36f0:	f8c6 3520 	str.w	r3, [r6, #1312]	; 0x520
        if (latch[port_idx])
    36f4:	2b00      	cmp	r3, #0
    36f6:	d1ee      	bne.n	36d6 <nrfx_gpiote_irq_handler+0x42>
        mask &= ~NRFX_BIT(ch);
    36f8:	2401      	movs	r4, #1
    36fa:	e066      	b.n	37ca <nrfx_gpiote_irq_handler+0x136>
                uint32_t pin = NRF_CTZ(latch[i]);
    36fc:	fa94 f4a4 	rbit	r4, r4
    3700:	fab4 f484 	clz	r4, r4
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    3704:	4a36      	ldr	r2, [pc, #216]	; (37e0 <nrfx_gpiote_irq_handler+0x14c>)
    3706:	f104 0308 	add.w	r3, r4, #8
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    370a:	08e0      	lsrs	r0, r4, #3
    370c:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
    bit = BITMASK_RELBIT_GET(bit);
    3710:	f004 0307 	and.w	r3, r4, #7
    p_mask8[byte_idx] &= ~(1 << bit);
    3714:	fa08 f203 	lsl.w	r2, r8, r3
    3718:	5c3b      	ldrb	r3, [r7, r0]
    371a:	ea23 0302 	bic.w	r3, r3, r2
    371e:	543b      	strb	r3, [r7, r0]
    3720:	00a3      	lsls	r3, r4, #2
    3722:	f103 49a0 	add.w	r9, r3, #1342177280	; 0x50000000
    3726:	f3c1 0a82 	ubfx	sl, r1, #2, #3
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    372a:	f8d9 2700 	ldr.w	r2, [r9, #1792]	; 0x700
    if (is_level(trigger))
    372e:	06cb      	lsls	r3, r1, #27
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    3730:	46d3      	mov	fp, sl
                                   GPIO_PIN_CNF_SENSE_Msk) >> GPIO_PIN_CNF_SENSE_Pos);
    3732:	f3c2 4201 	ubfx	r2, r2, #16, #2
    if (is_level(trigger))
    3736:	d518      	bpl.n	376a <nrfx_gpiote_irq_handler+0xd6>
        call_handler(pin, trigger);
    3738:	4659      	mov	r1, fp
    373a:	4620      	mov	r0, r4
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    373c:	fa5f fa82 	uxtb.w	sl, r2
    3740:	f7ff fd3a 	bl	31b8 <call_handler>
    3744:	f8d9 3700 	ldr.w	r3, [r9, #1792]	; 0x700
        if (nrf_gpio_pin_sense_get(pin) == sense)
    3748:	f3c3 4301 	ubfx	r3, r3, #16, #2
    374c:	459a      	cmp	sl, r3
    374e:	d107      	bne.n	3760 <nrfx_gpiote_irq_handler+0xcc>
            nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
    3750:	2100      	movs	r1, #0
    3752:	4620      	mov	r0, r4
    3754:	f001 faf7 	bl	4d46 <nrf_gpio_cfg_sense_set>
            nrf_gpio_cfg_sense_set(pin, sense);
    3758:	4651      	mov	r1, sl
    375a:	4620      	mov	r0, r4
    375c:	f001 faf3 	bl	4d46 <nrf_gpio_cfg_sense_set>
    reg->LATCH = (1 << pin_number);
    3760:	fa08 f404 	lsl.w	r4, r8, r4
    3764:	f8c6 4520 	str.w	r4, [r6, #1312]	; 0x520
}
    3768:	e7b8      	b.n	36dc <nrfx_gpiote_irq_handler+0x48>
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    376a:	2a02      	cmp	r2, #2
        nrf_gpio_cfg_sense_set(pin, next_sense);
    376c:	bf0c      	ite	eq
    376e:	2103      	moveq	r1, #3
    3770:	2102      	movne	r1, #2
    3772:	4620      	mov	r0, r4
    3774:	f001 fae7 	bl	4d46 <nrf_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
    3778:	f1ba 0f03 	cmp.w	sl, #3
    377c:	d004      	beq.n	3788 <nrfx_gpiote_irq_handler+0xf4>
    377e:	2a02      	cmp	r2, #2
    3780:	d107      	bne.n	3792 <nrfx_gpiote_irq_handler+0xfe>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
    3782:	f1ba 0f01 	cmp.w	sl, #1
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
    3786:	d1eb      	bne.n	3760 <nrfx_gpiote_irq_handler+0xcc>
            call_handler(pin, trigger);
    3788:	4659      	mov	r1, fp
    378a:	4620      	mov	r0, r4
    378c:	f7ff fd14 	bl	31b8 <call_handler>
    3790:	e7e6      	b.n	3760 <nrfx_gpiote_irq_handler+0xcc>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
    3792:	2a03      	cmp	r2, #3
    3794:	d1e4      	bne.n	3760 <nrfx_gpiote_irq_handler+0xcc>
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
    3796:	f1ba 0f02 	cmp.w	sl, #2
    379a:	e7f4      	b.n	3786 <nrfx_gpiote_irq_handler+0xf2>
        uint32_t ch = NRF_CTZ(mask);
    379c:	fa95 f3a5 	rbit	r3, r5
    37a0:	fab3 f383 	clz	r3, r3
        mask &= ~NRFX_BIT(ch);
    37a4:	fa04 f203 	lsl.w	r2, r4, r3
    37a8:	009b      	lsls	r3, r3, #2
    37aa:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    37ae:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    37b2:	ea25 0502 	bic.w	r5, r5, r2
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    37b6:	f8d3 0510 	ldr.w	r0, [r3, #1296]	; 0x510
    return (nrf_gpiote_polarity_t)((p_reg->CONFIG[idx] & GPIOTE_CONFIG_POLARITY_Msk) >>
    37ba:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    37be:	f3c0 2004 	ubfx	r0, r0, #8, #5
    37c2:	f3c1 4101 	ubfx	r1, r1, #16, #2
    37c6:	f7ff fcf7 	bl	31b8 <call_handler>
    while (mask)
    37ca:	2d00      	cmp	r5, #0
    37cc:	d1e6      	bne.n	379c <nrfx_gpiote_irq_handler+0x108>
        port_event_handle();
    }

    /* Process pin events. */
    gpiote_evt_handle(status);
}
    37ce:	b003      	add	sp, #12
    37d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    37d4:	40006100 	.word	0x40006100
    37d8:	40006000 	.word	0x40006000
    37dc:	40006120 	.word	0x40006120
    37e0:	2000002c 	.word	0x2000002c

000037e4 <nrfx_ppi_channel_alloc>:
    nrfx_flag32_init(&m_groups_allocated, NRFX_PPI_ALL_APP_GROUPS_MASK);
}


nrfx_err_t nrfx_ppi_channel_alloc(nrf_ppi_channel_t * p_channel)
{
    37e4:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_channels_allocated, (uint8_t *)p_channel);
    37e6:	4801      	ldr	r0, [pc, #4]	; (37ec <nrfx_ppi_channel_alloc+0x8>)
    37e8:	f7ff bba4 	b.w	2f34 <nrfx_flag32_alloc>
    37ec:	20000088 	.word	0x20000088

000037f0 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
    37f0:	b510      	push	{r4, lr}
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
    37f2:	4c14      	ldr	r4, [pc, #80]	; (3844 <_DoInit+0x54>)
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
    37f4:	4a14      	ldr	r2, [pc, #80]	; (3848 <_DoInit+0x58>)
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
    37f6:	4915      	ldr	r1, [pc, #84]	; (384c <_DoInit+0x5c>)
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
    37f8:	2303      	movs	r3, #3
    37fa:	6123      	str	r3, [r4, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
    37fc:	6163      	str	r3, [r4, #20]
  p->aUp[0].pBuffer       = _acUpBuffer;
    37fe:	4b14      	ldr	r3, [pc, #80]	; (3850 <_DoInit+0x60>)
  p->aUp[0].sName         = "Terminal";
    3800:	61a2      	str	r2, [r4, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
    3802:	61e3      	str	r3, [r4, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
    3804:	f44f 6380 	mov.w	r3, #1024	; 0x400
    3808:	6223      	str	r3, [r4, #32]
  p->aUp[0].RdOff         = 0u;
    380a:	2300      	movs	r3, #0
    380c:	62a3      	str	r3, [r4, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
    380e:	6263      	str	r3, [r4, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    3810:	62e3      	str	r3, [r4, #44]	; 0x2c
  p->aDown[0].sName         = "Terminal";
    3812:	6622      	str	r2, [r4, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
    3814:	4a0f      	ldr	r2, [pc, #60]	; (3854 <_DoInit+0x64>)
    3816:	6662      	str	r2, [r4, #100]	; 0x64
  STRCPY((char*)&p->acID[7], "RTT");
    3818:	1de0      	adds	r0, r4, #7
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
    381a:	2210      	movs	r2, #16
    381c:	66a2      	str	r2, [r4, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
    381e:	6723      	str	r3, [r4, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
    3820:	66e3      	str	r3, [r4, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    3822:	6763      	str	r3, [r4, #116]	; 0x74
  STRCPY((char*)&p->acID[7], "RTT");
    3824:	f001 f803 	bl	482e <strcpy>
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
    3828:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
    382c:	490a      	ldr	r1, [pc, #40]	; (3858 <_DoInit+0x68>)
    382e:	4620      	mov	r0, r4
    3830:	f000 fffd 	bl	482e <strcpy>
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
    3834:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
    3838:	2320      	movs	r3, #32
    383a:	71a3      	strb	r3, [r4, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
    383c:	f3bf 8f5f 	dmb	sy
}
    3840:	bd10      	pop	{r4, pc}
    3842:	bf00      	nop
    3844:	20000284 	.word	0x20000284
    3848:	00005375 	.word	0x00005375
    384c:	0000537e 	.word	0x0000537e
    3850:	20000378 	.word	0x20000378
    3854:	20000368 	.word	0x20000368
    3858:	00005382 	.word	0x00005382

0000385c <z_sys_init_run_level>:
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    385c:	4b0e      	ldr	r3, [pc, #56]	; (3898 <z_sys_init_run_level+0x3c>)
{
    385e:	b570      	push	{r4, r5, r6, lr}
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    3860:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
    3864:	3001      	adds	r0, #1
    3866:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
    386a:	42a6      	cmp	r6, r4
    386c:	d800      	bhi.n	3870 <z_sys_init_run_level+0x14>
				dev->state->init_res = rc;
			}
			dev->state->initialized = true;
		}
	}
}
    386e:	bd70      	pop	{r4, r5, r6, pc}
		int rc = entry->init(dev);
    3870:	e9d4 3500 	ldrd	r3, r5, [r4]
    3874:	4628      	mov	r0, r5
    3876:	4798      	blx	r3
		if (dev != NULL) {
    3878:	b165      	cbz	r5, 3894 <z_sys_init_run_level+0x38>
				dev->state->init_res = rc;
    387a:	68eb      	ldr	r3, [r5, #12]
			if (rc != 0) {
    387c:	b130      	cbz	r0, 388c <z_sys_init_run_level+0x30>
				if (rc < 0) {
    387e:	2800      	cmp	r0, #0
    3880:	bfb8      	it	lt
    3882:	4240      	neglt	r0, r0
				dev->state->init_res = rc;
    3884:	28ff      	cmp	r0, #255	; 0xff
    3886:	bfa8      	it	ge
    3888:	20ff      	movge	r0, #255	; 0xff
    388a:	7018      	strb	r0, [r3, #0]
			dev->state->initialized = true;
    388c:	785a      	ldrb	r2, [r3, #1]
    388e:	f042 0201 	orr.w	r2, r2, #1
    3892:	705a      	strb	r2, [r3, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    3894:	3408      	adds	r4, #8
    3896:	e7e8      	b.n	386a <z_sys_init_run_level+0xe>
    3898:	000052a8 	.word	0x000052a8

0000389c <bg_thread_main>:
 * This routine completes kernel initialization by invoking the remaining
 * init functions, then invokes application's main() routine.
 */
__boot_func
static void bg_thread_main(void *unused1, void *unused2, void *unused3)
{
    389c:	b508      	push	{r3, lr}
	 * may perform memory management tasks (except for z_phys_map() which
	 * is allowed at any time)
	 */
	z_mem_manage_init();
#endif /* CONFIG_MMU */
	z_sys_post_kernel = true;
    389e:	4b0a      	ldr	r3, [pc, #40]	; (38c8 <bg_thread_main+0x2c>)
    38a0:	2201      	movs	r2, #1

	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
    38a2:	2002      	movs	r0, #2
	z_sys_post_kernel = true;
    38a4:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
    38a6:	f7ff ffd9 	bl	385c <z_sys_init_run_level>
#if CONFIG_STACK_POINTER_RANDOM
	z_stack_adjust_initialized = 1;
#endif
	boot_banner();
    38aa:	f000 fe15 	bl	44d8 <boot_banner>
	void z_cpp_init_static(void);
	z_cpp_init_static();
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
    38ae:	2003      	movs	r0, #3
    38b0:	f7ff ffd4 	bl	385c <z_sys_init_run_level>

	z_init_static_threads();
    38b4:	f000 f8ec 	bl	3a90 <z_init_static_threads>
	z_mem_manage_boot_finish();
#endif /* CONFIG_MMU */

	extern void main(void);

	main();
    38b8:	f7fd f878 	bl	9ac <main>

	/* Mark nonessential since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
    38bc:	4a03      	ldr	r2, [pc, #12]	; (38cc <bg_thread_main+0x30>)
    38be:	7b13      	ldrb	r3, [r2, #12]
    38c0:	f023 0301 	bic.w	r3, r3, #1
    38c4:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
    38c6:	bd08      	pop	{r3, pc}
    38c8:	20000778 	.word	0x20000778
    38cc:	20000140 	.word	0x20000140

000038d0 <z_bss_zero>:
{
    38d0:	b508      	push	{r3, lr}
	z_early_memset(__bss_start, 0, __bss_end - __bss_start);
    38d2:	4803      	ldr	r0, [pc, #12]	; (38e0 <z_bss_zero+0x10>)
    38d4:	4a03      	ldr	r2, [pc, #12]	; (38e4 <z_bss_zero+0x14>)
    38d6:	2100      	movs	r1, #0
    38d8:	1a12      	subs	r2, r2, r0
    38da:	f001 fa6f 	bl	4dbc <z_early_memset>
}
    38de:	bd08      	pop	{r3, pc}
    38e0:	200000a0 	.word	0x200000a0
    38e4:	2000077c 	.word	0x2000077c

000038e8 <z_init_cpu>:
	thread->base.is_idle = 1U;
#endif
}

void z_init_cpu(int id)
{
    38e8:	b570      	push	{r4, r5, r6, lr}
	z_setup_new_thread(thread, stack,
    38ea:	2300      	movs	r3, #0
{
    38ec:	b086      	sub	sp, #24
	z_setup_new_thread(thread, stack,
    38ee:	2201      	movs	r2, #1
    38f0:	e9cd 2304 	strd	r2, r3, [sp, #16]
	struct k_thread *thread = &z_idle_threads[i];
    38f4:	4e13      	ldr	r6, [pc, #76]	; (3944 <z_init_cpu+0x5c>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    38f6:	4d14      	ldr	r5, [pc, #80]	; (3948 <z_init_cpu+0x60>)
	z_setup_new_thread(thread, stack,
    38f8:	9301      	str	r3, [sp, #4]
    38fa:	220f      	movs	r2, #15
    38fc:	e9cd 3202 	strd	r3, r2, [sp, #8]
    3900:	4912      	ldr	r1, [pc, #72]	; (394c <z_init_cpu+0x64>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    3902:	2318      	movs	r3, #24
    3904:	fb03 5500 	mla	r5, r3, r0, r5
	struct k_thread *thread = &z_idle_threads[i];
    3908:	eb06 16c0 	add.w	r6, r6, r0, lsl #7
{
    390c:	4604      	mov	r4, r0
	z_setup_new_thread(thread, stack,
    390e:	f44f 70c0 	mov.w	r0, #384	; 0x180
    3912:	fb00 1104 	mla	r1, r0, r4, r1
    3916:	4b0e      	ldr	r3, [pc, #56]	; (3950 <z_init_cpu+0x68>)
    3918:	9500      	str	r5, [sp, #0]
    391a:	f44f 72a0 	mov.w	r2, #320	; 0x140
    391e:	4630      	mov	r0, r6
    3920:	f000 f884 	bl	3a2c <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
    3924:	7b73      	ldrb	r3, [r6, #13]
	init_idle_thread(id);
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
	_kernel.cpus[id].id = id;
	_kernel.cpus[id].irq_stack =
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
    3926:	480b      	ldr	r0, [pc, #44]	; (3954 <z_init_cpu+0x6c>)
	_kernel.cpus[id].id = id;
    3928:	752c      	strb	r4, [r5, #20]
    392a:	f023 0304 	bic.w	r3, r3, #4
    392e:	7373      	strb	r3, [r6, #13]
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
    3930:	f44f 6304 	mov.w	r3, #2112	; 0x840
    3934:	fb03 0404 	mla	r4, r3, r4, r0
    3938:	441c      	add	r4, r3
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
    393a:	60ee      	str	r6, [r5, #12]
	_kernel.cpus[id].irq_stack =
    393c:	606c      	str	r4, [r5, #4]
		 K_KERNEL_STACK_SIZEOF(z_interrupt_stacks[id]));
#ifdef CONFIG_SCHED_THREAD_USAGE_ALL
	_kernel.cpus[id].usage.track_usage =
		CONFIG_SCHED_THREAD_USAGE_AUTO_ENABLE;
#endif
}
    393e:	b006      	add	sp, #24
    3940:	bd70      	pop	{r4, r5, r6, pc}
    3942:	bf00      	nop
    3944:	200000c0 	.word	0x200000c0
    3948:	2000032c 	.word	0x2000032c
    394c:	20000bc0 	.word	0x20000bc0
    3950:	00003b49 	.word	0x00003b49
    3954:	20000d40 	.word	0x20000d40

00003958 <z_cstart>:
 *
 * @return Does not return
 */
__boot_func
FUNC_NORETURN void z_cstart(void)
{
    3958:	b580      	push	{r7, lr}
 * pointer) register, and switched to automatically when taking an exception.
 *
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
    395a:	4b2d      	ldr	r3, [pc, #180]	; (3a10 <z_cstart+0xb8>)
    395c:	b0a6      	sub	sp, #152	; 0x98
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
    395e:	f383 8808 	msr	MSP, r3
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
    3962:	4d2c      	ldr	r5, [pc, #176]	; (3a14 <z_cstart+0xbc>)
	k_thread_system_pool_assign(dummy_thread);
#else
	dummy_thread->resource_pool = NULL;
#endif

	_current_cpu->current = dummy_thread;
    3964:	4e2c      	ldr	r6, [pc, #176]	; (3a18 <z_cstart+0xc0>)
    3966:	696b      	ldr	r3, [r5, #20]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    3968:	4f2c      	ldr	r7, [pc, #176]	; (3a1c <z_cstart+0xc4>)
    396a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    396e:	2400      	movs	r4, #0
    3970:	616b      	str	r3, [r5, #20]
    3972:	23e0      	movs	r3, #224	; 0xe0
    3974:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
    3978:	77ec      	strb	r4, [r5, #31]
    397a:	762c      	strb	r4, [r5, #24]
    397c:	766c      	strb	r4, [r5, #25]
    397e:	76ac      	strb	r4, [r5, #26]
    3980:	f885 4020 	strb.w	r4, [r5, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
    3984:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    3986:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
    398a:	626b      	str	r3, [r5, #36]	; 0x24
    398c:	f885 4023 	strb.w	r4, [r5, #35]	; 0x23

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
    3990:	f7fe f908 	bl	1ba4 <z_arm_fault_init>
	z_arm_cpu_idle_init();
    3994:	f7fd feda 	bl	174c <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
    3998:	f04f 33ff 	mov.w	r3, #4294967295
    399c:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
    399e:	62eb      	str	r3, [r5, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
    39a0:	f7fe fa38 	bl	1e14 <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
    39a4:	f7fe f9a0 	bl	1ce8 <z_arm_configure_static_mpu_regions>
	dummy_thread->base.user_options = K_ESSENTIAL;
    39a8:	f240 1301 	movw	r3, #257	; 0x101
    39ac:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	_current_cpu->current = dummy_thread;
    39b0:	ab06      	add	r3, sp, #24
    39b2:	60b3      	str	r3, [r6, #8]
	dummy_thread->stack_info.size = 0U;
    39b4:	e9cd 441f 	strd	r4, r4, [sp, #124]	; 0x7c
	dummy_thread->resource_pool = NULL;
    39b8:	9422      	str	r4, [sp, #136]	; 0x88
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
    39ba:	f001 f9d9 	bl	4d70 <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
    39be:	4620      	mov	r0, r4
    39c0:	f7ff ff4c 	bl	385c <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
    39c4:	2001      	movs	r0, #1
	_kernel.ready_q.cache = &z_main_thread;
    39c6:	4d16      	ldr	r5, [pc, #88]	; (3a20 <z_cstart+0xc8>)
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
    39c8:	f7ff ff48 	bl	385c <z_sys_init_run_level>
	z_sched_init();
    39cc:	f000 fb1c 	bl	4008 <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    39d0:	4b14      	ldr	r3, [pc, #80]	; (3a24 <z_cstart+0xcc>)
	_kernel.ready_q.cache = &z_main_thread;
    39d2:	61f5      	str	r5, [r6, #28]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    39d4:	9305      	str	r3, [sp, #20]
    39d6:	2301      	movs	r3, #1
    39d8:	4913      	ldr	r1, [pc, #76]	; (3a28 <z_cstart+0xd0>)
    39da:	9400      	str	r4, [sp, #0]
    39dc:	e9cd 4303 	strd	r4, r3, [sp, #12]
    39e0:	f44f 6280 	mov.w	r2, #1024	; 0x400
    39e4:	463b      	mov	r3, r7
    39e6:	e9cd 4401 	strd	r4, r4, [sp, #4]
    39ea:	4628      	mov	r0, r5
    39ec:	f000 f81e 	bl	3a2c <z_setup_new_thread>
    39f0:	7b6a      	ldrb	r2, [r5, #13]
    39f2:	4606      	mov	r6, r0
    39f4:	f022 0204 	bic.w	r2, r2, #4
	z_ready_thread(&z_main_thread);
    39f8:	4628      	mov	r0, r5
    39fa:	736a      	strb	r2, [r5, #13]
    39fc:	f001 fa1d 	bl	4e3a <z_ready_thread>
	z_init_cpu(0);
    3a00:	4620      	mov	r0, r4
    3a02:	f7ff ff71 	bl	38e8 <z_init_cpu>
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
    3a06:	463a      	mov	r2, r7
    3a08:	4631      	mov	r1, r6
    3a0a:	4628      	mov	r0, r5
    3a0c:	f7fd ff98 	bl	1940 <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
    3a10:	20001580 	.word	0x20001580
    3a14:	e000ed00 	.word	0xe000ed00
    3a18:	2000032c 	.word	0x2000032c
    3a1c:	0000389d 	.word	0x0000389d
    3a20:	20000140 	.word	0x20000140
    3a24:	00005389 	.word	0x00005389
    3a28:	20000780 	.word	0x20000780

00003a2c <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
    3a2c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
	thread_base->user_options = (uint8_t)options;
    3a30:	9e0e      	ldr	r6, [sp, #56]	; 0x38
    3a32:	7306      	strb	r6, [r0, #12]
	thread_base->thread_state = (uint8_t)initial_state;
    3a34:	2604      	movs	r6, #4
    3a36:	7346      	strb	r6, [r0, #13]

	thread_base->prio = priority;
    3a38:	9e0d      	ldr	r6, [sp, #52]	; 0x34
    3a3a:	7386      	strb	r6, [r0, #14]
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
    3a3c:	f100 0558 	add.w	r5, r0, #88	; 0x58
{
    3a40:	460f      	mov	r7, r1
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    3a42:	1dd6      	adds	r6, r2, #7
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
	list->tail = (sys_dnode_t *)list;
    3a44:	e9c0 5516 	strd	r5, r5, [r0, #88]	; 0x58
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    3a48:	9a0c      	ldr	r2, [sp, #48]	; 0x30
	thread_base->pended_on = NULL;
    3a4a:	2500      	movs	r5, #0
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    3a4c:	f026 0607 	bic.w	r6, r6, #7

/** @} */

static inline char *Z_KERNEL_STACK_BUFFER(k_thread_stack_t *sym)
{
	return (char *)sym + K_KERNEL_STACK_RESERVED;
    3a50:	3740      	adds	r7, #64	; 0x40
 */

static inline void sys_dnode_init(sys_dnode_t *node)
{
	node->next = NULL;
	node->prev = NULL;
    3a52:	e9c0 5506 	strd	r5, r5, [r0, #24]
	new_thread->stack_info.size = stack_buf_size;
    3a56:	e9c0 7619 	strd	r7, r6, [r0, #100]	; 0x64
	thread_base->pended_on = NULL;
    3a5a:	6085      	str	r5, [r0, #8]

	thread_base->sched_locked = 0U;
    3a5c:	73c5      	strb	r5, [r0, #15]
	new_thread->stack_info.delta = delta;
    3a5e:	66c5      	str	r5, [r0, #108]	; 0x6c
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    3a60:	f106 0840 	add.w	r8, r6, #64	; 0x40
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    3a64:	9202      	str	r2, [sp, #8]
    3a66:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    3a68:	9201      	str	r2, [sp, #4]
	stack_ptr = (char *)stack + stack_obj_size;
    3a6a:	4488      	add	r8, r1
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    3a6c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    3a6e:	9200      	str	r2, [sp, #0]
    3a70:	4642      	mov	r2, r8
{
    3a72:	4604      	mov	r4, r0
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    3a74:	f7fd ff32 	bl	18dc <arch_new_thread>
	if (!_current) {
    3a78:	4b04      	ldr	r3, [pc, #16]	; (3a8c <z_setup_new_thread+0x60>)
	new_thread->init_data = NULL;
    3a7a:	6565      	str	r5, [r4, #84]	; 0x54
	if (!_current) {
    3a7c:	689b      	ldr	r3, [r3, #8]
    3a7e:	b103      	cbz	r3, 3a82 <z_setup_new_thread+0x56>
	new_thread->resource_pool = _current->resource_pool;
    3a80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
	return stack_ptr;
    3a82:	6723      	str	r3, [r4, #112]	; 0x70
}
    3a84:	4640      	mov	r0, r8
    3a86:	b004      	add	sp, #16
    3a88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3a8c:	2000032c 	.word	0x2000032c

00003a90 <z_init_static_threads>:
{
    3a90:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    3a94:	4c29      	ldr	r4, [pc, #164]	; (3b3c <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xa4>)
	_FOREACH_STATIC_THREAD(thread_data) {
    3a96:	4d2a      	ldr	r5, [pc, #168]	; (3b40 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xa8>)
{
    3a98:	b087      	sub	sp, #28
    3a9a:	4626      	mov	r6, r4
	_FOREACH_STATIC_THREAD(thread_data) {
    3a9c:	42ae      	cmp	r6, r5
    3a9e:	f104 0430 	add.w	r4, r4, #48	; 0x30
    3aa2:	d30f      	bcc.n	3ac4 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x2c>
	k_sched_lock();
    3aa4:	f000 f90c 	bl	3cc0 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
    3aa8:	4c24      	ldr	r4, [pc, #144]	; (3b3c <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xa4>)

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    3aaa:	f8df 9098 	ldr.w	r9, [pc, #152]	; 3b44 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xac>
			/* Faster algorithm but source is first multiplied by target frequency
			 * and it can overflow even though final result would not overflow.
			 * Kconfig option shall prevent use of this algorithm when there is a
			 * risk of overflow.
			 */
			return ((t * to_hz + off) / from_hz);
    3aae:	f44f 4600 	mov.w	r6, #32768	; 0x8000
    3ab2:	f240 37e7 	movw	r7, #999	; 0x3e7
    3ab6:	42ac      	cmp	r4, r5
    3ab8:	d320      	bcc.n	3afc <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x64>
}
    3aba:	b007      	add	sp, #28
    3abc:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	k_sched_unlock();
    3ac0:	f000 ba86 	b.w	3fd0 <k_sched_unlock>
		z_setup_new_thread(
    3ac4:	f854 3c04 	ldr.w	r3, [r4, #-4]
    3ac8:	9305      	str	r3, [sp, #20]
    3aca:	f854 3c10 	ldr.w	r3, [r4, #-16]
    3ace:	9304      	str	r3, [sp, #16]
    3ad0:	f854 3c14 	ldr.w	r3, [r4, #-20]
    3ad4:	9303      	str	r3, [sp, #12]
    3ad6:	f854 3c18 	ldr.w	r3, [r4, #-24]
    3ada:	9302      	str	r3, [sp, #8]
    3adc:	f854 3c1c 	ldr.w	r3, [r4, #-28]
    3ae0:	9301      	str	r3, [sp, #4]
    3ae2:	f854 3c20 	ldr.w	r3, [r4, #-32]
    3ae6:	9300      	str	r3, [sp, #0]
    3ae8:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
    3aec:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
    3af0:	f7ff ff9c 	bl	3a2c <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
    3af4:	f854 3c30 	ldr.w	r3, [r4, #-48]
    3af8:	655e      	str	r6, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
    3afa:	e7ce      	b.n	3a9a <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x2>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
    3afc:	6a63      	ldr	r3, [r4, #36]	; 0x24
    3afe:	1c5a      	adds	r2, r3, #1
    3b00:	d00d      	beq.n	3b1e <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x86>
					    K_MSEC(thread_data->init_delay));
    3b02:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    3b06:	2100      	movs	r1, #0
    3b08:	4638      	mov	r0, r7
    3b0a:	fbc3 0106 	smlal	r0, r1, r3, r6
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    3b0e:	ea51 33c3 	orrs.w	r3, r1, r3, lsl #15
			schedule_new_thread(thread_data->init_thread,
    3b12:	f8d4 8000 	ldr.w	r8, [r4]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    3b16:	d104      	bne.n	3b22 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x8a>
	z_sched_start(thread);
    3b18:	4640      	mov	r0, r8
    3b1a:	f000 f9b7 	bl	3e8c <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
    3b1e:	3430      	adds	r4, #48	; 0x30
    3b20:	e7c9      	b.n	3ab6 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x1e>
    3b22:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    3b26:	2300      	movs	r3, #0
    3b28:	f7fc fdd2 	bl	6d0 <__aeabi_uldivmod>
    3b2c:	4602      	mov	r2, r0
    3b2e:	460b      	mov	r3, r1
    3b30:	f108 0018 	add.w	r0, r8, #24
    3b34:	4649      	mov	r1, r9
    3b36:	f000 fbdf 	bl	42f8 <z_add_timeout>
    3b3a:	e7f0      	b.n	3b1e <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x86>
    3b3c:	200000a0 	.word	0x200000a0
    3b40:	200000a0 	.word	0x200000a0
    3b44:	00004e5b 	.word	0x00004e5b

00003b48 <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
    3b48:	b508      	push	{r3, lr}
		 * higher level construct.
		 */
		(void) arch_irq_lock();

#ifdef CONFIG_PM
		_kernel.idle = z_get_next_timeout_expiry();
    3b4a:	4c0b      	ldr	r4, [pc, #44]	; (3b78 <idle+0x30>)
	return !z_sys_post_kernel;
    3b4c:	4d0b      	ldr	r5, [pc, #44]	; (3b7c <idle+0x34>)
	__asm__ volatile(
    3b4e:	f04f 0220 	mov.w	r2, #32
    3b52:	f3ef 8311 	mrs	r3, BASEPRI
    3b56:	f382 8812 	msr	BASEPRI_MAX, r2
    3b5a:	f3bf 8f6f 	isb	sy
    3b5e:	f001 f9f6 	bl	4f4e <z_get_next_timeout_expiry>
		 * processing in those cases i.e. skips k_cpu_idle().
		 * The kernel's idle processing re-enables interrupts
		 * which is essential for the kernel's scheduling
		 * logic.
		 */
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
    3b62:	782b      	ldrb	r3, [r5, #0]
		_kernel.idle = z_get_next_timeout_expiry();
    3b64:	61a0      	str	r0, [r4, #24]
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
    3b66:	b913      	cbnz	r3, 3b6e <idle+0x26>
	arch_cpu_idle();
    3b68:	f7fd fdf6 	bl	1758 <arch_cpu_idle>
}
    3b6c:	e7ef      	b.n	3b4e <idle+0x6>
    3b6e:	f7fd fd25 	bl	15bc <pm_system_suspend>
    3b72:	2800      	cmp	r0, #0
    3b74:	d1eb      	bne.n	3b4e <idle+0x6>
    3b76:	e7f7      	b.n	3b68 <idle+0x20>
    3b78:	2000032c 	.word	0x2000032c
    3b7c:	20000778 	.word	0x20000778

00003b80 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
    3b80:	b538      	push	{r3, r4, r5, lr}
    3b82:	4604      	mov	r4, r0
    3b84:	f04f 0320 	mov.w	r3, #32
    3b88:	f3ef 8511 	mrs	r5, BASEPRI
    3b8c:	f383 8812 	msr	BASEPRI_MAX, r3
    3b90:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
    3b94:	f001 f9ad 	bl	4ef2 <z_unpend_first_thread>

	if (thread != NULL) {
    3b98:	b148      	cbz	r0, 3bae <z_impl_k_sem_give+0x2e>
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
    3b9a:	2200      	movs	r2, #0
    3b9c:	6782      	str	r2, [r0, #120]	; 0x78
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
    3b9e:	f001 f94c 	bl	4e3a <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
    3ba2:	4629      	mov	r1, r5
    3ba4:	4805      	ldr	r0, [pc, #20]	; (3bbc <z_impl_k_sem_give+0x3c>)

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
    3ba6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
    3baa:	f000 b877 	b.w	3c9c <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
    3bae:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
    3bb2:	429a      	cmp	r2, r3
    3bb4:	bf18      	it	ne
    3bb6:	3301      	addne	r3, #1
    3bb8:	60a3      	str	r3, [r4, #8]
}
    3bba:	e7f2      	b.n	3ba2 <z_impl_k_sem_give+0x22>
    3bbc:	20000779 	.word	0x20000779

00003bc0 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
    3bc0:	b513      	push	{r0, r1, r4, lr}
    3bc2:	f04f 0420 	mov.w	r4, #32
    3bc6:	f3ef 8111 	mrs	r1, BASEPRI
    3bca:	f384 8812 	msr	BASEPRI_MAX, r4
    3bce:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
    3bd2:	6884      	ldr	r4, [r0, #8]
    3bd4:	b144      	cbz	r4, 3be8 <z_impl_k_sem_take+0x28>
		sem->count--;
    3bd6:	3c01      	subs	r4, #1
    3bd8:	6084      	str	r4, [r0, #8]
	__asm__ volatile(
    3bda:	f381 8811 	msr	BASEPRI, r1
    3bde:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
    3be2:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
    3be4:	b002      	add	sp, #8
    3be6:	bd10      	pop	{r4, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    3be8:	ea52 0403 	orrs.w	r4, r2, r3
    3bec:	d106      	bne.n	3bfc <z_impl_k_sem_take+0x3c>
    3bee:	f381 8811 	msr	BASEPRI, r1
    3bf2:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
    3bf6:	f06f 000f 	mvn.w	r0, #15
    3bfa:	e7f3      	b.n	3be4 <z_impl_k_sem_take+0x24>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
    3bfc:	e9cd 2300 	strd	r2, r3, [sp]
    3c00:	4602      	mov	r2, r0
    3c02:	4802      	ldr	r0, [pc, #8]	; (3c0c <z_impl_k_sem_take+0x4c>)
    3c04:	f000 f99e 	bl	3f44 <z_pend_curr>
	return ret;
    3c08:	e7ec      	b.n	3be4 <z_impl_k_sem_take+0x24>
    3c0a:	bf00      	nop
    3c0c:	20000779 	.word	0x20000779

00003c10 <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(struct k_thread *curr)
{
    3c10:	b538      	push	{r3, r4, r5, lr}
	int ret = slice_ticks;
    3c12:	4d07      	ldr	r5, [pc, #28]	; (3c30 <z_reset_time_slice+0x20>)
    3c14:	682c      	ldr	r4, [r5, #0]
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time(curr) != 0) {
    3c16:	b154      	cbz	r4, 3c2e <z_reset_time_slice+0x1e>
		_current_cpu->slice_ticks = slice_time(curr) + sys_clock_elapsed();
    3c18:	f7ff f822 	bl	2c60 <sys_clock_elapsed>
    3c1c:	4b05      	ldr	r3, [pc, #20]	; (3c34 <z_reset_time_slice+0x24>)
    3c1e:	4404      	add	r4, r0
    3c20:	611c      	str	r4, [r3, #16]
		z_set_timeout_expiry(slice_time(curr), false);
    3c22:	6828      	ldr	r0, [r5, #0]
    3c24:	2100      	movs	r1, #0
	}
}
    3c26:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		z_set_timeout_expiry(slice_time(curr), false);
    3c2a:	f001 b9a0 	b.w	4f6e <z_set_timeout_expiry>
}
    3c2e:	bd38      	pop	{r3, r4, r5, pc}
    3c30:	2000035c 	.word	0x2000035c
    3c34:	2000032c 	.word	0x2000032c

00003c38 <k_sched_time_slice_set>:

void k_sched_time_slice_set(int32_t slice, int prio)
{
    3c38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3c3a:	4604      	mov	r4, r0
    3c3c:	460d      	mov	r5, r1
	__asm__ volatile(
    3c3e:	f04f 0320 	mov.w	r3, #32
    3c42:	f3ef 8711 	mrs	r7, BASEPRI
    3c46:	f383 8812 	msr	BASEPRI_MAX, r3
    3c4a:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		_current_cpu->slice_ticks = 0;
    3c4e:	4e10      	ldr	r6, [pc, #64]	; (3c90 <k_sched_time_slice_set+0x58>)
    3c50:	2100      	movs	r1, #0
			return (uint32_t)((t * to_hz + off) / from_hz);
    3c52:	f44f 4c00 	mov.w	ip, #32768	; 0x8000
    3c56:	f240 30e7 	movw	r0, #999	; 0x3e7
    3c5a:	6131      	str	r1, [r6, #16]
    3c5c:	2300      	movs	r3, #0
    3c5e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    3c62:	fbe4 010c 	umlal	r0, r1, r4, ip
    3c66:	f7fc fd33 	bl	6d0 <__aeabi_uldivmod>
		slice_ticks = k_ms_to_ticks_ceil32(slice);
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
    3c6a:	2c00      	cmp	r4, #0
    3c6c:	4b09      	ldr	r3, [pc, #36]	; (3c94 <k_sched_time_slice_set+0x5c>)
    3c6e:	dc0a      	bgt.n	3c86 <k_sched_time_slice_set+0x4e>
			/* It's not possible to reliably set a 1-tick
			 * timeout if ticks aren't regular.
			 */
			slice_ticks = MAX(2, slice_ticks);
    3c70:	6018      	str	r0, [r3, #0]
		}
		slice_max_prio = prio;
    3c72:	4b09      	ldr	r3, [pc, #36]	; (3c98 <k_sched_time_slice_set+0x60>)
		z_reset_time_slice(_current);
    3c74:	68b0      	ldr	r0, [r6, #8]
		slice_max_prio = prio;
    3c76:	601d      	str	r5, [r3, #0]
		z_reset_time_slice(_current);
    3c78:	f7ff ffca 	bl	3c10 <z_reset_time_slice>
	__asm__ volatile(
    3c7c:	f387 8811 	msr	BASEPRI, r7
    3c80:	f3bf 8f6f 	isb	sy
	}
}
    3c84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			slice_ticks = MAX(2, slice_ticks);
    3c86:	2802      	cmp	r0, #2
    3c88:	bfb8      	it	lt
    3c8a:	2002      	movlt	r0, #2
    3c8c:	e7f0      	b.n	3c70 <k_sched_time_slice_set+0x38>
    3c8e:	bf00      	nop
    3c90:	2000032c 	.word	0x2000032c
    3c94:	2000035c 	.word	0x2000035c
    3c98:	20000358 	.word	0x20000358

00003c9c <z_reschedule>:
{
#ifdef CONFIG_SMP
	_current_cpu->swap_ok = 0;
#endif

	return arch_irq_unlocked(key) && !arch_is_in_isr();
    3c9c:	b949      	cbnz	r1, 3cb2 <z_reschedule+0x16>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    3c9e:	f3ef 8005 	mrs	r0, IPSR
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
	if (resched(key.key) && need_swap()) {
    3ca2:	b930      	cbnz	r0, 3cb2 <z_reschedule+0x16>
	new_thread = _kernel.ready_q.cache;
    3ca4:	4b05      	ldr	r3, [pc, #20]	; (3cbc <z_reschedule+0x20>)
	if (resched(key.key) && need_swap()) {
    3ca6:	69da      	ldr	r2, [r3, #28]
    3ca8:	689b      	ldr	r3, [r3, #8]
    3caa:	429a      	cmp	r2, r3
    3cac:	d001      	beq.n	3cb2 <z_reschedule+0x16>
	ret = arch_swap(key);
    3cae:	f7fd bdc1 	b.w	1834 <arch_swap>
    3cb2:	f381 8811 	msr	BASEPRI, r1
    3cb6:	f3bf 8f6f 	isb	sy
		z_swap(lock, key);
	} else {
		k_spin_unlock(lock, key);
		signal_pending_ipi();
	}
}
    3cba:	4770      	bx	lr
    3cbc:	2000032c 	.word	0x2000032c

00003cc0 <k_sched_lock>:
	__asm__ volatile(
    3cc0:	f04f 0320 	mov.w	r3, #32
    3cc4:	f3ef 8111 	mrs	r1, BASEPRI
    3cc8:	f383 8812 	msr	BASEPRI_MAX, r3
    3ccc:	f3bf 8f6f 	isb	sy
static inline void z_sched_lock(void)
{
	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1U, "");

	--_current->base.sched_locked;
    3cd0:	4b04      	ldr	r3, [pc, #16]	; (3ce4 <k_sched_lock+0x24>)
    3cd2:	689a      	ldr	r2, [r3, #8]
    3cd4:	7bd3      	ldrb	r3, [r2, #15]
    3cd6:	3b01      	subs	r3, #1
    3cd8:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
    3cda:	f381 8811 	msr	BASEPRI, r1
    3cde:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		SYS_PORT_TRACING_FUNC(k_thread, sched_lock);

		z_sched_lock();
	}
}
    3ce2:	4770      	bx	lr
    3ce4:	2000032c 	.word	0x2000032c

00003ce8 <update_cache>:
{
    3ce8:	b538      	push	{r3, r4, r5, lr}
    3cea:	4602      	mov	r2, r0
	return _priq_run_best(curr_cpu_runq());
    3cec:	480c      	ldr	r0, [pc, #48]	; (3d20 <update_cache+0x38>)
    3cee:	4d0d      	ldr	r5, [pc, #52]	; (3d24 <update_cache+0x3c>)
    3cf0:	f001 f89d 	bl	4e2e <z_priq_dumb_best>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
    3cf4:	4604      	mov	r4, r0
    3cf6:	b900      	cbnz	r0, 3cfa <update_cache+0x12>
    3cf8:	68ec      	ldr	r4, [r5, #12]
	if (z_is_thread_prevented_from_running(_current)) {
    3cfa:	68ab      	ldr	r3, [r5, #8]
	if (preempt_ok != 0) {
    3cfc:	b94a      	cbnz	r2, 3d12 <update_cache+0x2a>
	if (z_is_thread_prevented_from_running(_current)) {
    3cfe:	7b5a      	ldrb	r2, [r3, #13]
    3d00:	06d2      	lsls	r2, r2, #27
    3d02:	d106      	bne.n	3d12 <update_cache+0x2a>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
    3d04:	69a2      	ldr	r2, [r4, #24]
    3d06:	b922      	cbnz	r2, 3d12 <update_cache+0x2a>
	if (is_preempt(_current) || is_metairq(thread)) {
    3d08:	89da      	ldrh	r2, [r3, #14]
    3d0a:	2a7f      	cmp	r2, #127	; 0x7f
    3d0c:	d901      	bls.n	3d12 <update_cache+0x2a>
		_kernel.ready_q.cache = _current;
    3d0e:	61eb      	str	r3, [r5, #28]
}
    3d10:	bd38      	pop	{r3, r4, r5, pc}
		if (thread != _current) {
    3d12:	429c      	cmp	r4, r3
    3d14:	d002      	beq.n	3d1c <update_cache+0x34>
			z_reset_time_slice(thread);
    3d16:	4620      	mov	r0, r4
    3d18:	f7ff ff7a 	bl	3c10 <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
    3d1c:	61ec      	str	r4, [r5, #28]
}
    3d1e:	e7f7      	b.n	3d10 <update_cache+0x28>
    3d20:	2000034c 	.word	0x2000034c
    3d24:	2000032c 	.word	0x2000032c

00003d28 <move_thread_to_end_of_prio_q>:
{
    3d28:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
    3d2a:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
    3d2e:	7b43      	ldrb	r3, [r0, #13]
    3d30:	2a00      	cmp	r2, #0
{
    3d32:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
    3d34:	da04      	bge.n	3d40 <move_thread_to_end_of_prio_q+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    3d36:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    3d3a:	7343      	strb	r3, [r0, #13]

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
    3d3c:	f001 f84f 	bl	4dde <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
    3d40:	7b4b      	ldrb	r3, [r1, #13]
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
    3d42:	4a15      	ldr	r2, [pc, #84]	; (3d98 <move_thread_to_end_of_prio_q+0x70>)
    3d44:	f063 037f 	orn	r3, r3, #127	; 0x7f
    3d48:	734b      	strb	r3, [r1, #13]
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
    3d4a:	e9d2 3408 	ldrd	r3, r4, [r2, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    3d4e:	f102 0520 	add.w	r5, r2, #32
    3d52:	42ab      	cmp	r3, r5
    3d54:	d01b      	beq.n	3d8e <move_thread_to_end_of_prio_q+0x66>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    3d56:	b1d3      	cbz	r3, 3d8e <move_thread_to_end_of_prio_q+0x66>
	int32_t b1 = thread_1->base.prio;
    3d58:	f991 600e 	ldrsb.w	r6, [r1, #14]
	int32_t b2 = thread_2->base.prio;
    3d5c:	f993 000e 	ldrsb.w	r0, [r3, #14]
	if (b1 != b2) {
    3d60:	4286      	cmp	r6, r0
    3d62:	d00f      	beq.n	3d84 <move_thread_to_end_of_prio_q+0x5c>
		return b2 - b1;
    3d64:	1b80      	subs	r0, r0, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
    3d66:	2800      	cmp	r0, #0
    3d68:	dd0c      	ble.n	3d84 <move_thread_to_end_of_prio_q+0x5c>
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
	sys_dnode_t *const prev = successor->prev;
    3d6a:	6858      	ldr	r0, [r3, #4]

	node->prev = prev;
	node->next = successor;
    3d6c:	e9c1 3000 	strd	r3, r0, [r1]
	prev->next = node;
    3d70:	6001      	str	r1, [r0, #0]
	successor->prev = node;
    3d72:	6059      	str	r1, [r3, #4]
	update_cache(thread == _current);
    3d74:	6890      	ldr	r0, [r2, #8]
    3d76:	1a43      	subs	r3, r0, r1
    3d78:	4258      	negs	r0, r3
}
    3d7a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
    3d7e:	4158      	adcs	r0, r3
    3d80:	f7ff bfb2 	b.w	3ce8 <update_cache>
	return (node == list->tail) ? NULL : node->next;
    3d84:	42a3      	cmp	r3, r4
    3d86:	d002      	beq.n	3d8e <move_thread_to_end_of_prio_q+0x66>
    3d88:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    3d8a:	2b00      	cmp	r3, #0
    3d8c:	d1e6      	bne.n	3d5c <move_thread_to_end_of_prio_q+0x34>
	node->prev = tail;
    3d8e:	e9c1 5400 	strd	r5, r4, [r1]
	tail->next = node;
    3d92:	6021      	str	r1, [r4, #0]
	list->tail = node;
    3d94:	6251      	str	r1, [r2, #36]	; 0x24
}
    3d96:	e7ed      	b.n	3d74 <move_thread_to_end_of_prio_q+0x4c>
    3d98:	2000032c 	.word	0x2000032c

00003d9c <z_time_slice>:
{
    3d9c:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    3d9e:	f04f 0320 	mov.w	r3, #32
    3da2:	f3ef 8511 	mrs	r5, BASEPRI
    3da6:	f383 8812 	msr	BASEPRI_MAX, r3
    3daa:	f3bf 8f6f 	isb	sy
	if (pending_current == _current) {
    3dae:	4b17      	ldr	r3, [pc, #92]	; (3e0c <z_time_slice+0x70>)
    3db0:	4a17      	ldr	r2, [pc, #92]	; (3e10 <z_time_slice+0x74>)
    3db2:	689c      	ldr	r4, [r3, #8]
    3db4:	6811      	ldr	r1, [r2, #0]
    3db6:	428c      	cmp	r4, r1
    3db8:	d107      	bne.n	3dca <z_time_slice+0x2e>
	z_reset_time_slice(curr);
    3dba:	4620      	mov	r0, r4
    3dbc:	f7ff ff28 	bl	3c10 <z_reset_time_slice>
	__asm__ volatile(
    3dc0:	f385 8811 	msr	BASEPRI, r5
    3dc4:	f3bf 8f6f 	isb	sy
}
    3dc8:	bd38      	pop	{r3, r4, r5, pc}
	pending_current = NULL;
    3dca:	2100      	movs	r1, #0
    3dcc:	6011      	str	r1, [r2, #0]
	int ret = slice_ticks;
    3dce:	4a11      	ldr	r2, [pc, #68]	; (3e14 <z_time_slice+0x78>)
	if (slice_time(_current) && sliceable(_current)) {
    3dd0:	6812      	ldr	r2, [r2, #0]
    3dd2:	b1c2      	cbz	r2, 3e06 <z_time_slice+0x6a>
		&& !z_is_idle_thread_object(thread);
    3dd4:	89e2      	ldrh	r2, [r4, #14]
    3dd6:	2a7f      	cmp	r2, #127	; 0x7f
    3dd8:	d815      	bhi.n	3e06 <z_time_slice+0x6a>
		&& !z_is_thread_prevented_from_running(thread)
    3dda:	7b62      	ldrb	r2, [r4, #13]
    3ddc:	06d2      	lsls	r2, r2, #27
    3dde:	d112      	bne.n	3e06 <z_time_slice+0x6a>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
    3de0:	4a0d      	ldr	r2, [pc, #52]	; (3e18 <z_time_slice+0x7c>)
    3de2:	f994 100e 	ldrsb.w	r1, [r4, #14]
    3de6:	6812      	ldr	r2, [r2, #0]
    3de8:	4291      	cmp	r1, r2
    3dea:	db0c      	blt.n	3e06 <z_time_slice+0x6a>
	if (slice_time(_current) && sliceable(_current)) {
    3dec:	4a0b      	ldr	r2, [pc, #44]	; (3e1c <z_time_slice+0x80>)
    3dee:	4294      	cmp	r4, r2
    3df0:	d009      	beq.n	3e06 <z_time_slice+0x6a>
		if (ticks >= _current_cpu->slice_ticks) {
    3df2:	691a      	ldr	r2, [r3, #16]
    3df4:	4282      	cmp	r2, r0
    3df6:	dc03      	bgt.n	3e00 <z_time_slice+0x64>
		move_thread_to_end_of_prio_q(curr);
    3df8:	4620      	mov	r0, r4
    3dfa:	f7ff ff95 	bl	3d28 <move_thread_to_end_of_prio_q>
    3dfe:	e7dc      	b.n	3dba <z_time_slice+0x1e>
			_current_cpu->slice_ticks -= ticks;
    3e00:	1a12      	subs	r2, r2, r0
		_current_cpu->slice_ticks = 0;
    3e02:	611a      	str	r2, [r3, #16]
    3e04:	e7dc      	b.n	3dc0 <z_time_slice+0x24>
    3e06:	2200      	movs	r2, #0
    3e08:	e7fb      	b.n	3e02 <z_time_slice+0x66>
    3e0a:	bf00      	nop
    3e0c:	2000032c 	.word	0x2000032c
    3e10:	20000354 	.word	0x20000354
    3e14:	2000035c 	.word	0x2000035c
    3e18:	20000358 	.word	0x20000358
    3e1c:	200000c0 	.word	0x200000c0

00003e20 <ready_thread>:
{
    3e20:	b470      	push	{r4, r5, r6}
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
    3e22:	f990 200d 	ldrsb.w	r2, [r0, #13]
    3e26:	7b43      	ldrb	r3, [r0, #13]
    3e28:	2a00      	cmp	r2, #0
    3e2a:	db2a      	blt.n	3e82 <ready_thread+0x62>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    3e2c:	06da      	lsls	r2, r3, #27
    3e2e:	d128      	bne.n	3e82 <ready_thread+0x62>
    3e30:	6982      	ldr	r2, [r0, #24]
    3e32:	bb32      	cbnz	r2, 3e82 <ready_thread+0x62>
	return list->head == list;
    3e34:	4a14      	ldr	r2, [pc, #80]	; (3e88 <ready_thread+0x68>)
	thread->base.thread_state |= _THREAD_QUEUED;
    3e36:	f063 037f 	orn	r3, r3, #127	; 0x7f
    3e3a:	7343      	strb	r3, [r0, #13]
	return (node == list->tail) ? NULL : node->next;
    3e3c:	e9d2 3408 	ldrd	r3, r4, [r2, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    3e40:	f102 0520 	add.w	r5, r2, #32
    3e44:	42ab      	cmp	r3, r5
    3e46:	d017      	beq.n	3e78 <ready_thread+0x58>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    3e48:	b1b3      	cbz	r3, 3e78 <ready_thread+0x58>
	int32_t b1 = thread_1->base.prio;
    3e4a:	f990 600e 	ldrsb.w	r6, [r0, #14]
	int32_t b2 = thread_2->base.prio;
    3e4e:	f993 100e 	ldrsb.w	r1, [r3, #14]
	if (b1 != b2) {
    3e52:	428e      	cmp	r6, r1
    3e54:	d00b      	beq.n	3e6e <ready_thread+0x4e>
		return b2 - b1;
    3e56:	1b89      	subs	r1, r1, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
    3e58:	2900      	cmp	r1, #0
    3e5a:	dd08      	ble.n	3e6e <ready_thread+0x4e>
	sys_dnode_t *const prev = successor->prev;
    3e5c:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    3e5e:	e9c0 3200 	strd	r3, r2, [r0]
	prev->next = node;
    3e62:	6010      	str	r0, [r2, #0]
	successor->prev = node;
    3e64:	6058      	str	r0, [r3, #4]
}
    3e66:	bc70      	pop	{r4, r5, r6}
		update_cache(0);
    3e68:	2000      	movs	r0, #0
    3e6a:	f7ff bf3d 	b.w	3ce8 <update_cache>
	return (node == list->tail) ? NULL : node->next;
    3e6e:	42a3      	cmp	r3, r4
    3e70:	d002      	beq.n	3e78 <ready_thread+0x58>
    3e72:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    3e74:	2b00      	cmp	r3, #0
    3e76:	d1ea      	bne.n	3e4e <ready_thread+0x2e>
	node->prev = tail;
    3e78:	e9c0 5400 	strd	r5, r4, [r0]
	tail->next = node;
    3e7c:	6020      	str	r0, [r4, #0]
	list->tail = node;
    3e7e:	6250      	str	r0, [r2, #36]	; 0x24
}
    3e80:	e7f1      	b.n	3e66 <ready_thread+0x46>
}
    3e82:	bc70      	pop	{r4, r5, r6}
    3e84:	4770      	bx	lr
    3e86:	bf00      	nop
    3e88:	2000032c 	.word	0x2000032c

00003e8c <z_sched_start>:
{
    3e8c:	b510      	push	{r4, lr}
	__asm__ volatile(
    3e8e:	f04f 0220 	mov.w	r2, #32
    3e92:	f3ef 8411 	mrs	r4, BASEPRI
    3e96:	f382 8812 	msr	BASEPRI_MAX, r2
    3e9a:	f3bf 8f6f 	isb	sy
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
    3e9e:	7b42      	ldrb	r2, [r0, #13]
	if (z_has_thread_started(thread)) {
    3ea0:	0751      	lsls	r1, r2, #29
    3ea2:	d404      	bmi.n	3eae <z_sched_start+0x22>
	__asm__ volatile(
    3ea4:	f384 8811 	msr	BASEPRI, r4
    3ea8:	f3bf 8f6f 	isb	sy
}
    3eac:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
    3eae:	f022 0204 	bic.w	r2, r2, #4
    3eb2:	7342      	strb	r2, [r0, #13]
	ready_thread(thread);
    3eb4:	f7ff ffb4 	bl	3e20 <ready_thread>
	z_reschedule(&sched_spinlock, key);
    3eb8:	4621      	mov	r1, r4
    3eba:	4802      	ldr	r0, [pc, #8]	; (3ec4 <z_sched_start+0x38>)
}
    3ebc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule(&sched_spinlock, key);
    3ec0:	f7ff beec 	b.w	3c9c <z_reschedule>
    3ec4:	20000779 	.word	0x20000779

00003ec8 <unready_thread>:
{
    3ec8:	b508      	push	{r3, lr}
	if (z_is_thread_queued(thread)) {
    3eca:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
    3ece:	7b43      	ldrb	r3, [r0, #13]
    3ed0:	2a00      	cmp	r2, #0
{
    3ed2:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
    3ed4:	da04      	bge.n	3ee0 <unready_thread+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    3ed6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    3eda:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    3edc:	f000 ff7f 	bl	4dde <sys_dlist_remove>
	update_cache(thread == _current);
    3ee0:	4b04      	ldr	r3, [pc, #16]	; (3ef4 <unready_thread+0x2c>)
    3ee2:	6898      	ldr	r0, [r3, #8]
    3ee4:	1a43      	subs	r3, r0, r1
    3ee6:	4258      	negs	r0, r3
    3ee8:	4158      	adcs	r0, r3
}
    3eea:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	update_cache(thread == _current);
    3eee:	f7ff befb 	b.w	3ce8 <update_cache>
    3ef2:	bf00      	nop
    3ef4:	2000032c 	.word	0x2000032c

00003ef8 <pend>:
{
    3ef8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3efc:	4606      	mov	r6, r0
    3efe:	4615      	mov	r5, r2
    3f00:	461c      	mov	r4, r3
	__asm__ volatile(
    3f02:	f04f 0320 	mov.w	r3, #32
    3f06:	f3ef 8711 	mrs	r7, BASEPRI
    3f0a:	f383 8812 	msr	BASEPRI_MAX, r3
    3f0e:	f3bf 8f6f 	isb	sy
		add_to_waitq_locked(thread, wait_q);
    3f12:	f000 ffc4 	bl	4e9e <add_to_waitq_locked>
	__asm__ volatile(
    3f16:	f387 8811 	msr	BASEPRI, r7
    3f1a:	f3bf 8f6f 	isb	sy
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    3f1e:	f1b4 3fff 	cmp.w	r4, #4294967295
    3f22:	bf08      	it	eq
    3f24:	f1b5 3fff 	cmpeq.w	r5, #4294967295
    3f28:	d008      	beq.n	3f3c <pend+0x44>
    3f2a:	462a      	mov	r2, r5
    3f2c:	4623      	mov	r3, r4
    3f2e:	f106 0018 	add.w	r0, r6, #24
    3f32:	4903      	ldr	r1, [pc, #12]	; (3f40 <pend+0x48>)
}
    3f34:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    3f38:	f000 b9de 	b.w	42f8 <z_add_timeout>
    3f3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3f40:	00004e5b 	.word	0x00004e5b

00003f44 <z_pend_curr>:
{
    3f44:	b510      	push	{r4, lr}
	pending_current = _current;
    3f46:	4b07      	ldr	r3, [pc, #28]	; (3f64 <z_pend_curr+0x20>)
    3f48:	6898      	ldr	r0, [r3, #8]
    3f4a:	4b07      	ldr	r3, [pc, #28]	; (3f68 <z_pend_curr+0x24>)
{
    3f4c:	460c      	mov	r4, r1
	pending_current = _current;
    3f4e:	6018      	str	r0, [r3, #0]
{
    3f50:	4611      	mov	r1, r2
	pend(_current, wait_q, timeout);
    3f52:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    3f56:	f7ff ffcf 	bl	3ef8 <pend>
    3f5a:	4620      	mov	r0, r4
}
    3f5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    3f60:	f7fd bc68 	b.w	1834 <arch_swap>
    3f64:	2000032c 	.word	0x2000032c
    3f68:	20000354 	.word	0x20000354

00003f6c <z_impl_k_thread_suspend>:
{
    3f6c:	b570      	push	{r4, r5, r6, lr}
    3f6e:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
    3f70:	3018      	adds	r0, #24
    3f72:	f000 ffd6 	bl	4f22 <z_abort_timeout>
	__asm__ volatile(
    3f76:	f04f 0320 	mov.w	r3, #32
    3f7a:	f3ef 8611 	mrs	r6, BASEPRI
    3f7e:	f383 8812 	msr	BASEPRI_MAX, r3
    3f82:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
    3f86:	f994 200d 	ldrsb.w	r2, [r4, #13]
    3f8a:	7b63      	ldrb	r3, [r4, #13]
    3f8c:	2a00      	cmp	r2, #0
    3f8e:	da05      	bge.n	3f9c <z_impl_k_thread_suspend+0x30>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    3f90:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    3f94:	7363      	strb	r3, [r4, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    3f96:	4620      	mov	r0, r4
    3f98:	f000 ff21 	bl	4dde <sys_dlist_remove>
		update_cache(thread == _current);
    3f9c:	4d0b      	ldr	r5, [pc, #44]	; (3fcc <z_impl_k_thread_suspend+0x60>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
    3f9e:	7b63      	ldrb	r3, [r4, #13]
    3fa0:	68a8      	ldr	r0, [r5, #8]
    3fa2:	f043 0310 	orr.w	r3, r3, #16
    3fa6:	7363      	strb	r3, [r4, #13]
    3fa8:	1b03      	subs	r3, r0, r4
    3faa:	4258      	negs	r0, r3
    3fac:	4158      	adcs	r0, r3
    3fae:	f7ff fe9b 	bl	3ce8 <update_cache>
	__asm__ volatile(
    3fb2:	f386 8811 	msr	BASEPRI, r6
    3fb6:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
    3fba:	68ab      	ldr	r3, [r5, #8]
    3fbc:	42a3      	cmp	r3, r4
    3fbe:	d103      	bne.n	3fc8 <z_impl_k_thread_suspend+0x5c>
}
    3fc0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
    3fc4:	f000 bf29 	b.w	4e1a <z_reschedule_unlocked>
}
    3fc8:	bd70      	pop	{r4, r5, r6, pc}
    3fca:	bf00      	nop
    3fcc:	2000032c 	.word	0x2000032c

00003fd0 <k_sched_unlock>:
{
    3fd0:	b510      	push	{r4, lr}
	__asm__ volatile(
    3fd2:	f04f 0320 	mov.w	r3, #32
    3fd6:	f3ef 8411 	mrs	r4, BASEPRI
    3fda:	f383 8812 	msr	BASEPRI_MAX, r3
    3fde:	f3bf 8f6f 	isb	sy
		++_current->base.sched_locked;
    3fe2:	4b08      	ldr	r3, [pc, #32]	; (4004 <k_sched_unlock+0x34>)
    3fe4:	689a      	ldr	r2, [r3, #8]
    3fe6:	7bd3      	ldrb	r3, [r2, #15]
    3fe8:	3301      	adds	r3, #1
    3fea:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
    3fec:	2000      	movs	r0, #0
    3fee:	f7ff fe7b 	bl	3ce8 <update_cache>
	__asm__ volatile(
    3ff2:	f384 8811 	msr	BASEPRI, r4
    3ff6:	f3bf 8f6f 	isb	sy
}
    3ffa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
    3ffe:	f000 bf0c 	b.w	4e1a <z_reschedule_unlocked>
    4002:	bf00      	nop
    4004:	2000032c 	.word	0x2000032c

00004008 <z_sched_init>:
	list->head = (sys_dnode_t *)list;
    4008:	4b04      	ldr	r3, [pc, #16]	; (401c <z_sched_init+0x14>)
#else
	init_ready_q(&_kernel.ready_q);
#endif

#ifdef CONFIG_TIMESLICING
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
    400a:	2100      	movs	r1, #0
    400c:	f103 0220 	add.w	r2, r3, #32
	list->tail = (sys_dnode_t *)list;
    4010:	e9c3 2208 	strd	r2, r2, [r3, #32]
    4014:	4608      	mov	r0, r1
    4016:	f7ff be0f 	b.w	3c38 <k_sched_time_slice_set>
    401a:	bf00      	nop
    401c:	2000032c 	.word	0x2000032c

00004020 <z_impl_k_yield>:
	return !(k_is_pre_kernel() || k_is_in_isr() ||
		 z_is_idle_thread_object(_current));
}

void z_impl_k_yield(void)
{
    4020:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
    4022:	f04f 0320 	mov.w	r3, #32
    4026:	f3ef 8511 	mrs	r5, BASEPRI
    402a:	f383 8812 	msr	BASEPRI_MAX, r3
    402e:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if (!IS_ENABLED(CONFIG_SMP) ||
	    z_is_thread_queued(_current)) {
		dequeue_thread(_current);
    4032:	491a      	ldr	r1, [pc, #104]	; (409c <z_impl_k_yield+0x7c>)
    4034:	6888      	ldr	r0, [r1, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
    4036:	7b43      	ldrb	r3, [r0, #13]
    4038:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    403c:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    403e:	f000 fece 	bl	4dde <sys_dlist_remove>
	}
	queue_thread(_current);
    4042:	688b      	ldr	r3, [r1, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
    4044:	7b5a      	ldrb	r2, [r3, #13]
	return list->head == list;
    4046:	4608      	mov	r0, r1
    4048:	f062 027f 	orn	r2, r2, #127	; 0x7f
    404c:	735a      	strb	r2, [r3, #13]
    404e:	f850 2f20 	ldr.w	r2, [r0, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    4052:	4282      	cmp	r2, r0
    4054:	d01c      	beq.n	4090 <z_impl_k_yield+0x70>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    4056:	b1da      	cbz	r2, 4090 <z_impl_k_yield+0x70>
	return (node == list->tail) ? NULL : node->next;
    4058:	6a4f      	ldr	r7, [r1, #36]	; 0x24
	int32_t b1 = thread_1->base.prio;
    405a:	f993 600e 	ldrsb.w	r6, [r3, #14]
	int32_t b2 = thread_2->base.prio;
    405e:	f992 400e 	ldrsb.w	r4, [r2, #14]
	if (b1 != b2) {
    4062:	42a6      	cmp	r6, r4
    4064:	d00f      	beq.n	4086 <z_impl_k_yield+0x66>
		return b2 - b1;
    4066:	1ba4      	subs	r4, r4, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
    4068:	2c00      	cmp	r4, #0
    406a:	dd0c      	ble.n	4086 <z_impl_k_yield+0x66>
	sys_dnode_t *const prev = successor->prev;
    406c:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
    406e:	e9c3 2100 	strd	r2, r1, [r3]
	prev->next = node;
    4072:	600b      	str	r3, [r1, #0]
	successor->prev = node;
    4074:	6053      	str	r3, [r2, #4]
	update_cache(1);
    4076:	2001      	movs	r0, #1
    4078:	f7ff fe36 	bl	3ce8 <update_cache>
    407c:	4628      	mov	r0, r5
	z_swap(&sched_spinlock, key);
}
    407e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    4082:	f7fd bbd7 	b.w	1834 <arch_swap>
	return (node == list->tail) ? NULL : node->next;
    4086:	42ba      	cmp	r2, r7
    4088:	d002      	beq.n	4090 <z_impl_k_yield+0x70>
    408a:	6812      	ldr	r2, [r2, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    408c:	2a00      	cmp	r2, #0
    408e:	d1e6      	bne.n	405e <z_impl_k_yield+0x3e>
	sys_dnode_t *const tail = list->tail;
    4090:	6a4a      	ldr	r2, [r1, #36]	; 0x24
	node->prev = tail;
    4092:	e9c3 0200 	strd	r0, r2, [r3]
	tail->next = node;
    4096:	6013      	str	r3, [r2, #0]
	list->tail = node;
    4098:	624b      	str	r3, [r1, #36]	; 0x24
}
    409a:	e7ec      	b.n	4076 <z_impl_k_yield+0x56>
    409c:	2000032c 	.word	0x2000032c

000040a0 <z_tick_sleep>:
	 */
	LOG_DBG("thread %p for %u ticks", _current, ticks);
#endif

	/* wait of 0 ms is treated as a 'yield' */
	if (ticks == 0) {
    40a0:	ea50 0301 	orrs.w	r3, r0, r1
{
    40a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    40a8:	4605      	mov	r5, r0
    40aa:	460e      	mov	r6, r1
	if (ticks == 0) {
    40ac:	d103      	bne.n	40b6 <z_tick_sleep+0x16>
	z_impl_k_yield();
    40ae:	f7ff ffb7 	bl	4020 <z_impl_k_yield>
	if (ticks > 0) {
		return ticks;
	}
#endif

	return 0;
    40b2:	2000      	movs	r0, #0
    40b4:	e033      	b.n	411e <z_tick_sleep+0x7e>
	if (Z_TICK_ABS(ticks) <= 0) {
    40b6:	f06f 0401 	mvn.w	r4, #1
    40ba:	1a24      	subs	r4, r4, r0
    40bc:	f04f 33ff 	mov.w	r3, #4294967295
    40c0:	eb63 0301 	sbc.w	r3, r3, r1
    40c4:	2c01      	cmp	r4, #1
    40c6:	f173 0300 	sbcs.w	r3, r3, #0
    40ca:	da02      	bge.n	40d2 <z_tick_sleep+0x32>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
    40cc:	f000 ff69 	bl	4fa2 <sys_clock_tick_get_32>
    40d0:	1944      	adds	r4, r0, r5
    40d2:	f04f 0320 	mov.w	r3, #32
    40d6:	f3ef 8811 	mrs	r8, BASEPRI
    40da:	f383 8812 	msr	BASEPRI_MAX, r3
    40de:	f3bf 8f6f 	isb	sy
	pending_current = _current;
    40e2:	4f10      	ldr	r7, [pc, #64]	; (4124 <z_tick_sleep+0x84>)
    40e4:	4b10      	ldr	r3, [pc, #64]	; (4128 <z_tick_sleep+0x88>)
    40e6:	68b8      	ldr	r0, [r7, #8]
    40e8:	6018      	str	r0, [r3, #0]
	unready_thread(_current);
    40ea:	f7ff feed 	bl	3ec8 <unready_thread>
	z_add_thread_timeout(_current, timeout);
    40ee:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    40f0:	490e      	ldr	r1, [pc, #56]	; (412c <z_tick_sleep+0x8c>)
    40f2:	462a      	mov	r2, r5
    40f4:	4633      	mov	r3, r6
    40f6:	3018      	adds	r0, #24
    40f8:	f000 f8fe 	bl	42f8 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
    40fc:	68ba      	ldr	r2, [r7, #8]
    40fe:	7b53      	ldrb	r3, [r2, #13]
    4100:	f043 0310 	orr.w	r3, r3, #16
    4104:	7353      	strb	r3, [r2, #13]
    4106:	4640      	mov	r0, r8
    4108:	f7fd fb94 	bl	1834 <arch_swap>
	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
    410c:	f000 ff49 	bl	4fa2 <sys_clock_tick_get_32>
    4110:	1a20      	subs	r0, r4, r0
    4112:	eb63 0303 	sbc.w	r3, r3, r3
	if (ticks > 0) {
    4116:	2801      	cmp	r0, #1
    4118:	f173 0300 	sbcs.w	r3, r3, #0
    411c:	dbc9      	blt.n	40b2 <z_tick_sleep+0x12>
}
    411e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4122:	bf00      	nop
    4124:	2000032c 	.word	0x2000032c
    4128:	20000354 	.word	0x20000354
    412c:	00004e5b 	.word	0x00004e5b

00004130 <z_impl_k_sleep>:
	__ASSERT(!arch_is_in_isr(), "");

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, sleep, timeout);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    4130:	f1b1 3fff 	cmp.w	r1, #4294967295
    4134:	bf08      	it	eq
    4136:	f1b0 3fff 	cmpeq.w	r0, #4294967295
{
    413a:	b508      	push	{r3, lr}
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    413c:	d106      	bne.n	414c <z_impl_k_sleep+0x1c>
		k_thread_suspend(_current);
    413e:	4b08      	ldr	r3, [pc, #32]	; (4160 <z_impl_k_sleep+0x30>)
    4140:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
    4142:	f7ff ff13 	bl	3f6c <z_impl_k_thread_suspend>

		SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, (int32_t) K_TICKS_FOREVER);

		return (int32_t) K_TICKS_FOREVER;
    4146:	f04f 30ff 	mov.w	r0, #4294967295
	int32_t ret = k_ticks_to_ms_floor64(ticks);

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, ret);

	return ret;
}
    414a:	bd08      	pop	{r3, pc}
	ticks = z_tick_sleep(ticks);
    414c:	f7ff ffa8 	bl	40a0 <z_tick_sleep>
			return ((t * to_hz + off) / from_hz);
    4150:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    4154:	fb80 0303 	smull	r0, r3, r0, r3
    4158:	0bc0      	lsrs	r0, r0, #15
    415a:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
	return ret;
    415e:	e7f4      	b.n	414a <z_impl_k_sleep+0x1a>
    4160:	2000032c 	.word	0x2000032c

00004164 <z_impl_z_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
    4164:	4b01      	ldr	r3, [pc, #4]	; (416c <z_impl_z_current_get+0x8>)
    4166:	6898      	ldr	r0, [r3, #8]
    4168:	4770      	bx	lr
    416a:	bf00      	nop
    416c:	2000032c 	.word	0x2000032c

00004170 <z_thread_abort>:
#endif
	}
}

void z_thread_abort(struct k_thread *thread)
{
    4170:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4174:	4604      	mov	r4, r0
    4176:	f04f 0320 	mov.w	r3, #32
    417a:	f3ef 8611 	mrs	r6, BASEPRI
    417e:	f383 8812 	msr	BASEPRI_MAX, r3
    4182:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.user_options & K_ESSENTIAL) != 0) {
    4186:	7b03      	ldrb	r3, [r0, #12]
    4188:	07d9      	lsls	r1, r3, #31
    418a:	d50b      	bpl.n	41a4 <z_thread_abort+0x34>
	__asm__ volatile(
    418c:	f386 8811 	msr	BASEPRI, r6
    4190:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&sched_spinlock, key);
		__ASSERT(false, "aborting essential thread %p", thread);
		k_panic();
    4194:	4040      	eors	r0, r0
    4196:	f380 8811 	msr	BASEPRI, r0
    419a:	f04f 0004 	mov.w	r0, #4
    419e:	df02      	svc	2
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
    41a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
    41a4:	7b43      	ldrb	r3, [r0, #13]
    41a6:	071a      	lsls	r2, r3, #28
    41a8:	d504      	bpl.n	41b4 <z_thread_abort+0x44>
    41aa:	f386 8811 	msr	BASEPRI, r6
    41ae:	f3bf 8f6f 	isb	sy
    41b2:	e7f5      	b.n	41a0 <z_thread_abort+0x30>
		thread->base.thread_state &= ~_THREAD_ABORTING;
    41b4:	f023 0220 	bic.w	r2, r3, #32
    41b8:	f042 0108 	orr.w	r1, r2, #8
		if (z_is_thread_queued(thread)) {
    41bc:	09d2      	lsrs	r2, r2, #7
    41be:	d120      	bne.n	4202 <z_thread_abort+0x92>
		thread->base.thread_state &= ~_THREAD_ABORTING;
    41c0:	7341      	strb	r1, [r0, #13]
		if (thread->base.pended_on != NULL) {
    41c2:	68a3      	ldr	r3, [r4, #8]
    41c4:	b113      	cbz	r3, 41cc <z_thread_abort+0x5c>
			unpend_thread_no_timeout(thread);
    41c6:	4620      	mov	r0, r4
    41c8:	f000 fe11 	bl	4dee <unpend_thread_no_timeout>
	return z_abort_timeout(&thread->base.timeout);
    41cc:	f104 0018 	add.w	r0, r4, #24
    41d0:	f000 fea7 	bl	4f22 <z_abort_timeout>
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
    41d4:	f104 0758 	add.w	r7, r4, #88	; 0x58
    41d8:	f04f 0800 	mov.w	r8, #0
	return list->head == list;
    41dc:	6da5      	ldr	r5, [r4, #88]	; 0x58
	return sys_dlist_is_empty(list) ? NULL : list->head;
    41de:	42bd      	cmp	r5, r7
    41e0:	d000      	beq.n	41e4 <z_thread_abort+0x74>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
    41e2:	b9b5      	cbnz	r5, 4212 <z_thread_abort+0xa2>
		update_cache(1);
    41e4:	2001      	movs	r0, #1
    41e6:	f7ff fd7f 	bl	3ce8 <update_cache>
	if (thread == _current && !arch_is_in_isr()) {
    41ea:	4b10      	ldr	r3, [pc, #64]	; (422c <z_thread_abort+0xbc>)
    41ec:	689b      	ldr	r3, [r3, #8]
    41ee:	42a3      	cmp	r3, r4
    41f0:	d1db      	bne.n	41aa <z_thread_abort+0x3a>
    41f2:	f3ef 8305 	mrs	r3, IPSR
    41f6:	2b00      	cmp	r3, #0
    41f8:	d1d7      	bne.n	41aa <z_thread_abort+0x3a>
    41fa:	4630      	mov	r0, r6
    41fc:	f7fd fb1a 	bl	1834 <arch_swap>
	return ret;
    4200:	e7d3      	b.n	41aa <z_thread_abort+0x3a>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    4202:	f003 035f 	and.w	r3, r3, #95	; 0x5f
    4206:	f043 0308 	orr.w	r3, r3, #8
    420a:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    420c:	f000 fde7 	bl	4dde <sys_dlist_remove>
}
    4210:	e7d7      	b.n	41c2 <z_thread_abort+0x52>
		unpend_thread_no_timeout(thread);
    4212:	4628      	mov	r0, r5
    4214:	f000 fdeb 	bl	4dee <unpend_thread_no_timeout>
    4218:	f105 0018 	add.w	r0, r5, #24
    421c:	f000 fe81 	bl	4f22 <z_abort_timeout>
    4220:	f8c5 8078 	str.w	r8, [r5, #120]	; 0x78
		ready_thread(thread);
    4224:	4628      	mov	r0, r5
    4226:	f7ff fdfb 	bl	3e20 <ready_thread>
    422a:	e7d7      	b.n	41dc <z_thread_abort+0x6c>
    422c:	2000032c 	.word	0x2000032c

00004230 <z_data_copy>:
 * @brief Copy the data section from ROM to RAM
 *
 * This routine copies the data section from ROM to RAM.
 */
void z_data_copy(void)
{
    4230:	b508      	push	{r3, lr}
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
		       __data_region_end - __data_region_start);
    4232:	4806      	ldr	r0, [pc, #24]	; (424c <z_data_copy+0x1c>)
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
    4234:	4a06      	ldr	r2, [pc, #24]	; (4250 <z_data_copy+0x20>)
    4236:	4907      	ldr	r1, [pc, #28]	; (4254 <z_data_copy+0x24>)
    4238:	1a12      	subs	r2, r2, r0
    423a:	f000 fdc1 	bl	4dc0 <z_early_memcpy>
#else
	z_early_memcpy(&_app_smem_start, &_app_smem_rom_start,
		       _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
    423e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_early_memcpy(&__ramfunc_start, &__ramfunc_load_start,
    4242:	4a05      	ldr	r2, [pc, #20]	; (4258 <z_data_copy+0x28>)
    4244:	4905      	ldr	r1, [pc, #20]	; (425c <z_data_copy+0x2c>)
    4246:	4806      	ldr	r0, [pc, #24]	; (4260 <z_data_copy+0x30>)
    4248:	f000 bdba 	b.w	4dc0 <z_early_memcpy>
    424c:	20000000 	.word	0x20000000
    4250:	200000a0 	.word	0x200000a0
    4254:	000053c4 	.word	0x000053c4
    4258:	00000000 	.word	0x00000000
    425c:	000053c4 	.word	0x000053c4
    4260:	20000000 	.word	0x20000000

00004264 <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
    4264:	4b03      	ldr	r3, [pc, #12]	; (4274 <elapsed+0x10>)
    4266:	681b      	ldr	r3, [r3, #0]
    4268:	b90b      	cbnz	r3, 426e <elapsed+0xa>
    426a:	f7fe bcf9 	b.w	2c60 <sys_clock_elapsed>
}
    426e:	2000      	movs	r0, #0
    4270:	4770      	bx	lr
    4272:	bf00      	nop
    4274:	20000360 	.word	0x20000360

00004278 <next_timeout>:
	return list->head == list;
    4278:	4b10      	ldr	r3, [pc, #64]	; (42bc <next_timeout+0x44>)

static int32_t next_timeout(void)
{
    427a:	b510      	push	{r4, lr}
    427c:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    427e:	429c      	cmp	r4, r3
    4280:	bf08      	it	eq
    4282:	2400      	moveq	r4, #0
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
    4284:	f7ff ffee 	bl	4264 <elapsed>
	int32_t ret;

	if ((to == NULL) ||
    4288:	b1a4      	cbz	r4, 42b4 <next_timeout+0x3c>
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
    428a:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
    428e:	1a1b      	subs	r3, r3, r0
    4290:	eb62 70e0 	sbc.w	r0, r2, r0, asr #31
	if ((to == NULL) ||
    4294:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    4298:	f170 0200 	sbcs.w	r2, r0, #0
    429c:	da0a      	bge.n	42b4 <next_timeout+0x3c>
		ret = MAX_WAIT;
	} else {
		ret = MAX(0, to->dticks - ticks_elapsed);
    429e:	2800      	cmp	r0, #0
    42a0:	bfac      	ite	ge
    42a2:	4618      	movge	r0, r3
    42a4:	2000      	movlt	r0, #0
	}

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
    42a6:	4b06      	ldr	r3, [pc, #24]	; (42c0 <next_timeout+0x48>)
    42a8:	691b      	ldr	r3, [r3, #16]
    42aa:	b113      	cbz	r3, 42b2 <next_timeout+0x3a>
    42ac:	4298      	cmp	r0, r3
    42ae:	bfa8      	it	ge
    42b0:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
    42b2:	bd10      	pop	{r4, pc}
		ret = MAX_WAIT;
    42b4:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    42b8:	e7f5      	b.n	42a6 <next_timeout+0x2e>
    42ba:	bf00      	nop
    42bc:	2000008c 	.word	0x2000008c
    42c0:	2000032c 	.word	0x2000032c

000042c4 <remove_timeout>:
{
    42c4:	b530      	push	{r4, r5, lr}
	return (node == list->tail) ? NULL : node->next;
    42c6:	6803      	ldr	r3, [r0, #0]
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    42c8:	b168      	cbz	r0, 42e6 <remove_timeout+0x22>
	return (node == list->tail) ? NULL : node->next;
    42ca:	4a0a      	ldr	r2, [pc, #40]	; (42f4 <remove_timeout+0x30>)
    42cc:	6852      	ldr	r2, [r2, #4]
    42ce:	4290      	cmp	r0, r2
    42d0:	d009      	beq.n	42e6 <remove_timeout+0x22>
	if (next(t) != NULL) {
    42d2:	b143      	cbz	r3, 42e6 <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
    42d4:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
    42d8:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
    42dc:	1912      	adds	r2, r2, r4
    42de:	eb41 0105 	adc.w	r1, r1, r5
    42e2:	e9c3 2104 	strd	r2, r1, [r3, #16]
 * @param node the node to remove
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
    42e6:	6842      	ldr	r2, [r0, #4]
	sys_dnode_t *const next = node->next;

	prev->next = next;
    42e8:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    42ea:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    42ec:	2300      	movs	r3, #0
	node->prev = NULL;
    42ee:	e9c0 3300 	strd	r3, r3, [r0]
}
    42f2:	bd30      	pop	{r4, r5, pc}
    42f4:	2000008c 	.word	0x2000008c

000042f8 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    42f8:	f1b3 3fff 	cmp.w	r3, #4294967295
    42fc:	bf08      	it	eq
    42fe:	f1b2 3fff 	cmpeq.w	r2, #4294967295
{
    4302:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4304:	4604      	mov	r4, r0
    4306:	461f      	mov	r7, r3
    4308:	4615      	mov	r5, r2
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    430a:	d067      	beq.n	43dc <z_add_timeout+0xe4>
#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
    430c:	6081      	str	r1, [r0, #8]
	__asm__ volatile(
    430e:	f04f 0320 	mov.w	r3, #32
    4312:	f3ef 8611 	mrs	r6, BASEPRI
    4316:	f383 8812 	msr	BASEPRI_MAX, r3
    431a:	f3bf 8f6f 	isb	sy

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
		    Z_TICK_ABS(timeout.ticks) >= 0) {
    431e:	f06f 0201 	mvn.w	r2, #1
    4322:	1b53      	subs	r3, r2, r5
    4324:	f04f 3cff 	mov.w	ip, #4294967295
    4328:	eb6c 0307 	sbc.w	r3, ip, r7
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
    432c:	2b00      	cmp	r3, #0
    432e:	db1b      	blt.n	4368 <z_add_timeout+0x70>
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
    4330:	4b2b      	ldr	r3, [pc, #172]	; (43e0 <z_add_timeout+0xe8>)
    4332:	e9d3 1300 	ldrd	r1, r3, [r3]
    4336:	1a52      	subs	r2, r2, r1
    4338:	eb6c 0303 	sbc.w	r3, ip, r3
    433c:	1b55      	subs	r5, r2, r5

			to->dticks = MAX(1, ticks);
    433e:	eb63 0307 	sbc.w	r3, r3, r7
    4342:	2d01      	cmp	r5, #1
    4344:	f173 0200 	sbcs.w	r2, r3, #0
    4348:	bfbc      	itt	lt
    434a:	2501      	movlt	r5, #1
    434c:	2300      	movlt	r3, #0
    434e:	e9c0 5304 	strd	r5, r3, [r0, #16]
	return list->head == list;
    4352:	4824      	ldr	r0, [pc, #144]	; (43e4 <z_add_timeout+0xec>)
	sys_dnode_t *const tail = list->tail;
    4354:	e9d0 3c00 	ldrd	r3, ip, [r0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    4358:	4283      	cmp	r3, r0
    435a:	d118      	bne.n	438e <z_add_timeout+0x96>
	node->prev = tail;
    435c:	e9c4 0c00 	strd	r0, ip, [r4]
	tail->next = node;
    4360:	f8cc 4000 	str.w	r4, [ip]
	list->tail = node;
    4364:	6044      	str	r4, [r0, #4]
}
    4366:	e026      	b.n	43b6 <z_add_timeout+0xbe>
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
    4368:	f7ff ff7c 	bl	4264 <elapsed>
    436c:	3501      	adds	r5, #1
    436e:	f147 0700 	adc.w	r7, r7, #0
    4372:	182d      	adds	r5, r5, r0
    4374:	eb47 77e0 	adc.w	r7, r7, r0, asr #31
    4378:	e9c4 5704 	strd	r5, r7, [r4, #16]
    437c:	e7e9      	b.n	4352 <z_add_timeout+0x5a>
			if (t->dticks > to->dticks) {
				t->dticks -= to->dticks;
				sys_dlist_insert(&t->node, &to->node);
				break;
			}
			to->dticks -= t->dticks;
    437e:	1a52      	subs	r2, r2, r1
    4380:	eb65 0507 	sbc.w	r5, r5, r7
	return (node == list->tail) ? NULL : node->next;
    4384:	459c      	cmp	ip, r3
    4386:	e9c4 2504 	strd	r2, r5, [r4, #16]
    438a:	d0e7      	beq.n	435c <z_add_timeout+0x64>
    438c:	681b      	ldr	r3, [r3, #0]
		for (t = first(); t != NULL; t = next(t)) {
    438e:	2b00      	cmp	r3, #0
    4390:	d0e4      	beq.n	435c <z_add_timeout+0x64>
			if (t->dticks > to->dticks) {
    4392:	e9d3 1704 	ldrd	r1, r7, [r3, #16]
    4396:	e9d4 2504 	ldrd	r2, r5, [r4, #16]
    439a:	428a      	cmp	r2, r1
    439c:	eb75 0e07 	sbcs.w	lr, r5, r7
    43a0:	daed      	bge.n	437e <z_add_timeout+0x86>
				t->dticks -= to->dticks;
    43a2:	1a8a      	subs	r2, r1, r2
    43a4:	eb67 0505 	sbc.w	r5, r7, r5
    43a8:	e9c3 2504 	strd	r2, r5, [r3, #16]
	sys_dnode_t *const prev = successor->prev;
    43ac:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    43ae:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
    43b2:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    43b4:	605c      	str	r4, [r3, #4]
	return list->head == list;
    43b6:	6803      	ldr	r3, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    43b8:	4283      	cmp	r3, r0
    43ba:	d00b      	beq.n	43d4 <z_add_timeout+0xdc>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
    43bc:	429c      	cmp	r4, r3
    43be:	d109      	bne.n	43d4 <z_add_timeout+0xdc>
			 * last announcement, and slice_ticks is based
			 * on that. It means that the time remaining for
			 * the next announcement can be less than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
    43c0:	f7ff ff5a 	bl	4278 <next_timeout>

			if (next_time == 0 ||
    43c4:	b118      	cbz	r0, 43ce <z_add_timeout+0xd6>
			    _current_cpu->slice_ticks != next_time) {
    43c6:	4b08      	ldr	r3, [pc, #32]	; (43e8 <z_add_timeout+0xf0>)
			if (next_time == 0 ||
    43c8:	691b      	ldr	r3, [r3, #16]
    43ca:	4283      	cmp	r3, r0
    43cc:	d002      	beq.n	43d4 <z_add_timeout+0xdc>
				sys_clock_set_timeout(next_time, false);
    43ce:	2100      	movs	r1, #0
    43d0:	f7fe fc14 	bl	2bfc <sys_clock_set_timeout>
	__asm__ volatile(
    43d4:	f386 8811 	msr	BASEPRI, r6
    43d8:	f3bf 8f6f 	isb	sy
#else
			sys_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
    43dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    43de:	bf00      	nop
    43e0:	200001c0 	.word	0x200001c0
    43e4:	2000008c 	.word	0x2000008c
    43e8:	2000032c 	.word	0x2000032c

000043ec <sys_clock_announce>:
		}
	}
}

void sys_clock_announce(int32_t ticks)
{
    43ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    43f0:	4604      	mov	r4, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
    43f2:	f7ff fcd3 	bl	3d9c <z_time_slice>
	__asm__ volatile(
    43f6:	f04f 0320 	mov.w	r3, #32
    43fa:	f3ef 8511 	mrs	r5, BASEPRI
    43fe:	f383 8812 	msr	BASEPRI_MAX, r3
    4402:	f3bf 8f6f 	isb	sy
		announce_remaining += ticks;
		k_spin_unlock(&timeout_lock, key);
		return;
	}

	announce_remaining = ticks;
    4406:	4f24      	ldr	r7, [pc, #144]	; (4498 <sys_clock_announce+0xac>)
	return list->head == list;
    4408:	f8df 8090 	ldr.w	r8, [pc, #144]	; 449c <sys_clock_announce+0xb0>

	while (first() != NULL && first()->dticks <= announce_remaining) {
		struct _timeout *t = first();
		int dt = t->dticks;

		curr_tick += dt;
    440c:	4e24      	ldr	r6, [pc, #144]	; (44a0 <sys_clock_announce+0xb4>)
	announce_remaining = ticks;
    440e:	603c      	str	r4, [r7, #0]
    4410:	f8d8 0000 	ldr.w	r0, [r8]
	while (first() != NULL && first()->dticks <= announce_remaining) {
    4414:	683b      	ldr	r3, [r7, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    4416:	4540      	cmp	r0, r8
		curr_tick += dt;
    4418:	e9d6 2e00 	ldrd	r2, lr, [r6]
    441c:	ea4f 71e3 	mov.w	r1, r3, asr #31
    4420:	d00b      	beq.n	443a <sys_clock_announce+0x4e>
	while (first() != NULL && first()->dticks <= announce_remaining) {
    4422:	b150      	cbz	r0, 443a <sys_clock_announce+0x4e>
    4424:	e9d0 4c04 	ldrd	r4, ip, [r0, #16]
    4428:	42a3      	cmp	r3, r4
    442a:	eb71 090c 	sbcs.w	r9, r1, ip
    442e:	da16      	bge.n	445e <sys_clock_announce+0x72>
		key = k_spin_lock(&timeout_lock);
		announce_remaining -= dt;
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
    4430:	1ae4      	subs	r4, r4, r3
    4432:	eb6c 0c01 	sbc.w	ip, ip, r1
    4436:	e9c0 4c04 	strd	r4, ip, [r0, #16]
	}

	curr_tick += announce_remaining;
    443a:	189b      	adds	r3, r3, r2
    443c:	eb4e 0101 	adc.w	r1, lr, r1
	announce_remaining = 0;
    4440:	2400      	movs	r4, #0
	curr_tick += announce_remaining;
    4442:	e9c6 3100 	strd	r3, r1, [r6]
	announce_remaining = 0;
    4446:	603c      	str	r4, [r7, #0]

	sys_clock_set_timeout(next_timeout(), false);
    4448:	f7ff ff16 	bl	4278 <next_timeout>
    444c:	4621      	mov	r1, r4
    444e:	f7fe fbd5 	bl	2bfc <sys_clock_set_timeout>
	__asm__ volatile(
    4452:	f385 8811 	msr	BASEPRI, r5
    4456:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
    445a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		curr_tick += dt;
    445e:	18a2      	adds	r2, r4, r2
    4460:	eb4e 71e4 	adc.w	r1, lr, r4, asr #31
    4464:	e9c6 2100 	strd	r2, r1, [r6]
		t->dticks = 0;
    4468:	2300      	movs	r3, #0
    446a:	2200      	movs	r2, #0
    446c:	e9c0 2304 	strd	r2, r3, [r0, #16]
		remove_timeout(t);
    4470:	f7ff ff28 	bl	42c4 <remove_timeout>
    4474:	f385 8811 	msr	BASEPRI, r5
    4478:	f3bf 8f6f 	isb	sy
		t->fn(t);
    447c:	6883      	ldr	r3, [r0, #8]
    447e:	4798      	blx	r3
	__asm__ volatile(
    4480:	f04f 0320 	mov.w	r3, #32
    4484:	f3ef 8511 	mrs	r5, BASEPRI
    4488:	f383 8812 	msr	BASEPRI_MAX, r3
    448c:	f3bf 8f6f 	isb	sy
		announce_remaining -= dt;
    4490:	683b      	ldr	r3, [r7, #0]
    4492:	1b1b      	subs	r3, r3, r4
    4494:	603b      	str	r3, [r7, #0]
    4496:	e7bb      	b.n	4410 <sys_clock_announce+0x24>
    4498:	20000360 	.word	0x20000360
    449c:	2000008c 	.word	0x2000008c
    44a0:	200001c0 	.word	0x200001c0

000044a4 <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
    44a4:	b510      	push	{r4, lr}
    44a6:	f04f 0320 	mov.w	r3, #32
    44aa:	f3ef 8411 	mrs	r4, BASEPRI
    44ae:	f383 8812 	msr	BASEPRI_MAX, r3
    44b2:	f3bf 8f6f 	isb	sy
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + elapsed();
    44b6:	f7ff fed5 	bl	4264 <elapsed>
    44ba:	4b06      	ldr	r3, [pc, #24]	; (44d4 <sys_clock_tick_get+0x30>)
    44bc:	4601      	mov	r1, r0
    44be:	e9d3 0300 	ldrd	r0, r3, [r3]
    44c2:	1808      	adds	r0, r1, r0
    44c4:	eb43 71e1 	adc.w	r1, r3, r1, asr #31
	__asm__ volatile(
    44c8:	f384 8811 	msr	BASEPRI, r4
    44cc:	f3bf 8f6f 	isb	sy
	}
	return t;
}
    44d0:	bd10      	pop	{r4, pc}
    44d2:	bf00      	nop
    44d4:	200001c0 	.word	0x200001c0

000044d8 <boot_banner>:
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}

#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
    44d8:	4a02      	ldr	r2, [pc, #8]	; (44e4 <boot_banner+0xc>)
    44da:	4903      	ldr	r1, [pc, #12]	; (44e8 <boot_banner+0x10>)
    44dc:	4803      	ldr	r0, [pc, #12]	; (44ec <boot_banner+0x14>)
    44de:	f000 b876 	b.w	45ce <printk>
    44e2:	bf00      	nop
    44e4:	000053c1 	.word	0x000053c1
    44e8:	0000538e 	.word	0x0000538e
    44ec:	0000539b 	.word	0x0000539b

000044f0 <get_max>:
{
    44f0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  for (int u=0; u<len; u++)
    44f4:	2400      	movs	r4, #0
{
    44f6:	4681      	mov	r9, r0
    44f8:	4688      	mov	r8, r1
    44fa:	4616      	mov	r6, r2
    44fc:	461d      	mov	r5, r3
  int index = 0;
    44fe:	46a2      	mov	sl, r4
  float value =0;
    4500:	2700      	movs	r7, #0
  for (int u=0; u<len; u++)
    4502:	4544      	cmp	r4, r8
    4504:	db04      	blt.n	4510 <get_max+0x20>
   *max_value = value;
    4506:	6037      	str	r7, [r6, #0]
   *max_index = index; 
    4508:	f8c5 a000 	str.w	sl, [r5]
}// end function
    450c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (myArray[u] > value)
    4510:	f859 b024 	ldr.w	fp, [r9, r4, lsl #2]
    4514:	4639      	mov	r1, r7
    4516:	4658      	mov	r0, fp
    4518:	f7fc f8aa 	bl	670 <__aeabi_fcmpgt>
    451c:	b108      	cbz	r0, 4522 <get_max+0x32>
    451e:	46a2      	mov	sl, r4
      value = myArray[u];
    4520:	465f      	mov	r7, fp
  for (int u=0; u<len; u++)
    4522:	3401      	adds	r4, #1
    4524:	e7ed      	b.n	4502 <get_max+0x12>

00004526 <get_average>:
{
    4526:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4528:	4607      	mov	r7, r0
    452a:	460d      	mov	r5, r1
  for (int u=0; u<len; u++)
    452c:	2600      	movs	r6, #0
  float sum_array = 0;
    452e:	2400      	movs	r4, #0
  for (int u=0; u<len; u++)
    4530:	42ae      	cmp	r6, r5
    4532:	db07      	blt.n	4544 <get_average+0x1e>
  mean_array = sum_array / len;
    4534:	4628      	mov	r0, r5
    4536:	f7fb fe8b 	bl	250 <__aeabi_i2f>
    453a:	4601      	mov	r1, r0
    453c:	4620      	mov	r0, r4
    453e:	f7fb ff8f 	bl	460 <__aeabi_fdiv>
}// end function
    4542:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    sum_array = sum_array + myArray[u];
    4544:	f857 1026 	ldr.w	r1, [r7, r6, lsl #2]
    4548:	4620      	mov	r0, r4
    454a:	f7fb fdcd 	bl	e8 <__addsf3>
  for (int u=0; u<len; u++)
    454e:	3601      	adds	r6, #1
    sum_array = sum_array + myArray[u];
    4550:	4604      	mov	r4, r0
  for (int u=0; u<len; u++)
    4552:	e7ed      	b.n	4530 <get_average+0xa>

00004554 <get_sum_deviations>:
{
    4554:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4558:	4680      	mov	r8, r0
    455a:	460e      	mov	r6, r1
  float avg = get_average(myArray, len);  
    455c:	f7ff ffe3 	bl	4526 <get_average>
  for (int i=0; i<len; i++)
    4560:	2500      	movs	r5, #0
  float avg = get_average(myArray, len);  
    4562:	4607      	mov	r7, r0
  float sum_dev_squared = 0;
    4564:	2400      	movs	r4, #0
  for (int i=0; i<len; i++)
    4566:	42b5      	cmp	r5, r6
    4568:	db02      	blt.n	4570 <get_sum_deviations+0x1c>
}// end function
    456a:	4620      	mov	r0, r4
    456c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    float dev = myArray[i] - avg;
    4570:	f858 0025 	ldr.w	r0, [r8, r5, lsl #2]
    4574:	4639      	mov	r1, r7
    4576:	f7fb fdb5 	bl	e4 <__aeabi_fsub>
    457a:	4601      	mov	r1, r0
    double dev_squared = dev * dev;
    457c:	f7fb febc 	bl	2f8 <__aeabi_fmul>
    4580:	4601      	mov	r1, r0
    4582:	4620      	mov	r0, r4
    4584:	f7fb fdb0 	bl	e8 <__addsf3>
  for (int i=0; i<len; i++)
    4588:	3501      	adds	r5, #1
    458a:	4604      	mov	r4, r0
    458c:	e7eb      	b.n	4566 <get_sum_deviations+0x12>

0000458e <sys_notify_validate>:

int sys_notify_validate(struct sys_notify *notify)
{
	int rv = 0;

	if (notify == NULL) {
    458e:	4603      	mov	r3, r0
    4590:	b158      	cbz	r0, 45aa <sys_notify_validate+0x1c>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    4592:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
    4594:	f002 0203 	and.w	r2, r2, #3
		return -EINVAL;
	}

	/* Validate configuration based on mode */
	switch (sys_notify_get_method(notify)) {
    4598:	2a01      	cmp	r2, #1
    459a:	d003      	beq.n	45a4 <sys_notify_validate+0x16>
    459c:	2a03      	cmp	r2, #3
    459e:	d104      	bne.n	45aa <sys_notify_validate+0x1c>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		if (notify->method.callback == NULL) {
    45a0:	6802      	ldr	r2, [r0, #0]
    45a2:	b112      	cbz	r2, 45aa <sys_notify_validate+0x1c>
		break;
	}

	/* Clear the result here instead of in all callers. */
	if (rv == 0) {
		notify->result = 0;
    45a4:	2000      	movs	r0, #0
    45a6:	6098      	str	r0, [r3, #8]
    45a8:	4770      	bx	lr
		return -EINVAL;
    45aa:	f06f 0015 	mvn.w	r0, #21
	}

	return rv;
}
    45ae:	4770      	bx	lr

000045b0 <sys_notify_finalize>:
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    45b0:	6842      	ldr	r2, [r0, #4]
	uint32_t method = sys_notify_get_method(notify);

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
    45b2:	6081      	str	r1, [r0, #8]
	return method & SYS_NOTIFY_METHOD_MASK;
    45b4:	f002 0203 	and.w	r2, r2, #3
	switch (method) {
    45b8:	2a03      	cmp	r2, #3
    45ba:	f04f 0200 	mov.w	r2, #0
{
    45be:	4603      	mov	r3, r0
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
    45c0:	bf0c      	ite	eq
    45c2:	6800      	ldreq	r0, [r0, #0]
	sys_notify_generic_callback rv = NULL;
    45c4:	4610      	movne	r0, r2
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
    45c6:	605a      	str	r2, [r3, #4]
	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
    45c8:	4770      	bx	lr

000045ca <arch_printk_char_out>:
}
    45ca:	2000      	movs	r0, #0
    45cc:	4770      	bx	lr

000045ce <printk>:
 *
 * @param fmt formatted string to output
 */

void printk(const char *fmt, ...)
{
    45ce:	b40f      	push	{r0, r1, r2, r3}
    45d0:	b507      	push	{r0, r1, r2, lr}
    45d2:	a904      	add	r1, sp, #16
    45d4:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
    45d8:	9101      	str	r1, [sp, #4]

	vprintk(fmt, ap);
    45da:	f7fc facd 	bl	b78 <vprintk>

	va_end(ap);
}
    45de:	b003      	add	sp, #12
    45e0:	f85d eb04 	ldr.w	lr, [sp], #4
    45e4:	b004      	add	sp, #16
    45e6:	4770      	bx	lr

000045e8 <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    45e8:	8b03      	ldrh	r3, [r0, #24]
	if ((state == ONOFF_STATE_OFF)
    45ea:	f013 0307 	ands.w	r3, r3, #7
    45ee:	d105      	bne.n	45fc <process_recheck+0x14>
	    && !sys_slist_is_empty(&mgr->clients)) {
    45f0:	6803      	ldr	r3, [r0, #0]
		evt = EVT_START;
    45f2:	2b00      	cmp	r3, #0
    45f4:	bf0c      	ite	eq
    45f6:	2000      	moveq	r0, #0
    45f8:	2003      	movne	r0, #3
    45fa:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
    45fc:	2b02      	cmp	r3, #2
    45fe:	d105      	bne.n	460c <process_recheck+0x24>
		   && (mgr->refs == 0U)) {
    4600:	8b43      	ldrh	r3, [r0, #26]
		evt = EVT_STOP;
    4602:	2b00      	cmp	r3, #0
    4604:	bf14      	ite	ne
    4606:	2000      	movne	r0, #0
    4608:	2004      	moveq	r0, #4
    460a:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ERROR)
    460c:	2b01      	cmp	r3, #1
    460e:	d105      	bne.n	461c <process_recheck+0x34>
		   && !sys_slist_is_empty(&mgr->clients)) {
    4610:	6803      	ldr	r3, [r0, #0]
		evt = EVT_RESET;
    4612:	2b00      	cmp	r3, #0
    4614:	bf0c      	ite	eq
    4616:	2000      	moveq	r0, #0
    4618:	2005      	movne	r0, #5
    461a:	4770      	bx	lr
	int evt = EVT_NOP;
    461c:	2000      	movs	r0, #0
}
    461e:	4770      	bx	lr

00004620 <notify_one>:
{
    4620:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4624:	460d      	mov	r5, r1
    4626:	4607      	mov	r7, r0
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
    4628:	4619      	mov	r1, r3
    462a:	1d28      	adds	r0, r5, #4
{
    462c:	4690      	mov	r8, r2
    462e:	461e      	mov	r6, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
    4630:	f7ff ffbe 	bl	45b0 <sys_notify_finalize>
	if (cb) {
    4634:	4604      	mov	r4, r0
    4636:	b138      	cbz	r0, 4648 <notify_one+0x28>
		cb(mgr, cli, state, res);
    4638:	4633      	mov	r3, r6
    463a:	4642      	mov	r2, r8
    463c:	4629      	mov	r1, r5
    463e:	4638      	mov	r0, r7
    4640:	46a4      	mov	ip, r4
}
    4642:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		cb(mgr, cli, state, res);
    4646:	4760      	bx	ip
}
    4648:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000464c <transition_complete>:
{
    464c:	b410      	push	{r4}
	__asm__ volatile(
    464e:	f04f 0420 	mov.w	r4, #32
    4652:	f3ef 8211 	mrs	r2, BASEPRI
    4656:	f384 8812 	msr	BASEPRI_MAX, r4
    465a:	f3bf 8f6f 	isb	sy
	mgr->last_res = res;
    465e:	6141      	str	r1, [r0, #20]
}
    4660:	bc10      	pop	{r4}
	process_event(mgr, EVT_COMPLETE, key);
    4662:	2101      	movs	r1, #1
    4664:	f7fc ba96 	b.w	b94 <process_event>

00004668 <validate_args>:
{
    4668:	b510      	push	{r4, lr}
    466a:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
    466c:	b140      	cbz	r0, 4680 <validate_args+0x18>
    466e:	b139      	cbz	r1, 4680 <validate_args+0x18>
	int rv = sys_notify_validate(&cli->notify);
    4670:	1d08      	adds	r0, r1, #4
    4672:	f7ff ff8c 	bl	458e <sys_notify_validate>
	if ((rv == 0)
    4676:	b928      	cbnz	r0, 4684 <validate_args+0x1c>
	    && ((cli->notify.flags
    4678:	68a3      	ldr	r3, [r4, #8]
    467a:	f033 0303 	bics.w	r3, r3, #3
    467e:	d001      	beq.n	4684 <validate_args+0x1c>
		rv = -EINVAL;
    4680:	f06f 0015 	mvn.w	r0, #21
}
    4684:	bd10      	pop	{r4, pc}

00004686 <onoff_manager_init>:
{
    4686:	b538      	push	{r3, r4, r5, lr}
    4688:	460c      	mov	r4, r1
	if ((mgr == NULL)
    468a:	4605      	mov	r5, r0
    468c:	b158      	cbz	r0, 46a6 <onoff_manager_init+0x20>
	    || (transitions == NULL)
    468e:	b151      	cbz	r1, 46a6 <onoff_manager_init+0x20>
	    || (transitions->start == NULL)
    4690:	680b      	ldr	r3, [r1, #0]
    4692:	b143      	cbz	r3, 46a6 <onoff_manager_init+0x20>
	    || (transitions->stop == NULL)) {
    4694:	684b      	ldr	r3, [r1, #4]
    4696:	b133      	cbz	r3, 46a6 <onoff_manager_init+0x20>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
    4698:	221c      	movs	r2, #28
    469a:	2100      	movs	r1, #0
    469c:	f000 f8ec 	bl	4878 <memset>
    46a0:	612c      	str	r4, [r5, #16]
	return 0;
    46a2:	2000      	movs	r0, #0
}
    46a4:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
    46a6:	f06f 0015 	mvn.w	r0, #21
    46aa:	e7fb      	b.n	46a4 <onoff_manager_init+0x1e>

000046ac <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
    46ac:	b570      	push	{r4, r5, r6, lr}
    46ae:	4604      	mov	r4, r0
    46b0:	460e      	mov	r6, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
    46b2:	f7ff ffd9 	bl	4668 <validate_args>

	if (rv < 0) {
    46b6:	1e05      	subs	r5, r0, #0
    46b8:	db31      	blt.n	471e <onoff_request+0x72>
    46ba:	f04f 0320 	mov.w	r3, #32
    46be:	f3ef 8111 	mrs	r1, BASEPRI
    46c2:	f383 8812 	msr	BASEPRI_MAX, r3
    46c6:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
    46ca:	8b63      	ldrh	r3, [r4, #26]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    46cc:	8b20      	ldrh	r0, [r4, #24]
	if (mgr->refs == SERVICE_REFS_MAX) {
    46ce:	f64f 75ff 	movw	r5, #65535	; 0xffff
    46d2:	42ab      	cmp	r3, r5
    46d4:	f000 0207 	and.w	r2, r0, #7
    46d8:	d02e      	beq.n	4738 <onoff_request+0x8c>
		rv = -EAGAIN;
		goto out;
	}

	rv = state;
	if (state == ONOFF_STATE_ON) {
    46da:	2a02      	cmp	r2, #2
    46dc:	d10e      	bne.n	46fc <onoff_request+0x50>
		/* Increment reference count, notify in exit */
		notify = true;
		mgr->refs += 1U;
    46de:	3301      	adds	r3, #1
    46e0:	8363      	strh	r3, [r4, #26]
	rv = state;
    46e2:	4615      	mov	r5, r2
		notify = true;
    46e4:	2301      	movs	r3, #1
	__asm__ volatile(
    46e6:	f381 8811 	msr	BASEPRI, r1
    46ea:	f3bf 8f6f 	isb	sy
	if (start) {
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);

		if (notify) {
    46ee:	b1b3      	cbz	r3, 471e <onoff_request+0x72>
			notify_one(mgr, cli, state, 0);
    46f0:	2300      	movs	r3, #0
    46f2:	4631      	mov	r1, r6
    46f4:	4620      	mov	r0, r4
    46f6:	f7ff ff93 	bl	4620 <notify_one>
    46fa:	e010      	b.n	471e <onoff_request+0x72>
	} else if ((state == ONOFF_STATE_OFF)
    46fc:	0783      	lsls	r3, r0, #30
    46fe:	d001      	beq.n	4704 <onoff_request+0x58>
		   || (state == ONOFF_STATE_TO_ON)) {
    4700:	2a06      	cmp	r2, #6
    4702:	d10e      	bne.n	4722 <onoff_request+0x76>
	parent->next = child;
    4704:	2300      	movs	r3, #0
    4706:	6033      	str	r3, [r6, #0]
 *
 * @return A pointer on the last node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_tail(sys_slist_t *list)
{
	return list->tail;
    4708:	6863      	ldr	r3, [r4, #4]
 * @param node A pointer on the node to append
 */
static inline void sys_slist_append(sys_slist_t *list,
				    sys_snode_t *node);

Z_GENLIST_APPEND(slist, snode)
    470a:	b993      	cbnz	r3, 4732 <onoff_request+0x86>
	list->head = node;
    470c:	e9c4 6600 	strd	r6, r6, [r4]
	if (start) {
    4710:	4615      	mov	r5, r2
    4712:	b962      	cbnz	r2, 472e <onoff_request+0x82>
		process_event(mgr, EVT_RECHECK, key);
    4714:	460a      	mov	r2, r1
    4716:	4620      	mov	r0, r4
    4718:	2102      	movs	r1, #2
    471a:	f7fc fa3b 	bl	b94 <process_event>
		}
	}

	return rv;
}
    471e:	4628      	mov	r0, r5
    4720:	bd70      	pop	{r4, r5, r6, pc}
		rv = -EIO;
    4722:	2a05      	cmp	r2, #5
    4724:	bf0c      	ite	eq
    4726:	f06f 0585 	mvneq.w	r5, #133	; 0x85
    472a:	f06f 0504 	mvnne.w	r5, #4
    472e:	2300      	movs	r3, #0
    4730:	e7d9      	b.n	46e6 <onoff_request+0x3a>
	parent->next = child;
    4732:	601e      	str	r6, [r3, #0]
	list->tail = node;
    4734:	6066      	str	r6, [r4, #4]
}
    4736:	e7eb      	b.n	4710 <onoff_request+0x64>
		rv = -EAGAIN;
    4738:	f06f 050a 	mvn.w	r5, #10
    473c:	e7f7      	b.n	472e <onoff_request+0x82>

0000473e <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
    473e:	4604      	mov	r4, r0
    4740:	b508      	push	{r3, lr}
    4742:	4608      	mov	r0, r1
    4744:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
    4746:	461a      	mov	r2, r3
    4748:	47a0      	blx	r4
	return z_impl_z_current_get();
    474a:	f7ff fd0b 	bl	4164 <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
    474e:	f7fd fab5 	bl	1cbc <z_impl_k_thread_abort>

00004752 <encode_uint>:
{
    4752:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4756:	469a      	mov	sl, r3
	bool upcase = isupper((int)conv->specifier);
    4758:	78d3      	ldrb	r3, [r2, #3]
	switch (specifier) {
    475a:	2b6f      	cmp	r3, #111	; 0x6f
{
    475c:	4680      	mov	r8, r0
    475e:	460f      	mov	r7, r1
    4760:	4615      	mov	r5, r2
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
    4762:	f1a3 0b41 	sub.w	fp, r3, #65	; 0x41
	switch (specifier) {
    4766:	d029      	beq.n	47bc <encode_uint+0x6a>
    4768:	d824      	bhi.n	47b4 <encode_uint+0x62>
		return 16;
    476a:	2b58      	cmp	r3, #88	; 0x58
    476c:	bf14      	ite	ne
    476e:	260a      	movne	r6, #10
    4770:	2610      	moveq	r6, #16
	char *bp = bps + (bpe - bps);
    4772:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
		unsigned int lsv = (unsigned int)(value % radix);
    4776:	4632      	mov	r2, r6
    4778:	2300      	movs	r3, #0
    477a:	4640      	mov	r0, r8
    477c:	4639      	mov	r1, r7
    477e:	f7fb ffa7 	bl	6d0 <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    4782:	2a09      	cmp	r2, #9
    4784:	b2d4      	uxtb	r4, r2
    4786:	d81e      	bhi.n	47c6 <encode_uint+0x74>
    4788:	3430      	adds	r4, #48	; 0x30
	} while ((value != 0) && (bps < bp));
    478a:	45b0      	cmp	r8, r6
		*--bp = (lsv <= 9) ? ('0' + lsv)
    478c:	b2e4      	uxtb	r4, r4
	} while ((value != 0) && (bps < bp));
    478e:	f177 0300 	sbcs.w	r3, r7, #0
		*--bp = (lsv <= 9) ? ('0' + lsv)
    4792:	f809 4d01 	strb.w	r4, [r9, #-1]!
	} while ((value != 0) && (bps < bp));
    4796:	d301      	bcc.n	479c <encode_uint+0x4a>
    4798:	45d1      	cmp	r9, sl
    479a:	d811      	bhi.n	47c0 <encode_uint+0x6e>
	if (conv->flag_hash) {
    479c:	782b      	ldrb	r3, [r5, #0]
    479e:	069b      	lsls	r3, r3, #26
    47a0:	d505      	bpl.n	47ae <encode_uint+0x5c>
		if (radix == 8) {
    47a2:	2e08      	cmp	r6, #8
    47a4:	d115      	bne.n	47d2 <encode_uint+0x80>
			conv->altform_0 = true;
    47a6:	78ab      	ldrb	r3, [r5, #2]
    47a8:	f043 0308 	orr.w	r3, r3, #8
			conv->altform_0c = true;
    47ac:	70ab      	strb	r3, [r5, #2]
}
    47ae:	4648      	mov	r0, r9
    47b0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (specifier) {
    47b4:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
		return 16;
    47b8:	2b70      	cmp	r3, #112	; 0x70
    47ba:	e7d7      	b.n	476c <encode_uint+0x1a>
	switch (specifier) {
    47bc:	2608      	movs	r6, #8
    47be:	e7d8      	b.n	4772 <encode_uint+0x20>
		value /= radix;
    47c0:	4680      	mov	r8, r0
    47c2:	460f      	mov	r7, r1
    47c4:	e7d7      	b.n	4776 <encode_uint+0x24>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    47c6:	f1bb 0f19 	cmp.w	fp, #25
    47ca:	bf94      	ite	ls
    47cc:	3437      	addls	r4, #55	; 0x37
    47ce:	3457      	addhi	r4, #87	; 0x57
    47d0:	e7db      	b.n	478a <encode_uint+0x38>
		} else if (radix == 16) {
    47d2:	2e10      	cmp	r6, #16
    47d4:	d1eb      	bne.n	47ae <encode_uint+0x5c>
			conv->altform_0c = true;
    47d6:	78ab      	ldrb	r3, [r5, #2]
    47d8:	f043 0310 	orr.w	r3, r3, #16
    47dc:	e7e6      	b.n	47ac <encode_uint+0x5a>

000047de <outs>:
{
    47de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    47e2:	4607      	mov	r7, r0
    47e4:	4688      	mov	r8, r1
    47e6:	4615      	mov	r5, r2
    47e8:	461e      	mov	r6, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
    47ea:	4614      	mov	r4, r2
    47ec:	42b4      	cmp	r4, r6
    47ee:	eba4 0005 	sub.w	r0, r4, r5
    47f2:	d302      	bcc.n	47fa <outs+0x1c>
    47f4:	b93e      	cbnz	r6, 4806 <outs+0x28>
    47f6:	7823      	ldrb	r3, [r4, #0]
    47f8:	b12b      	cbz	r3, 4806 <outs+0x28>
		int rc = out((int)*sp++, ctx);
    47fa:	f814 0b01 	ldrb.w	r0, [r4], #1
    47fe:	4641      	mov	r1, r8
    4800:	47b8      	blx	r7
		if (rc < 0) {
    4802:	2800      	cmp	r0, #0
    4804:	daf2      	bge.n	47ec <outs+0xe>
}
    4806:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000480a <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_WARN_DEPRECATED, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_ENFORCE_ZEPHYR_STDINT, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_LEGACY_INCLUDE_PATH, 1);

GEN_ABS_SYM_END
    480a:	4770      	bx	lr

0000480c <z_arm_fatal_error>:
{

	if (esf != NULL) {
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
    480c:	f000 babb 	b.w	4d86 <z_fatal_error>

00004810 <z_do_kernel_oops>:
 *
 * @param esf exception frame
 * @param callee_regs Callee-saved registers (R4-R11)
 */
void z_do_kernel_oops(const z_arch_esf_t *esf, _callee_saved_t *callee_regs)
{
    4810:	4601      	mov	r1, r0
	z_fatal_error(reason, esf);
    4812:	6800      	ldr	r0, [r0, #0]
    4814:	f000 bab7 	b.w	4d86 <z_fatal_error>

00004818 <z_irq_spurious>:
 */
void z_irq_spurious(const void *unused)
{
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
    4818:	2100      	movs	r1, #0
    481a:	2001      	movs	r0, #1
    481c:	f7ff bff6 	b.w	480c <z_arm_fatal_error>

00004820 <z_arm_nmi>:
 * Simply call what is installed in 'static void(*handler)(void)'.
 *
 */

void z_arm_nmi(void)
{
    4820:	b508      	push	{r3, lr}
	handler();
    4822:	f7fc ffe7 	bl	17f4 <z_SysNmiOnReset>
	z_arm_int_exit();
}
    4826:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
    482a:	f7fd b8bf 	b.w	19ac <z_arm_exc_exit>

0000482e <strcpy>:

char *strcpy(char *ZRESTRICT d, const char *ZRESTRICT s)
{
	char *dest = d;

	while (*s != '\0') {
    482e:	3901      	subs	r1, #1
    4830:	4603      	mov	r3, r0
    4832:	f811 2f01 	ldrb.w	r2, [r1, #1]!
    4836:	b90a      	cbnz	r2, 483c <strcpy+0xe>
		*d = *s;
		d++;
		s++;
	}

	*d = '\0';
    4838:	701a      	strb	r2, [r3, #0]

	return dest;
}
    483a:	4770      	bx	lr
		*d = *s;
    483c:	f803 2b01 	strb.w	r2, [r3], #1
		s++;
    4840:	e7f7      	b.n	4832 <strcpy+0x4>

00004842 <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
    4842:	4603      	mov	r3, r0
	size_t n = 0;
    4844:	2000      	movs	r0, #0

	while (*s != '\0') {
    4846:	5c1a      	ldrb	r2, [r3, r0]
    4848:	b902      	cbnz	r2, 484c <strlen+0xa>
		s++;
		n++;
	}

	return n;
}
    484a:	4770      	bx	lr
		n++;
    484c:	3001      	adds	r0, #1
    484e:	e7fa      	b.n	4846 <strlen+0x4>

00004850 <strnlen>:
 *
 * @return number of bytes in fixed-size string <s>
 */

size_t strnlen(const char *s, size_t maxlen)
{
    4850:	4603      	mov	r3, r0
	size_t n = 0;
    4852:	2000      	movs	r0, #0

	while (*s != '\0' && n < maxlen) {
    4854:	5c1a      	ldrb	r2, [r3, r0]
    4856:	b10a      	cbz	r2, 485c <strnlen+0xc>
    4858:	4288      	cmp	r0, r1
    485a:	d100      	bne.n	485e <strnlen+0xe>
		s++;
		n++;
	}

	return n;
}
    485c:	4770      	bx	lr
		n++;
    485e:	3001      	adds	r0, #1
    4860:	e7f8      	b.n	4854 <strnlen+0x4>

00004862 <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *ZRESTRICT d, const void *ZRESTRICT s, size_t n)
{
    4862:	b510      	push	{r4, lr}
    4864:	1e43      	subs	r3, r0, #1
    4866:	440a      	add	r2, r1
	}
#endif

	/* do byte-sized copying until finished */

	while (n > 0) {
    4868:	4291      	cmp	r1, r2
    486a:	d100      	bne.n	486e <memcpy+0xc>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
    486c:	bd10      	pop	{r4, pc}
		*(d_byte++) = *(s_byte++);
    486e:	f811 4b01 	ldrb.w	r4, [r1], #1
    4872:	f803 4f01 	strb.w	r4, [r3, #1]!
		n--;
    4876:	e7f7      	b.n	4868 <memcpy+0x6>

00004878 <memset>:
void *memset(void *buf, int c, size_t n)
{
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
    4878:	b2c9      	uxtb	r1, r1
	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;
#endif

	while (n > 0) {
    487a:	4402      	add	r2, r0
	unsigned char *d_byte = (unsigned char *)buf;
    487c:	4603      	mov	r3, r0
	while (n > 0) {
    487e:	4293      	cmp	r3, r2
    4880:	d100      	bne.n	4884 <memset+0xc>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
    4882:	4770      	bx	lr
		*(d_byte++) = c_byte;
    4884:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
    4888:	e7f9      	b.n	487e <memset+0x6>

0000488a <_stdout_hook_default>:
}
    488a:	f04f 30ff 	mov.w	r0, #4294967295
    488e:	4770      	bx	lr

00004890 <pm_state_set>:
/* Invoke Low Power/System Off specific Tasks */
__weak void pm_state_set(enum pm_state state, uint8_t substate_id)
{
	ARG_UNUSED(substate_id);

	switch (state) {
    4890:	2806      	cmp	r0, #6
    4892:	d108      	bne.n	48a6 <pm_state_set+0x16>
    p_reg->SYSTEMOFF = POWER_SYSTEMOFF_SYSTEMOFF_Enter;
    4894:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    4898:	2201      	movs	r2, #1
    489a:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  __ASM volatile ("dsb 0xF":::"memory");
    489e:	f3bf 8f4f 	dsb	sy
        __WFE();
    48a2:	bf20      	wfe
    while (true)
    48a4:	e7fd      	b.n	48a2 <pm_state_set+0x12>
		break;
	default:
		LOG_DBG("Unsupported power state %u", state);
		break;
	}
}
    48a6:	4770      	bx	lr

000048a8 <pm_state_exit_post_ops>:
    48a8:	2300      	movs	r3, #0
    48aa:	f383 8811 	msr	BASEPRI, r3
    48ae:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
    48b2:	4770      	bx	lr

000048b4 <get_status>:
	return GET_STATUS(get_sub_data(dev, type)->flags);
    48b4:	6903      	ldr	r3, [r0, #16]
    48b6:	b2c9      	uxtb	r1, r1
    48b8:	220c      	movs	r2, #12
    48ba:	fb01 3302 	mla	r3, r1, r2, r3
    48be:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
    48c0:	f000 0007 	and.w	r0, r0, #7
    48c4:	4770      	bx	lr

000048c6 <set_on_state>:
	__asm__ volatile(
    48c6:	f04f 0320 	mov.w	r3, #32
    48ca:	f3ef 8211 	mrs	r2, BASEPRI
    48ce:	f383 8812 	msr	BASEPRI_MAX, r3
    48d2:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
    48d6:	6803      	ldr	r3, [r0, #0]
    48d8:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    48dc:	f043 0302 	orr.w	r3, r3, #2
    48e0:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
    48e2:	f382 8811 	msr	BASEPRI, r2
    48e6:	f3bf 8f6f 	isb	sy
}
    48ea:	4770      	bx	lr

000048ec <stop>:
{
    48ec:	4603      	mov	r3, r0
    48ee:	b570      	push	{r4, r5, r6, lr}
	struct nrf_clock_control_data *data = dev->data;
    48f0:	6900      	ldr	r0, [r0, #16]
	return &data->subsys[type];
    48f2:	b2c9      	uxtb	r1, r1
	__asm__ volatile(
    48f4:	f04f 0420 	mov.w	r4, #32
    48f8:	f3ef 8611 	mrs	r6, BASEPRI
    48fc:	f384 8812 	msr	BASEPRI_MAX, r4
    4900:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    4904:	250c      	movs	r5, #12
    4906:	fb05 0401 	mla	r4, r5, r1, r0
    490a:	6c24      	ldr	r4, [r4, #64]	; 0x40
	if ((current_ctx != 0) && (current_ctx != ctx)) {
    490c:	f014 04c0 	ands.w	r4, r4, #192	; 0xc0
    4910:	d001      	beq.n	4916 <stop+0x2a>
    4912:	42a2      	cmp	r2, r4
    4914:	d110      	bne.n	4938 <stop+0x4c>
		*flags = CLOCK_CONTROL_STATUS_OFF;
    4916:	fb05 0001 	mla	r0, r5, r1, r0
    491a:	2201      	movs	r2, #1
    491c:	6402      	str	r2, [r0, #64]	; 0x40
	int err = 0;
    491e:	2000      	movs	r0, #0
	__asm__ volatile(
    4920:	f386 8811 	msr	BASEPRI, r6
    4924:	f3bf 8f6f 	isb	sy
	if (err < 0) {
    4928:	b928      	cbnz	r0, 4936 <stop+0x4a>
	get_sub_config(dev, type)->stop();
    492a:	685b      	ldr	r3, [r3, #4]
    492c:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
    4930:	684b      	ldr	r3, [r1, #4]
    4932:	4798      	blx	r3
	return 0;
    4934:	2000      	movs	r0, #0
}
    4936:	bd70      	pop	{r4, r5, r6, pc}
		err = -EPERM;
    4938:	f04f 30ff 	mov.w	r0, #4294967295
    493c:	e7f0      	b.n	4920 <stop+0x34>

0000493e <api_stop>:
	return stop(dev, subsys, CTX_API);
    493e:	2280      	movs	r2, #128	; 0x80
    4940:	f7ff bfd4 	b.w	48ec <stop>

00004944 <async_start>:
{
    4944:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4946:	9f06      	ldr	r7, [sp, #24]
	struct nrf_clock_control_data *data = dev->data;
    4948:	6904      	ldr	r4, [r0, #16]
{
    494a:	4605      	mov	r5, r0
    494c:	b2c9      	uxtb	r1, r1
	__asm__ volatile(
    494e:	f04f 0020 	mov.w	r0, #32
    4952:	f3ef 8c11 	mrs	ip, BASEPRI
    4956:	f380 8812 	msr	BASEPRI_MAX, r0
    495a:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    495e:	260c      	movs	r6, #12
    4960:	fb06 4601 	mla	r6, r6, r1, r4
    4964:	6c30      	ldr	r0, [r6, #64]	; 0x40
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
    4966:	f000 0e07 	and.w	lr, r0, #7
    496a:	f1be 0f01 	cmp.w	lr, #1
    496e:	d111      	bne.n	4994 <async_start+0x50>
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
    4970:	6437      	str	r7, [r6, #64]	; 0x40
	int err = 0;
    4972:	2600      	movs	r6, #0
	__asm__ volatile(
    4974:	f38c 8811 	msr	BASEPRI, ip
    4978:	f3bf 8f6f 	isb	sy
	if (err < 0) {
    497c:	b946      	cbnz	r6, 4990 <async_start+0x4c>
	subdata->cb = cb;
    497e:	200c      	movs	r0, #12
    4980:	fb00 4401 	mla	r4, r0, r1, r4
	subdata->user_data = user_data;
    4984:	e9c4 230e 	strd	r2, r3, [r4, #56]	; 0x38
	 get_sub_config(dev, type)->start();
    4988:	686b      	ldr	r3, [r5, #4]
    498a:	f853 3031 	ldr.w	r3, [r3, r1, lsl #3]
    498e:	4798      	blx	r3
}
    4990:	4630      	mov	r0, r6
    4992:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	uint32_t current_ctx = GET_CTX(*flags);
    4994:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
		err = -EALREADY;
    4998:	4287      	cmp	r7, r0
    499a:	bf14      	ite	ne
    499c:	f04f 36ff 	movne.w	r6, #4294967295
    49a0:	f06f 0677 	mvneq.w	r6, #119	; 0x77
    49a4:	e7e6      	b.n	4974 <async_start+0x30>

000049a6 <api_start>:
{
    49a6:	b513      	push	{r0, r1, r4, lr}
	return async_start(dev, subsys, cb, user_data, CTX_API);
    49a8:	2480      	movs	r4, #128	; 0x80
    49aa:	9400      	str	r4, [sp, #0]
    49ac:	f7ff ffca 	bl	4944 <async_start>
}
    49b0:	b002      	add	sp, #8
    49b2:	bd10      	pop	{r4, pc}

000049b4 <onoff_started_callback>:
	return &data->mgr[type];
    49b4:	6900      	ldr	r0, [r0, #16]
{
    49b6:	b410      	push	{r4}
	return &data->mgr[type];
    49b8:	b2cb      	uxtb	r3, r1
	notify(mgr, 0);
    49ba:	241c      	movs	r4, #28
    49bc:	fb03 0004 	mla	r0, r3, r4, r0
    49c0:	2100      	movs	r1, #0
}
    49c2:	bc10      	pop	{r4}
	notify(mgr, 0);
    49c4:	4710      	bx	r2

000049c6 <lfclk_stop>:
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
    49c6:	2000      	movs	r0, #0
    49c8:	f000 b9bb 	b.w	4d42 <nrfx_clock_stop>

000049cc <blocking_start_callback>:
{
    49cc:	4610      	mov	r0, r2
		(void) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
    49ce:	f7ff b8d7 	b.w	3b80 <z_impl_k_sem_give>

000049d2 <gpio_nrfx_port_get_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    49d2:	6843      	ldr	r3, [r0, #4]
    49d4:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
    49d6:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
	*value = nrf_gpio_port_in_read(reg);
    49da:	600b      	str	r3, [r1, #0]
}
    49dc:	2000      	movs	r0, #0
    49de:	4770      	bx	lr

000049e0 <gpio_nrfx_port_set_masked_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    49e0:	6843      	ldr	r3, [r0, #4]
    49e2:	685b      	ldr	r3, [r3, #4]
	const uint32_t set_mask = value & mask;
    49e4:	ea02 0001 	and.w	r0, r2, r1
	const uint32_t clear_mask = (~set_mask) & mask;
    49e8:	ea21 0102 	bic.w	r1, r1, r2
    p_reg->OUTSET = set_mask;
    49ec:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
    p_reg->OUTCLR = clr_mask;
    49f0:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
}
    49f4:	2000      	movs	r0, #0
    49f6:	4770      	bx	lr

000049f8 <gpio_nrfx_port_set_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    49f8:	6843      	ldr	r3, [r0, #4]
    49fa:	685b      	ldr	r3, [r3, #4]
}
    49fc:	2000      	movs	r0, #0
    p_reg->OUTSET = set_mask;
    49fe:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
    4a02:	4770      	bx	lr

00004a04 <gpio_nrfx_port_clear_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    4a04:	6843      	ldr	r3, [r0, #4]
    4a06:	685b      	ldr	r3, [r3, #4]
}
    4a08:	2000      	movs	r0, #0
    p_reg->OUTCLR = clr_mask;
    4a0a:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
    4a0e:	4770      	bx	lr

00004a10 <gpio_nrfx_port_toggle_bits>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    4a10:	6843      	ldr	r3, [r0, #4]
    4a12:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
    4a14:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
	const uint32_t set_mask = value & mask;
    4a18:	ea21 0003 	bic.w	r0, r1, r3
	const uint32_t clear_mask = (~value) & mask;
    4a1c:	400b      	ands	r3, r1
    p_reg->OUTSET = set_mask;
    4a1e:	f8c2 0508 	str.w	r0, [r2, #1288]	; 0x508
    p_reg->OUTCLR = clr_mask;
    4a22:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
}
    4a26:	2000      	movs	r0, #0
    4a28:	4770      	bx	lr

00004a2a <gpio_nrfx_manage_callback>:
	return port->data;
    4a2a:	6903      	ldr	r3, [r0, #16]
	return list->head;
    4a2c:	6858      	ldr	r0, [r3, #4]
{
    4a2e:	b530      	push	{r4, r5, lr}
	if (!sys_slist_is_empty(callbacks)) {
    4a30:	b158      	cbz	r0, 4a4a <gpio_nrfx_manage_callback+0x20>
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    4a32:	2400      	movs	r4, #0
    4a34:	4281      	cmp	r1, r0
    4a36:	d112      	bne.n	4a5e <gpio_nrfx_manage_callback+0x34>
	return node->next;
    4a38:	6808      	ldr	r0, [r1, #0]
	return list->tail;
    4a3a:	689d      	ldr	r5, [r3, #8]
Z_GENLIST_REMOVE(slist, snode)
    4a3c:	b954      	cbnz	r4, 4a54 <gpio_nrfx_manage_callback+0x2a>
    4a3e:	428d      	cmp	r5, r1
	list->head = node;
    4a40:	6058      	str	r0, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
    4a42:	d100      	bne.n	4a46 <gpio_nrfx_manage_callback+0x1c>
	list->tail = node;
    4a44:	6098      	str	r0, [r3, #8]
	parent->next = child;
    4a46:	2000      	movs	r0, #0
    4a48:	6008      	str	r0, [r1, #0]
	if (set) {
    4a4a:	b96a      	cbnz	r2, 4a68 <gpio_nrfx_manage_callback+0x3e>
	return 0;
    4a4c:	2000      	movs	r0, #0
}
    4a4e:	bd30      	pop	{r4, r5, pc}
    4a50:	4628      	mov	r0, r5
    4a52:	e7ef      	b.n	4a34 <gpio_nrfx_manage_callback+0xa>
Z_GENLIST_REMOVE(slist, snode)
    4a54:	428d      	cmp	r5, r1
	parent->next = child;
    4a56:	6020      	str	r0, [r4, #0]
	list->tail = node;
    4a58:	bf08      	it	eq
    4a5a:	609c      	streq	r4, [r3, #8]
}
    4a5c:	e7f3      	b.n	4a46 <gpio_nrfx_manage_callback+0x1c>
	return node->next;
    4a5e:	6805      	ldr	r5, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    4a60:	4604      	mov	r4, r0
    4a62:	2d00      	cmp	r5, #0
    4a64:	d1f4      	bne.n	4a50 <gpio_nrfx_manage_callback+0x26>
			if (!set) {
    4a66:	b13a      	cbz	r2, 4a78 <gpio_nrfx_manage_callback+0x4e>
Z_GENLIST_PREPEND(slist, snode)
    4a68:	6898      	ldr	r0, [r3, #8]
	parent->next = child;
    4a6a:	685a      	ldr	r2, [r3, #4]
    4a6c:	600a      	str	r2, [r1, #0]
	list->head = node;
    4a6e:	6059      	str	r1, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
    4a70:	2800      	cmp	r0, #0
    4a72:	d1eb      	bne.n	4a4c <gpio_nrfx_manage_callback+0x22>
	list->tail = node;
    4a74:	6099      	str	r1, [r3, #8]
}
    4a76:	e7ea      	b.n	4a4e <gpio_nrfx_manage_callback+0x24>
				return -EINVAL;
    4a78:	f06f 0015 	mvn.w	r0, #21
	return gpio_manage_callback(&get_port_data(port)->callbacks,
    4a7c:	e7e7      	b.n	4a4e <gpio_nrfx_manage_callback+0x24>

00004a7e <uarte_nrfx_config_get>:
	*cfg = data->uart_config;
    4a7e:	6902      	ldr	r2, [r0, #16]
{
    4a80:	460b      	mov	r3, r1
	*cfg = data->uart_config;
    4a82:	e9d2 0101 	ldrd	r0, r1, [r2, #4]
    4a86:	e883 0003 	stmia.w	r3, {r0, r1}
}
    4a8a:	2000      	movs	r0, #0
    4a8c:	4770      	bx	lr

00004a8e <uarte_nrfx_err_check>:
	return config->uarte_regs;
    4a8e:	6843      	ldr	r3, [r0, #4]
    4a90:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
    4a92:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
    4a96:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
    4a9a:	4770      	bx	lr

00004a9c <uarte_nrfx_poll_in>:
	return config->uarte_regs;
    4a9c:	6843      	ldr	r3, [r0, #4]
	const struct uarte_nrfx_data *data = dev->data;
    4a9e:	6902      	ldr	r2, [r0, #16]
	return config->uarte_regs;
    4aa0:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    4aa2:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
    4aa6:	b150      	cbz	r0, 4abe <uarte_nrfx_poll_in+0x22>
	*c = *data->rx_data;
    4aa8:	6952      	ldr	r2, [r2, #20]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    4aaa:	2000      	movs	r0, #0
    4aac:	7812      	ldrb	r2, [r2, #0]
    4aae:	700a      	strb	r2, [r1, #0]
    4ab0:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
    4ab4:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    4ab8:	2201      	movs	r2, #1
    4aba:	601a      	str	r2, [r3, #0]
	return 0;
    4abc:	4770      	bx	lr
		return -1;
    4abe:	f04f 30ff 	mov.w	r0, #4294967295
}
    4ac2:	4770      	bx	lr

00004ac4 <is_tx_ready.isra.0>:
	return config->uarte_regs;
    4ac4:	6802      	ldr	r2, [r0, #0]
static bool is_tx_ready(const struct device *dev)
    4ac6:	4603      	mov	r3, r0
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    4ac8:	f8d2 0158 	ldr.w	r0, [r2, #344]	; 0x158
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
    4acc:	b940      	cbnz	r0, 4ae0 <is_tx_ready.isra.0+0x1c>
	bool ppi_endtx = config->flags & UARTE_CFG_FLAG_PPI_ENDTX;
    4ace:	685b      	ldr	r3, [r3, #4]
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
    4ad0:	079b      	lsls	r3, r3, #30
    4ad2:	d406      	bmi.n	4ae2 <is_tx_ready.isra.0+0x1e>
    4ad4:	f8d2 0120 	ldr.w	r0, [r2, #288]	; 0x120
    4ad8:	3800      	subs	r0, #0
    4ada:	bf18      	it	ne
    4adc:	2001      	movne	r0, #1
    4ade:	4770      	bx	lr
    4ae0:	2001      	movs	r0, #1
}
    4ae2:	4770      	bx	lr

00004ae4 <uarte_nrfx_isr_int>:
	const struct uarte_nrfx_config *config = dev->config;
    4ae4:	6842      	ldr	r2, [r0, #4]
	return config->uarte_regs;
    4ae6:	6813      	ldr	r3, [r2, #0]
    return p_reg->INTENSET & mask;
    4ae8:	f8d3 1304 	ldr.w	r1, [r3, #772]	; 0x304
	if (nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK) &&
    4aec:	05c9      	lsls	r1, r1, #23
    4aee:	d518      	bpl.n	4b22 <uarte_nrfx_isr_int+0x3e>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    4af0:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
    4af4:	b1a9      	cbz	r1, 4b22 <uarte_nrfx_isr_int+0x3e>
	__asm__ volatile(
    4af6:	f04f 0020 	mov.w	r0, #32
    4afa:	f3ef 8111 	mrs	r1, BASEPRI
    4afe:	f380 8812 	msr	BASEPRI_MAX, r0
    4b02:	f3bf 8f6f 	isb	sy
    4b06:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
    4b0a:	b130      	cbz	r0, 4b1a <uarte_nrfx_isr_int+0x36>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    4b0c:	2000      	movs	r0, #0
    4b0e:	f8c3 0120 	str.w	r0, [r3, #288]	; 0x120
    4b12:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    4b16:	2001      	movs	r0, #1
    4b18:	60d8      	str	r0, [r3, #12]
	__asm__ volatile(
    4b1a:	f381 8811 	msr	BASEPRI, r1
    4b1e:	f3bf 8f6f 	isb	sy
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
    4b22:	6852      	ldr	r2, [r2, #4]
    4b24:	06d2      	lsls	r2, r2, #27
    4b26:	d515      	bpl.n	4b54 <uarte_nrfx_isr_int+0x70>
	__asm__ volatile(
    4b28:	f04f 0120 	mov.w	r1, #32
    4b2c:	f3ef 8211 	mrs	r2, BASEPRI
    4b30:	f381 8812 	msr	BASEPRI_MAX, r1
    4b34:	f3bf 8f6f 	isb	sy
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    4b38:	f8d3 1158 	ldr.w	r1, [r3, #344]	; 0x158
		if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
    4b3c:	b111      	cbz	r1, 4b44 <uarte_nrfx_isr_int+0x60>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    4b3e:	2100      	movs	r1, #0
    4b40:	f8c3 1500 	str.w	r1, [r3, #1280]	; 0x500
    p_reg->INTENCLR = mask;
    4b44:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
    4b48:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
	__asm__ volatile(
    4b4c:	f382 8811 	msr	BASEPRI, r2
    4b50:	f3bf 8f6f 	isb	sy
}
    4b54:	4770      	bx	lr

00004b56 <sys_clock_idle_exit>:
{
}

void __weak sys_clock_idle_exit(void)
{
}
    4b56:	4770      	bx	lr

00004b58 <sys_clock_cycle_get_32>:
{
    4b58:	b508      	push	{r3, lr}
	return (uint32_t)z_nrf_rtc_timer_read();
    4b5a:	f7fd fed3 	bl	2904 <z_nrf_rtc_timer_read>
}
    4b5e:	bd08      	pop	{r3, pc}

00004b60 <pinctrl_lookup_state>:

#include <zephyr/drivers/pinctrl.h>

int pinctrl_lookup_state(const struct pinctrl_dev_config *config, uint8_t id,
			 const struct pinctrl_state **state)
{
    4b60:	b530      	push	{r4, r5, lr}
	*state = &config->states[0];
    4b62:	6843      	ldr	r3, [r0, #4]
    4b64:	6013      	str	r3, [r2, #0]
	while (*state <= &config->states[config->state_cnt - 1U]) {
    4b66:	7a03      	ldrb	r3, [r0, #8]
    4b68:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
    4b6c:	3b01      	subs	r3, #1
    4b6e:	00db      	lsls	r3, r3, #3
    4b70:	6845      	ldr	r5, [r0, #4]
    4b72:	6814      	ldr	r4, [r2, #0]
    4b74:	441d      	add	r5, r3
    4b76:	42ac      	cmp	r4, r5
    4b78:	d902      	bls.n	4b80 <pinctrl_lookup_state+0x20>
		}

		(*state)++;
	}

	return -ENOENT;
    4b7a:	f06f 0001 	mvn.w	r0, #1
}
    4b7e:	bd30      	pop	{r4, r5, pc}
		if (id == (*state)->id) {
    4b80:	7965      	ldrb	r5, [r4, #5]
    4b82:	428d      	cmp	r5, r1
    4b84:	d002      	beq.n	4b8c <pinctrl_lookup_state+0x2c>
		(*state)++;
    4b86:	3408      	adds	r4, #8
    4b88:	6014      	str	r4, [r2, #0]
    4b8a:	e7f1      	b.n	4b70 <pinctrl_lookup_state+0x10>
			return 0;
    4b8c:	2000      	movs	r0, #0
    4b8e:	e7f6      	b.n	4b7e <pinctrl_lookup_state+0x1e>

00004b90 <nrf_gpio_pin_write>:
    *p_pin = pin_number & 0x1F;
    4b90:	f000 031f 	and.w	r3, r0, #31
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    4b94:	2001      	movs	r0, #1
    4b96:	4098      	lsls	r0, r3
    4b98:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    if (value == 0)
    4b9c:	b911      	cbnz	r1, 4ba4 <nrf_gpio_pin_write+0x14>
    p_reg->OUTCLR = clr_mask;
    4b9e:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
}
    4ba2:	4770      	bx	lr
    p_reg->OUTSET = set_mask;
    4ba4:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
}
    4ba8:	4770      	bx	lr

00004baa <nrf_pin_configure>:
 */
__unused static void nrf_pin_configure(pinctrl_soc_pin_t pin,
				       nrf_gpio_pin_dir_t dir,
				       nrf_gpio_pin_input_t input,
				       nrf_gpio_pin_drive_t drive)
{
    4baa:	b530      	push	{r4, r5, lr}
	/* force input direction and disconnected buffer for low power */
	if (NRF_GET_LP(pin) == NRF_LP_ENABLE) {
    4bac:	f400 5480 	and.w	r4, r0, #4096	; 0x1000
		dir = NRF_GPIO_PIN_DIR_INPUT;
		input = NRF_GPIO_PIN_INPUT_DISCONNECT;
    4bb0:	2c00      	cmp	r4, #0
    4bb2:	bf08      	it	eq
    4bb4:	4615      	moveq	r5, r2
           ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos) |
    4bb6:	ea4f 2303 	mov.w	r3, r3, lsl #8
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    4bba:	f3c0 1281 	ubfx	r2, r0, #6, #2
    4bbe:	ea43 0282 	orr.w	r2, r3, r2, lsl #2
    4bc2:	bf18      	it	ne
    4bc4:	2100      	movne	r1, #0
    *p_pin = pin_number & 0x1F;
    4bc6:	f000 041f 	and.w	r4, r0, #31
    4bca:	bf18      	it	ne
    4bcc:	2501      	movne	r5, #1
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    4bce:	430a      	orrs	r2, r1
    reg->PIN_CNF[pin_number] = cnf;
    4bd0:	f504 74e0 	add.w	r4, r4, #448	; 0x1c0
    4bd4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    4bd8:	ea42 0245 	orr.w	r2, r2, r5, lsl #1
    reg->PIN_CNF[pin_number] = cnf;
    4bdc:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
	}

	nrf_gpio_cfg(NRF_GET_PIN(pin), dir, input, NRF_GET_PULL(pin), drive,
		     NRF_GPIO_PIN_NOSENSE);
}
    4be0:	bd30      	pop	{r4, r5, pc}

00004be2 <pinctrl_configure_pins>:

int pinctrl_configure_pins(const pinctrl_soc_pin_t *pins, uint8_t pin_cnt,
			   uintptr_t reg)
{
    4be2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    4be6:	4616      	mov	r6, r2
    4be8:	4605      	mov	r5, r0
    4bea:	eb00 0981 	add.w	r9, r0, r1, lsl #2
			break;
		case NRF_FUN_PWM_OUT3:
			NRF_PSEL_PWM(reg, OUT[3]) = NRF_GET_PIN(pins[i]);
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]),
					   NRF_GET_INVERT(pins[i]));
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
    4bee:	2701      	movs	r7, #1
    p_reg->OUTCLR = clr_mask;
    4bf0:	f04f 48a0 	mov.w	r8, #1342177280	; 0x50000000
	for (uint8_t i = 0U; i < pin_cnt; i++) {
    4bf4:	454d      	cmp	r5, r9
    4bf6:	d102      	bne.n	4bfe <pinctrl_configure_pins+0x1c>
		default:
			return -ENOTSUP;
		}
	}

	return 0;
    4bf8:	2000      	movs	r0, #0
}
    4bfa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		__unused nrf_gpio_pin_drive_t drive = NRF_GET_DRIVE(pins[i]);
    4bfe:	682c      	ldr	r4, [r5, #0]
		switch (NRF_GET_FUN(pins[i])) {
    4c00:	0c23      	lsrs	r3, r4, #16
		__unused nrf_gpio_pin_drive_t drive = NRF_GET_DRIVE(pins[i]);
    4c02:	f3c4 2203 	ubfx	r2, r4, #8, #4
		switch (NRF_GET_FUN(pins[i])) {
    4c06:	2b19      	cmp	r3, #25
    4c08:	d876      	bhi.n	4cf8 <pinctrl_configure_pins+0x116>
    4c0a:	e8df f003 	tbb	[pc, r3]
    4c0e:	1b0d      	.short	0x1b0d
    4c10:	402d2823 	.word	0x402d2823
    4c14:	75757528 	.word	0x75757528
    4c18:	75554c75 	.word	0x75554c75
    4c1c:	75757575 	.word	0x75757575
    4c20:	75757575 	.word	0x75757575
    4c24:	706b665a 	.word	0x706b665a
			NRF_PSEL_UART(reg, TXD) = NRF_GET_PIN(pins[i]);
    4c28:	f004 043f 	and.w	r4, r4, #63	; 0x3f
    4c2c:	f8c6 450c 	str.w	r4, [r6, #1292]	; 0x50c
    *p_pin = pin_number & 0x1F;
    4c30:	682b      	ldr	r3, [r5, #0]
    4c32:	f003 031f 	and.w	r3, r3, #31
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    4c36:	fa07 f303 	lsl.w	r3, r7, r3
    p_reg->OUTSET = set_mask;
    4c3a:	f8c8 3508 	str.w	r3, [r8, #1288]	; 0x508
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
    4c3e:	4613      	mov	r3, r2
    4c40:	2201      	movs	r2, #1
    4c42:	e005      	b.n	4c50 <pinctrl_configure_pins+0x6e>
			NRF_PSEL_UART(reg, RXD) = NRF_GET_PIN(pins[i]);
    4c44:	f004 043f 	and.w	r4, r4, #63	; 0x3f
    4c48:	f8c6 4514 	str.w	r4, [r6, #1300]	; 0x514
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    4c4c:	4613      	mov	r3, r2
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    4c4e:	2200      	movs	r2, #0
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
    4c50:	4611      	mov	r1, r2
    4c52:	e017      	b.n	4c84 <pinctrl_configure_pins+0xa2>
			NRF_PSEL_UART(reg, RTS) = NRF_GET_PIN(pins[i]);
    4c54:	f004 043f 	and.w	r4, r4, #63	; 0x3f
    4c58:	f8c6 4508 	str.w	r4, [r6, #1288]	; 0x508
    4c5c:	e7e8      	b.n	4c30 <pinctrl_configure_pins+0x4e>
			NRF_PSEL_UART(reg, CTS) = NRF_GET_PIN(pins[i]);
    4c5e:	f004 043f 	and.w	r4, r4, #63	; 0x3f
    4c62:	f8c6 4510 	str.w	r4, [r6, #1296]	; 0x510
    4c66:	e7f1      	b.n	4c4c <pinctrl_configure_pins+0x6a>
			NRF_PSEL_SPIM(reg, SCK) = NRF_GET_PIN(pins[i]);
    4c68:	f004 043f 	and.w	r4, r4, #63	; 0x3f
    4c6c:	f8c6 4508 	str.w	r4, [r6, #1288]	; 0x508
    *p_pin = pin_number & 0x1F;
    4c70:	682b      	ldr	r3, [r5, #0]
    4c72:	f003 031f 	and.w	r3, r3, #31
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    4c76:	fa07 f303 	lsl.w	r3, r7, r3
    p_reg->OUTCLR = clr_mask;
    4c7a:	f8c8 350c 	str.w	r3, [r8, #1292]	; 0x50c
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
    4c7e:	2101      	movs	r1, #1
    4c80:	4613      	mov	r3, r2
    4c82:	2200      	movs	r2, #0
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
    4c84:	6828      	ldr	r0, [r5, #0]
    4c86:	f7ff ff90 	bl	4baa <nrf_pin_configure>
	for (uint8_t i = 0U; i < pin_cnt; i++) {
    4c8a:	3504      	adds	r5, #4
    4c8c:	e7b2      	b.n	4bf4 <pinctrl_configure_pins+0x12>
			NRF_PSEL_SPIM(reg, MOSI) = NRF_GET_PIN(pins[i]);
    4c8e:	f004 043f 	and.w	r4, r4, #63	; 0x3f
    4c92:	f8c6 450c 	str.w	r4, [r6, #1292]	; 0x50c
    *p_pin = pin_number & 0x1F;
    4c96:	682b      	ldr	r3, [r5, #0]
    4c98:	f003 031f 	and.w	r3, r3, #31
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    4c9c:	fa07 f303 	lsl.w	r3, r7, r3
    p_reg->OUTCLR = clr_mask;
    4ca0:	f8c8 350c 	str.w	r3, [r8, #1292]	; 0x50c
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
    4ca4:	e7cb      	b.n	4c3e <pinctrl_configure_pins+0x5c>
			NRF_PSEL_TWIM(reg, SCL) = NRF_GET_PIN(pins[i]);
    4ca6:	f004 043f 	and.w	r4, r4, #63	; 0x3f
    4caa:	f8c6 4508 	str.w	r4, [r6, #1288]	; 0x508
				drive = NRF_DRIVE_S0D1;
    4cae:	2a00      	cmp	r2, #0
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    4cb0:	bf14      	ite	ne
    4cb2:	4613      	movne	r3, r2
    4cb4:	2306      	moveq	r3, #6
    4cb6:	e7ca      	b.n	4c4e <pinctrl_configure_pins+0x6c>
			NRF_PSEL_TWIM(reg, SDA) = NRF_GET_PIN(pins[i]);
    4cb8:	f004 043f 	and.w	r4, r4, #63	; 0x3f
    4cbc:	f8c6 450c 	str.w	r4, [r6, #1292]	; 0x50c
    4cc0:	e7f5      	b.n	4cae <pinctrl_configure_pins+0xcc>
			NRF_PSEL_PWM(reg, OUT[0]) = NRF_GET_PIN(pins[i]);
    4cc2:	f004 043f 	and.w	r4, r4, #63	; 0x3f
    4cc6:	f8c6 4560 	str.w	r4, [r6, #1376]	; 0x560
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]),
    4cca:	6828      	ldr	r0, [r5, #0]
    4ccc:	f3c0 3140 	ubfx	r1, r0, #13, #1
    4cd0:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    4cd4:	f7ff ff5c 	bl	4b90 <nrf_gpio_pin_write>
    4cd8:	e7b1      	b.n	4c3e <pinctrl_configure_pins+0x5c>
			NRF_PSEL_PWM(reg, OUT[1]) = NRF_GET_PIN(pins[i]);
    4cda:	f004 043f 	and.w	r4, r4, #63	; 0x3f
    4cde:	f8c6 4564 	str.w	r4, [r6, #1380]	; 0x564
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]),
    4ce2:	e7f2      	b.n	4cca <pinctrl_configure_pins+0xe8>
			NRF_PSEL_PWM(reg, OUT[2]) = NRF_GET_PIN(pins[i]);
    4ce4:	f004 043f 	and.w	r4, r4, #63	; 0x3f
    4ce8:	f8c6 4568 	str.w	r4, [r6, #1384]	; 0x568
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]),
    4cec:	e7ed      	b.n	4cca <pinctrl_configure_pins+0xe8>
			NRF_PSEL_PWM(reg, OUT[3]) = NRF_GET_PIN(pins[i]);
    4cee:	f004 043f 	and.w	r4, r4, #63	; 0x3f
    4cf2:	f8c6 456c 	str.w	r4, [r6, #1388]	; 0x56c
    4cf6:	e7e8      	b.n	4cca <pinctrl_configure_pins+0xe8>
		switch (NRF_GET_FUN(pins[i])) {
    4cf8:	f06f 0085 	mvn.w	r0, #133	; 0x85
    4cfc:	e77d      	b.n	4bfa <pinctrl_configure_pins+0x18>

00004cfe <k_sys_fatal_error_handler>:

extern void sys_arch_reboot(int type);

void k_sys_fatal_error_handler(unsigned int reason,
			       const z_arch_esf_t *esf)
{
    4cfe:	b508      	push	{r3, lr}
	z_spm_ns_fatal_error_handler();
#endif

	if (IS_ENABLED(CONFIG_RESET_ON_FATAL_ERROR)) {
		LOG_ERR("Resetting system");
		sys_arch_reboot(0);
    4d00:	2000      	movs	r0, #0
    4d02:	f7fd f8d5 	bl	1eb0 <sys_arch_reboot>

00004d06 <nrf52_errata_108>:
            if (*(uint32_t *)0x10000130ul == 0xFFFFFFFF)
    4d06:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    4d0a:	f8d3 0130 	ldr.w	r0, [r3, #304]	; 0x130
    4d0e:	1c42      	adds	r2, r0, #1
                var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
    4d10:	bf04      	itt	eq
    4d12:	f04f 4370 	moveq.w	r3, #4026531840	; 0xf0000000
    4d16:	f893 0fe0 	ldrbeq.w	r0, [r3, #4064]	; 0xfe0
}
    4d1a:	1f83      	subs	r3, r0, #6
    4d1c:	4258      	negs	r0, r3
    4d1e:	4158      	adcs	r0, r3
    4d20:	4770      	bx	lr

00004d22 <nrfx_isr>:
#include <zephyr/kernel.h>
#include <soc/nrfx_coredep.h>

void nrfx_isr(const void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
    4d22:	4700      	bx	r0

00004d24 <nrfx_busy_wait>:
	z_impl_k_busy_wait(usec_to_wait);
    4d24:	f000 b941 	b.w	4faa <z_impl_k_busy_wait>

00004d28 <nrfx_clock_enable>:
{
    4d28:	b508      	push	{r3, lr}
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
    4d2a:	2000      	movs	r0, #0
    4d2c:	f7fc fd3c 	bl	17a8 <arch_irq_is_enabled>
    4d30:	b908      	cbnz	r0, 4d36 <nrfx_clock_enable+0xe>
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
    4d32:	f7fc fd29 	bl	1788 <arch_irq_enable>
    p_reg->LFCLKSRC = (uint32_t)(source);
    4d36:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    4d3a:	2200      	movs	r2, #0
    4d3c:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
}
    4d40:	bd08      	pop	{r3, pc}

00004d42 <nrfx_clock_stop>:
    clock_stop(domain);
    4d42:	f7fe b93f 	b.w	2fc4 <clock_stop>

00004d46 <nrf_gpio_cfg_sense_set>:
    *p_pin = pin_number & 0x1F;
    4d46:	f000 001f 	and.w	r0, r0, #31
    4d4a:	0080      	lsls	r0, r0, #2
    4d4c:	f100 40a0 	add.w	r0, r0, #1342177280	; 0x50000000
    uint32_t cnf = reg->PIN_CNF[pin_number];
    4d50:	f8d0 3700 	ldr.w	r3, [r0, #1792]	; 0x700
    cnf &= ~to_update;
    4d54:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    4d58:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    reg->PIN_CNF[pin_number] = cnf;
    4d5c:	f8c0 3700 	str.w	r3, [r0, #1792]	; 0x700
}
    4d60:	4770      	bx	lr

00004d62 <SEGGER_RTT_Init>:
*    Initializes the RTT Control Block.
*    Should be used in RAM targets, at start of the application.
*
*/
void SEGGER_RTT_Init (void) {
  _DoInit();
    4d62:	f7fe bd45 	b.w	37f0 <_DoInit>

00004d66 <rtt_init>:
 */

K_MUTEX_DEFINE(rtt_term_mutex);

static int rtt_init(const struct device *unused)
{
    4d66:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	SEGGER_RTT_Init();
    4d68:	f7ff fffb 	bl	4d62 <SEGGER_RTT_Init>

	return 0;
}
    4d6c:	2000      	movs	r0, #0
    4d6e:	bd08      	pop	{r3, pc}

00004d70 <z_device_state_init>:
}
    4d70:	4770      	bx	lr

00004d72 <z_device_is_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
    4d72:	b138      	cbz	r0, 4d84 <z_device_is_ready+0x12>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
    4d74:	68c3      	ldr	r3, [r0, #12]
    4d76:	8818      	ldrh	r0, [r3, #0]
    4d78:	f3c0 0008 	ubfx	r0, r0, #0, #9
    4d7c:	f5a0 7380 	sub.w	r3, r0, #256	; 0x100
    4d80:	4258      	negs	r0, r3
    4d82:	4158      	adcs	r0, r3
}
    4d84:	4770      	bx	lr

00004d86 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    4d86:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4d88:	4605      	mov	r5, r0
    4d8a:	460e      	mov	r6, r1
	__asm__ volatile(
    4d8c:	f04f 0320 	mov.w	r3, #32
    4d90:	f3ef 8711 	mrs	r7, BASEPRI
    4d94:	f383 8812 	msr	BASEPRI_MAX, r3
    4d98:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
    4d9c:	f7ff f9e2 	bl	4164 <z_impl_z_current_get>

#ifndef CONFIG_XTENSA
	coredump(reason, esf, thread);
#endif

	k_sys_fatal_error_handler(reason, esf);
    4da0:	4631      	mov	r1, r6
    4da2:	4604      	mov	r4, r0
    4da4:	4628      	mov	r0, r5
    4da6:	f7ff ffaa 	bl	4cfe <k_sys_fatal_error_handler>
	__asm__ volatile(
    4daa:	f387 8811 	msr	BASEPRI, r7
    4dae:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
    4db2:	4620      	mov	r0, r4
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
    4db4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    4db8:	f7fc bf80 	b.w	1cbc <z_impl_k_thread_abort>

00004dbc <z_early_memset>:
	(void) memset(dst, c, n);
    4dbc:	f7ff bd5c 	b.w	4878 <memset>

00004dc0 <z_early_memcpy>:
	(void) memcpy(dst, src, n);
    4dc0:	f7ff bd4f 	b.w	4862 <memcpy>

00004dc4 <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    4dc4:	f3ef 8005 	mrs	r0, IPSR
}
    4dc8:	3800      	subs	r0, #0
    4dca:	bf18      	it	ne
    4dcc:	2001      	movne	r0, #1
    4dce:	4770      	bx	lr

00004dd0 <z_pm_save_idle_exit>:
{
    4dd0:	b508      	push	{r3, lr}
	pm_system_resume();
    4dd2:	f7fc fbb5 	bl	1540 <pm_system_resume>
}
    4dd6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	sys_clock_idle_exit();
    4dda:	f7ff bebc 	b.w	4b56 <sys_clock_idle_exit>

00004dde <sys_dlist_remove>:
	sys_dnode_t *const next = node->next;
    4dde:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
    4de2:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    4de4:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    4de6:	2300      	movs	r3, #0
	node->prev = NULL;
    4de8:	e9c0 3300 	strd	r3, r3, [r0]
	sys_dnode_init(node);
}
    4dec:	4770      	bx	lr

00004dee <unpend_thread_no_timeout>:
{
    4dee:	b508      	push	{r3, lr}
	sys_dlist_remove(&thread->base.qnode_dlist);
    4df0:	f7ff fff5 	bl	4dde <sys_dlist_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    4df4:	7b43      	ldrb	r3, [r0, #13]
    4df6:	f023 0302 	bic.w	r3, r3, #2
    4dfa:	7343      	strb	r3, [r0, #13]
	thread->base.pended_on = NULL;
    4dfc:	2300      	movs	r3, #0
    4dfe:	6083      	str	r3, [r0, #8]
}
    4e00:	bd08      	pop	{r3, pc}

00004e02 <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    4e02:	4603      	mov	r3, r0
    4e04:	b920      	cbnz	r0, 4e10 <z_reschedule_irqlock+0xe>
    4e06:	f3ef 8205 	mrs	r2, IPSR
	if (resched(key)) {
    4e0a:	b90a      	cbnz	r2, 4e10 <z_reschedule_irqlock+0xe>
	ret = arch_swap(key);
    4e0c:	f7fc bd12 	b.w	1834 <arch_swap>
    4e10:	f383 8811 	msr	BASEPRI, r3
    4e14:	f3bf 8f6f 	isb	sy
}
    4e18:	4770      	bx	lr

00004e1a <z_reschedule_unlocked>:
	__asm__ volatile(
    4e1a:	f04f 0320 	mov.w	r3, #32
    4e1e:	f3ef 8011 	mrs	r0, BASEPRI
    4e22:	f383 8812 	msr	BASEPRI_MAX, r3
    4e26:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
    4e2a:	f7ff bfea 	b.w	4e02 <z_reschedule_irqlock>

00004e2e <z_priq_dumb_best>:
{
    4e2e:	4603      	mov	r3, r0
	return list->head == list;
    4e30:	6800      	ldr	r0, [r0, #0]
}
    4e32:	4283      	cmp	r3, r0
    4e34:	bf08      	it	eq
    4e36:	2000      	moveq	r0, #0
    4e38:	4770      	bx	lr

00004e3a <z_ready_thread>:
{
    4e3a:	b510      	push	{r4, lr}
    4e3c:	f04f 0320 	mov.w	r3, #32
    4e40:	f3ef 8411 	mrs	r4, BASEPRI
    4e44:	f383 8812 	msr	BASEPRI_MAX, r3
    4e48:	f3bf 8f6f 	isb	sy
			ready_thread(thread);
    4e4c:	f7fe ffe8 	bl	3e20 <ready_thread>
	__asm__ volatile(
    4e50:	f384 8811 	msr	BASEPRI, r4
    4e54:	f3bf 8f6f 	isb	sy
}
    4e58:	bd10      	pop	{r4, pc}

00004e5a <z_thread_timeout>:
{
    4e5a:	b510      	push	{r4, lr}
    4e5c:	4601      	mov	r1, r0
	__asm__ volatile(
    4e5e:	f04f 0320 	mov.w	r3, #32
    4e62:	f3ef 8411 	mrs	r4, BASEPRI
    4e66:	f383 8812 	msr	BASEPRI_MAX, r3
    4e6a:	f3bf 8f6f 	isb	sy
		if (!killed) {
    4e6e:	f810 3c0b 	ldrb.w	r3, [r0, #-11]
    4e72:	f013 0f28 	tst.w	r3, #40	; 0x28
    4e76:	d10d      	bne.n	4e94 <z_thread_timeout+0x3a>
			if (thread->base.pended_on != NULL) {
    4e78:	f851 3c10 	ldr.w	r3, [r1, #-16]
	struct k_thread *thread = CONTAINER_OF(timeout,
    4e7c:	3818      	subs	r0, #24
			if (thread->base.pended_on != NULL) {
    4e7e:	b10b      	cbz	r3, 4e84 <z_thread_timeout+0x2a>
				unpend_thread_no_timeout(thread);
    4e80:	f7ff ffb5 	bl	4dee <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
    4e84:	f811 3c0b 	ldrb.w	r3, [r1, #-11]
    4e88:	f023 0314 	bic.w	r3, r3, #20
    4e8c:	f801 3c0b 	strb.w	r3, [r1, #-11]
			ready_thread(thread);
    4e90:	f7fe ffc6 	bl	3e20 <ready_thread>
	__asm__ volatile(
    4e94:	f384 8811 	msr	BASEPRI, r4
    4e98:	f3bf 8f6f 	isb	sy
}
    4e9c:	bd10      	pop	{r4, pc}

00004e9e <add_to_waitq_locked>:
{
    4e9e:	b538      	push	{r3, r4, r5, lr}
    4ea0:	4604      	mov	r4, r0
    4ea2:	460d      	mov	r5, r1
	unready_thread(thread);
    4ea4:	f7ff f810 	bl	3ec8 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
    4ea8:	7b63      	ldrb	r3, [r4, #13]
    4eaa:	f043 0302 	orr.w	r3, r3, #2
    4eae:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
    4eb0:	b195      	cbz	r5, 4ed8 <add_to_waitq_locked+0x3a>
    4eb2:	682b      	ldr	r3, [r5, #0]
		thread->base.pended_on = wait_q;
    4eb4:	60a5      	str	r5, [r4, #8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    4eb6:	429d      	cmp	r5, r3
    4eb8:	d015      	beq.n	4ee6 <add_to_waitq_locked+0x48>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    4eba:	b1a3      	cbz	r3, 4ee6 <add_to_waitq_locked+0x48>
	int32_t b1 = thread_1->base.prio;
    4ebc:	f994 100e 	ldrsb.w	r1, [r4, #14]
	int32_t b2 = thread_2->base.prio;
    4ec0:	f993 200e 	ldrsb.w	r2, [r3, #14]
	if (b1 != b2) {
    4ec4:	4291      	cmp	r1, r2
    4ec6:	d008      	beq.n	4eda <add_to_waitq_locked+0x3c>
		return b2 - b1;
    4ec8:	1a52      	subs	r2, r2, r1
		if (z_sched_prio_cmp(thread, t) > 0) {
    4eca:	2a00      	cmp	r2, #0
    4ecc:	dd05      	ble.n	4eda <add_to_waitq_locked+0x3c>
	sys_dnode_t *const prev = successor->prev;
    4ece:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    4ed0:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
    4ed4:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    4ed6:	605c      	str	r4, [r3, #4]
}
    4ed8:	bd38      	pop	{r3, r4, r5, pc}
	return (node == list->tail) ? NULL : node->next;
    4eda:	686a      	ldr	r2, [r5, #4]
    4edc:	4293      	cmp	r3, r2
    4ede:	d002      	beq.n	4ee6 <add_to_waitq_locked+0x48>
    4ee0:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    4ee2:	2b00      	cmp	r3, #0
    4ee4:	d1ec      	bne.n	4ec0 <add_to_waitq_locked+0x22>
	sys_dnode_t *const tail = list->tail;
    4ee6:	686b      	ldr	r3, [r5, #4]
	node->prev = tail;
    4ee8:	e9c4 5300 	strd	r5, r3, [r4]
	tail->next = node;
    4eec:	601c      	str	r4, [r3, #0]
	list->tail = node;
    4eee:	606c      	str	r4, [r5, #4]
}
    4ef0:	e7f2      	b.n	4ed8 <add_to_waitq_locked+0x3a>

00004ef2 <z_unpend_first_thread>:
{
    4ef2:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    4ef4:	f04f 0320 	mov.w	r3, #32
    4ef8:	f3ef 8511 	mrs	r5, BASEPRI
    4efc:	f383 8812 	msr	BASEPRI_MAX, r3
    4f00:	f3bf 8f6f 	isb	sy
		thread = _priq_wait_best(&wait_q->waitq);
    4f04:	f7ff ff93 	bl	4e2e <z_priq_dumb_best>
		if (thread != NULL) {
    4f08:	4604      	mov	r4, r0
    4f0a:	b120      	cbz	r0, 4f16 <z_unpend_first_thread+0x24>
			unpend_thread_no_timeout(thread);
    4f0c:	f7ff ff6f 	bl	4dee <unpend_thread_no_timeout>
    4f10:	3018      	adds	r0, #24
    4f12:	f000 f806 	bl	4f22 <z_abort_timeout>
	__asm__ volatile(
    4f16:	f385 8811 	msr	BASEPRI, r5
    4f1a:	f3bf 8f6f 	isb	sy
}
    4f1e:	4620      	mov	r0, r4
    4f20:	bd38      	pop	{r3, r4, r5, pc}

00004f22 <z_abort_timeout>:
{
    4f22:	b510      	push	{r4, lr}
	__asm__ volatile(
    4f24:	f04f 0220 	mov.w	r2, #32
    4f28:	f3ef 8411 	mrs	r4, BASEPRI
    4f2c:	f382 8812 	msr	BASEPRI_MAX, r2
    4f30:	f3bf 8f6f 	isb	sy
		if (sys_dnode_is_linked(&to->node)) {
    4f34:	6803      	ldr	r3, [r0, #0]
    4f36:	b13b      	cbz	r3, 4f48 <z_abort_timeout+0x26>
			remove_timeout(to);
    4f38:	f7ff f9c4 	bl	42c4 <remove_timeout>
			ret = 0;
    4f3c:	2000      	movs	r0, #0
	__asm__ volatile(
    4f3e:	f384 8811 	msr	BASEPRI, r4
    4f42:	f3bf 8f6f 	isb	sy
}
    4f46:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
    4f48:	f06f 0015 	mvn.w	r0, #21
    4f4c:	e7f7      	b.n	4f3e <z_abort_timeout+0x1c>

00004f4e <z_get_next_timeout_expiry>:
{
    4f4e:	b510      	push	{r4, lr}
	__asm__ volatile(
    4f50:	f04f 0320 	mov.w	r3, #32
    4f54:	f3ef 8411 	mrs	r4, BASEPRI
    4f58:	f383 8812 	msr	BASEPRI_MAX, r3
    4f5c:	f3bf 8f6f 	isb	sy
		ret = next_timeout();
    4f60:	f7ff f98a 	bl	4278 <next_timeout>
	__asm__ volatile(
    4f64:	f384 8811 	msr	BASEPRI, r4
    4f68:	f3bf 8f6f 	isb	sy
}
    4f6c:	bd10      	pop	{r4, pc}

00004f6e <z_set_timeout_expiry>:
{
    4f6e:	b570      	push	{r4, r5, r6, lr}
    4f70:	4604      	mov	r4, r0
    4f72:	460d      	mov	r5, r1
	__asm__ volatile(
    4f74:	f04f 0320 	mov.w	r3, #32
    4f78:	f3ef 8611 	mrs	r6, BASEPRI
    4f7c:	f383 8812 	msr	BASEPRI_MAX, r3
    4f80:	f3bf 8f6f 	isb	sy
		int next_to = next_timeout();
    4f84:	f7ff f978 	bl	4278 <next_timeout>
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
    4f88:	2801      	cmp	r0, #1
    4f8a:	dd05      	ble.n	4f98 <z_set_timeout_expiry+0x2a>
    4f8c:	42a0      	cmp	r0, r4
    4f8e:	db03      	blt.n	4f98 <z_set_timeout_expiry+0x2a>
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
    4f90:	4629      	mov	r1, r5
    4f92:	4620      	mov	r0, r4
    4f94:	f7fd fe32 	bl	2bfc <sys_clock_set_timeout>
	__asm__ volatile(
    4f98:	f386 8811 	msr	BASEPRI, r6
    4f9c:	f3bf 8f6f 	isb	sy
}
    4fa0:	bd70      	pop	{r4, r5, r6, pc}

00004fa2 <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
    4fa2:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
    4fa4:	f7ff fa7e 	bl	44a4 <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
    4fa8:	bd08      	pop	{r3, pc}

00004faa <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
    4faa:	b108      	cbz	r0, 4fb0 <z_impl_k_busy_wait+0x6>
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
    4fac:	f7fc bf96 	b.w	1edc <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
    4fb0:	4770      	bx	lr

00004fb2 <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
    4fb2:	4770      	bx	lr
